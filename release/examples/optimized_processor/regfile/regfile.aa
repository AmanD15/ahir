$storage reg_array:$array [16] $of $uint<16>
$pipe start_write_daemon : $uint<1>

$pipeline $module [access_reg_locks]
	$in  (i_count clear_mask test_mask set_mask: $uint<16>)
	$out (locks_available : $uint<1>)
$is
{
	$storage reg_locks: $uint<16>

	$report (access_reg_locks argument_values
			i_count i_count
			clear_mask clear_mask
			test_mask test_mask
			set_mask set_mask)
	
	erlock := reg_locks
	$volatile post_clear_erlock := (erlock & (~ clear_mask))
	locks_available   := ((test_mask & post_clear_erlock) == 0)
	$volatile post_set_erlock   := (post_clear_erlock | set_mask)
	reg_locks := post_set_erlock

	$report (access_reg_locks return_values
				erlock erlock
				post_clear_erlock post_clear_erlock
				post_set_erlock   post_set_erlock
				locks_available locks_available)
}

$module [init_regs] $in () $out () $is
{
	$branchblock[lOoP] {
		$merge $entry loopback 
			$phi I := Z16 $on $entry NI $on loopback
		$endmerge

		NI := (I+1)
	
		reg_array[I] := 0

		$if (NI < 16) 	$then
			$place [loopback]
		$endif
		
	}
}

$pipeline $module [access_regs]
	$in (i_count: $uint<16> r1: $uint<4> rr1 wr1: $uint<1> wr1_val: $uint<16> r2: $uint<4> rr2: $uint<1> r3: $uint<4> rr3: $uint<1>)
	$out (r1_val r2_val r3_val: $uint<16>) $is
{
	
	$report (access_regs argument_values
				i_count i_count
				r1 r1 rr1 rr1 wr1 wr1 wr1_val wr1_val r2 r2 rr2 rr2 r3 r3 rr3 rr3)
	$guard (wr1) reg_array[r1] := wr1_val
	$guard (rr1) r1_val := reg_array[r1]
	$guard (rr2) r2_val := reg_array[r2]
	$guard (rr3) r3_val := reg_array[r3]

	$report (access_regs return_values
			i_count i_count
			r1_val r1_val r2_val r2_val r3_val r3_val)

}

$module [reg_read_daemon] 
	$in ()
	$out () $is
{

	$call init_regs () ()
	$call access_reg_locks (Z16 (~Z16) Z16 Z16) (ignore_flag)

	start_write_daemon := 1

	$branchblock [lOoP] {
		$dopipeline $depth 8 $buffering 2 $fullrate

			$merge $entry $loopback 
				$phi free_state := O1 $on $entry all_locks_available $on $loopback
			$endmerge

			$guard (free_state) cmd := reg_read_access_command 

			$split (cmd 16 4 1 1 4 1 4 1)
					(i_count r1 rr1 wr1 r2 rr2 r3 rr3)
			$guard (free_state) $report (reg_read_daemon read_command
							i_count i_count
								r1 r1 rr1 rr1 wr1 wr1
								r2 r2 rr2 rr2 r3 r3 rr3 rr3 )

			$volatile test_mask 
				:= ($reduce | 
						($mux (wr1 | rr1) (O16 << ($bitcast ($uint<16>) r1)) Z16)
						($mux rr2 (O16 << ($bitcast ($uint<16>) r2)) Z16)
						($mux rr3 (O16 << ($bitcast ($uint<16>) r3)) Z16)
					   )
			$volatile set_mask
				:= ($mux wr1 (O16 << ($bitcast ($uint<16>) r1)) Z16)
			$call access_reg_locks (i_count Z16 test_mask set_mask) (all_locks_available)

			$guard (all_locks_available)
				$call access_regs (i_count r1 rr1 Z1 Z16 r2 rr2 r3 rr3) (r1_val r2_val r3_val)

			$guard (all_locks_available)
					reg_read_access_response := ($concat i_count r1_val r2_val r3_val)

			$while 1

	}
}



$module [reg_write_daemon] 
	$in ()
	$out () $is
{

	start_flag := start_write_daemon

	$branchblock [lOoP] {
		$dopipeline $depth 8 $buffering 2 $fullrate

			$merge $entry $loopback $endmerge

			cmd := reg_write_access_command 
			$split (cmd 16 4 16) (i_count r1 r1_val)

			$report (reg_write_daemon write_reg_command 
					i_count i_count
					r1 r1 r1_val r1_val)

			$call access_regs (i_count r1 Z1 O1 r1_val Z4 Z1 Z4 Z1) (i1 i2 i3) $mark AR

			$call access_reg_locks 
				(i_count (O16 << ($bitcast ($uint<16>) r1)) Z16 Z16) (all_locks_available) $synch (AR)


		$while 1
	}
}

