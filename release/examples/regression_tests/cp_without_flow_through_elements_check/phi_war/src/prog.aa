$pipe in_data  : $uint<8> $depth 2
$pipe out_data : $uint<8> $depth 2

$volatile $module [add_v] $in (A: $uint<8>) $out (B: $uint<8>) $is {
	B := (A+1)
}

$module [add_nv] $in (A: $uint<8>) $out (B: $uint<8>) $is {
	B := (A+1)
}

$module [volatile_check_daemon] $in() $out () $is
{
	$branchblock[lOoP] {
		$dopipeline $depth 16 $buffering 2 
		$fullrate
		$merge $entry $loopback 
			$phi X := _b0 $on $entry in_data $on $loopback
			$phi C := ($bitcast ($uint<8>) 0) $on $entry nC $on $loopback
			$phi CC := ($bitcast ($uint<8>) 0) $on $entry nCC $on $loopback
			$phi CCC := ($bitcast ($uint<8>) 0) $on $entry nCCC $on $loopback
			$phi CCCC := ($bitcast ($uint<8>) 0) $on $entry nnnCCCC $on $loopback
		$endmerge

		$volatile nC := (C+1) // Self-referential WAR dependency

		unCC := (CC+1)
		$volatile nCC := unCC // WAR dependency..


		$volatile $call add_v (CCC) (nCCC)  // self-referential..

		$call add_nv (CCCC) (tCCCC) // true WAR!
		ttCCCC := tCCCC
		$volatile nCCCC  := ttCCCC
		nnCCCC := nCCCC
		$volatile nnnCCCC  := nnCCCC

		$volatile Y := ($reduce + X C CC CCC CCCC)
		out_data := Y   // RAW dependency.
		$while 1
	}
}
