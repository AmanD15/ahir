$pipe out_data : $uint<32> $depth 2
$pipe in_data : $uint<32> $depth 2

$volatile $module [sub] $in (X Y: $uint<32>) $out (Z: $uint<32>) $is
{
	Z := (X - Y)
}

$pipeline $fullrate $deterministic $operator
	$module[foo] $in(S: $uint<1> X: $uint<32>  Y: $uint<32>)
			$out(Z ZZ: $uint<32>)
$is
{
	U := (X + Y)
	V := (U + (X + Y))
	$volatile $call sub (X Y) (W)
	$guard (S) Z := ((V + W) >> 2)
	ZZ := X
//	$attribute delay 3
}

$pipeline $fullrate $deterministic 
	$module[bar] $in(S: $uint<1> X: $uint<32>  Y: $uint<32>)
			$out(Z ZZ: $uint<32>)
$is
{
	U := Y 
	V := (U + X)
	$volatile W := (X - Y)
	$guard (~S) Z0 := ((V + W) >> 1)
	Z1  := (Z0 + X)
        Z   := (Z1 - X)
	ZZ := X

//	$attribute delay 6
}


$module [p2p_check_daemon] $in() $out () $is
{
	$branchblock[lOoP] {

		$dopipeline $depth 15 $buffering 2 $fullrate
		$merge $entry $loopback $endmerge

	 	CMD := in_data

		$volatile S := (CMD [] 0)

		$call foo (S CMD CMD) (RESP RESPI)
		$call bar (S CMD CMD) (URESP URESPI)

		$volatile oval := ($mux S RESP  URESP)
		out_data := oval
		$while 1
	}
}
