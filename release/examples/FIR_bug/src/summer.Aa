$pipe out_data_pipe : $float<8,23> $depth 1
$pipe to_summer : $uint<33> $depth 8
$module [summer] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block bb_0
    $dopipeline $depth 8 $buffering 1 
    	$merge $entry $loopback
    		$phi Y :=  ($bitcast ($float<8,23>) 0) $on $entry ACCVAL $on $loopback 
    	$endmerge

    	from_fir := to_summer
	$split (from_fir 1 32) (sum_flag sum_data)

	// if sum-flag is 1, send Y to output.
    	$guard (sum_flag) 
		out_data_pipe := Y

    	ACCVAL := ($mux sum_flag  _f0.000000e+00 (Y + ($bitcast ($float<8,23>) sum_data)))
    $while 1
  }
}
