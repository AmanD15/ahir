// Virtual circuit produced from Aa description by Aa2VC 
$module [asum] 
{
  $out c:$int<32>
  // can point into  foreign( $void )
  // pipe-declarations for block %asum
  //  file prog.opt.aa, line 1
  // pipe-declarations for block %asum%run
  //  file prog.opt.aa, line 6
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_3] // Branch Block  file prog.opt.aa, line 6
    {
      $P [branch_block_stmt_3__entry__]
      branch_block_stmt_3__entry__ <-| ($entry)
      $P [branch_block_stmt_3__exit__]
      branch_block_stmt_3__exit__ |-> ($exit)
      $P [do_while_stmt_4__entry__] 
      $P [do_while_stmt_4__exit__] 
      // do-while-statement  
      //  file prog.opt.aa, line 0
      <o> [do_while_stmt_4] 
      {
        $P[do_while_stmt_4__entry__] 
        $P[do_while_stmt_4__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline[do_while_stmt_4_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          // PHI statement phi_stmt_6
          // 			$phi I := 			  ($bitcast ($uint<32>) 0  ) $on $entry			  NI $on $loopback // type of target is $uint<32>
          $T[phi_stmt_6_req_0_raw] 
          $T[phi_stmt_6_req_0] 
          phi_stmt_6_req_0_raw &-> (phi_stmt_6_req_0)
          $T[phi_stmt_6_trigger_from_first_time_through_loop_body] 
          first_time_through_loop_body &-> (phi_stmt_6_trigger_from_first_time_through_loop_body)
          $T[phi_stmt_6_req_1_raw] 
          $T[phi_stmt_6_req_1] 
          phi_stmt_6_req_1_raw &-> (phi_stmt_6_req_1)
          $T[phi_stmt_6_trigger_from_back_edge_to_loop_body] 
          back_edge_to_loop_body &-> (phi_stmt_6_trigger_from_back_edge_to_loop_body)
          $T[phi_stmt_6_phi_sequencer_reqs_merged] 
          $T[phi_stmt_6_phi_sequencer_done] 
          $T[phi_stmt_6_ack] 
          $T[phi_stmt_6_enable_] 
          $T[phi_stmt_6_trigger_] 
          $T[phi_stmt_6_active_] 
          $T[phi_stmt_6_completed_] 
          phi_stmt_6_trigger_ &-> (phi_stmt_6_enable_)
          $phisequencer (  phi_stmt_6_trigger_from_first_time_through_loop_body phi_stmt_6_trigger_from_back_edge_to_loop_body : phi_stmt_6_enable_ : phi_stmt_6_ack ) (  phi_stmt_6_req_0_raw phi_stmt_6_req_1_raw : phi_stmt_6_phi_sequencer_done ) 
          $transitionmerge [phi_stmt_6_req_merger] ( phi_stmt_6_req_0 phi_stmt_6_req_1) (phi_stmt_6_phi_sequencer_reqs_merged)
          phi_stmt_6_phi_sequencer_reqs_merged &-> ($exit)
          phi_stmt_6_active_ <-& (phi_stmt_6_phi_sequencer_done)
          phi_stmt_6_completed_ <-& (phi_stmt_6_active_)
          // NI
          // implicit reference
          $T[simple_obj_ref_10_trigger_] 
          $T[simple_obj_ref_10_completed_] 
          $T[simple_obj_ref_10_active_] 
          simple_obj_ref_10_completed_ <-& (simple_obj_ref_10_active_)
          simple_obj_ref_10_active_ <-& (simple_obj_ref_10_trigger_)
          phi_stmt_6_trigger_ <-& (simple_obj_ref_10_completed_)
          simple_obj_ref_10_trigger_ o<-& (phi_stmt_6_completed_)
          // PHI statement phi_stmt_11
          // 			$phi R := 			  0  $on $entry			  R4 $on $loopback // type of target is $uint<32>
          $T[phi_stmt_11_req_0_raw] 
          $T[phi_stmt_11_req_0] 
          phi_stmt_11_req_0_raw &-> (phi_stmt_11_req_0)
          $T[phi_stmt_11_trigger_from_first_time_through_loop_body] 
          first_time_through_loop_body &-> (phi_stmt_11_trigger_from_first_time_through_loop_body)
          $T[phi_stmt_11_req_1_raw] 
          $T[phi_stmt_11_req_1] 
          phi_stmt_11_req_1_raw &-> (phi_stmt_11_req_1)
          $T[phi_stmt_11_trigger_from_back_edge_to_loop_body] 
          back_edge_to_loop_body &-> (phi_stmt_11_trigger_from_back_edge_to_loop_body)
          $T[phi_stmt_11_phi_sequencer_reqs_merged] 
          $T[phi_stmt_11_phi_sequencer_done] 
          $T[phi_stmt_11_ack] 
          $T[phi_stmt_11_enable_] 
          $T[phi_stmt_11_trigger_] 
          $T[phi_stmt_11_active_] 
          $T[phi_stmt_11_completed_] 
          phi_stmt_11_trigger_ &-> (phi_stmt_11_enable_)
          $phisequencer (  phi_stmt_11_trigger_from_first_time_through_loop_body phi_stmt_11_trigger_from_back_edge_to_loop_body : phi_stmt_11_enable_ : phi_stmt_11_ack ) (  phi_stmt_11_req_0_raw phi_stmt_11_req_1_raw : phi_stmt_11_phi_sequencer_done ) 
          $transitionmerge [phi_stmt_11_req_merger] ( phi_stmt_11_req_0 phi_stmt_11_req_1) (phi_stmt_11_phi_sequencer_reqs_merged)
          phi_stmt_11_phi_sequencer_reqs_merged &-> ($exit)
          phi_stmt_11_active_ <-& (phi_stmt_11_phi_sequencer_done)
          phi_stmt_11_completed_ <-& (phi_stmt_11_active_)
          // R4
          // implicit reference
          $T[simple_obj_ref_14_trigger_] 
          $T[simple_obj_ref_14_completed_] 
          $T[simple_obj_ref_14_active_] 
          simple_obj_ref_14_completed_ <-& (simple_obj_ref_14_active_)
          simple_obj_ref_14_active_ <-& (simple_obj_ref_14_trigger_)
          phi_stmt_11_trigger_ <-& (simple_obj_ref_14_completed_)
          simple_obj_ref_14_trigger_ o<-& (phi_stmt_11_completed_)
          // 			R1 := (R + 1 )
          //  file prog.opt.aa, line 13
          $T[assign_stmt_20_trigger_] 
          $T[assign_stmt_20_active_] 
          $T[assign_stmt_20_completed_] 
          assign_stmt_20_active_ <-& (assign_stmt_20_trigger_)
          // (R + 1 )
          $T[binary_19_active_] 
          $T[binary_19_trigger_] 
          $T[binary_19_completed_] 
          // R
          // implicit reference
          $T[simple_obj_ref_17_trigger_] 
          $T[simple_obj_ref_17_completed_] 
          $T[simple_obj_ref_17_active_] 
          simple_obj_ref_17_completed_ <-& (simple_obj_ref_17_active_)
          simple_obj_ref_17_active_ <-& (simple_obj_ref_17_trigger_)
          simple_obj_ref_17_trigger_ <-& (phi_stmt_11_completed_)
          phi_stmt_11_enable_ o<-& (simple_obj_ref_17_completed_)
          simple_obj_ref_17_trigger_ o<-& (simple_obj_ref_17_active_)
          simple_obj_ref_17_active_ o<-& (simple_obj_ref_17_completed_)
          binary_19_trigger_ <-& (simple_obj_ref_17_completed_)
          ;;[binary_19_complete_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[binary_19_complete_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          binary_19_trigger_ &-> (binary_19_complete_Sample)
          binary_19_active_ <-& (binary_19_complete_Sample)
          binary_19_active_ &-> (binary_19_complete_Update)
          binary_19_completed_ <-& (binary_19_complete_Update)
          phi_stmt_11_enable_ o<-& (binary_19_active_)
          binary_19_trigger_ o<-& (binary_19_active_)
          binary_19_active_ o<-& (binary_19_completed_)
          assign_stmt_20_active_ <-& (binary_19_completed_)
          binary_19_active_ o<-& (assign_stmt_20_completed_)
          // R1
          // implicit reference
          assign_stmt_20_completed_ <-& (assign_stmt_20_active_)
          assign_stmt_20_trigger_ o<-& (assign_stmt_20_active_)
          assign_stmt_20_active_ o<-& (assign_stmt_20_completed_)
          // 			R2 := (R1 + 1 )
          //  file prog.opt.aa, line 18
          $T[assign_stmt_25_trigger_] 
          $T[assign_stmt_25_active_] 
          $T[assign_stmt_25_completed_] 
          assign_stmt_25_active_ <-& (assign_stmt_25_trigger_)
          // (R1 + 1 )
          $T[binary_24_active_] 
          $T[binary_24_trigger_] 
          $T[binary_24_completed_] 
          // R1
          // implicit reference
          $T[simple_obj_ref_22_trigger_] 
          $T[simple_obj_ref_22_completed_] 
          $T[simple_obj_ref_22_active_] 
          simple_obj_ref_22_completed_ <-& (simple_obj_ref_22_active_)
          simple_obj_ref_22_active_ <-& (simple_obj_ref_22_trigger_)
          simple_obj_ref_22_trigger_ <-& (assign_stmt_20_completed_)
          binary_19_active_ o<-& (simple_obj_ref_22_completed_)
          simple_obj_ref_22_trigger_ o<-& (simple_obj_ref_22_active_)
          simple_obj_ref_22_active_ o<-& (simple_obj_ref_22_completed_)
          binary_24_trigger_ <-& (simple_obj_ref_22_completed_)
          ;;[binary_24_complete_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[binary_24_complete_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          binary_24_trigger_ &-> (binary_24_complete_Sample)
          binary_24_active_ <-& (binary_24_complete_Sample)
          binary_24_active_ &-> (binary_24_complete_Update)
          binary_24_completed_ <-& (binary_24_complete_Update)
          binary_19_active_ o<-& (binary_24_active_)
          binary_24_trigger_ o<-& (binary_24_active_)
          binary_24_active_ o<-& (binary_24_completed_)
          assign_stmt_25_active_ <-& (binary_24_completed_)
          binary_24_active_ o<-& (assign_stmt_25_completed_)
          // R2
          // implicit reference
          assign_stmt_25_completed_ <-& (assign_stmt_25_active_)
          assign_stmt_25_trigger_ o<-& (assign_stmt_25_active_)
          assign_stmt_25_active_ o<-& (assign_stmt_25_completed_)
          // 			R3 := (R2 + 1 )
          //  file prog.opt.aa, line 23
          $T[assign_stmt_30_trigger_] 
          $T[assign_stmt_30_active_] 
          $T[assign_stmt_30_completed_] 
          assign_stmt_30_active_ <-& (assign_stmt_30_trigger_)
          // (R2 + 1 )
          $T[binary_29_active_] 
          $T[binary_29_trigger_] 
          $T[binary_29_completed_] 
          // R2
          // implicit reference
          $T[simple_obj_ref_27_trigger_] 
          $T[simple_obj_ref_27_completed_] 
          $T[simple_obj_ref_27_active_] 
          simple_obj_ref_27_completed_ <-& (simple_obj_ref_27_active_)
          simple_obj_ref_27_active_ <-& (simple_obj_ref_27_trigger_)
          simple_obj_ref_27_trigger_ <-& (assign_stmt_25_completed_)
          binary_24_active_ o<-& (simple_obj_ref_27_completed_)
          simple_obj_ref_27_trigger_ o<-& (simple_obj_ref_27_active_)
          simple_obj_ref_27_active_ o<-& (simple_obj_ref_27_completed_)
          binary_29_trigger_ <-& (simple_obj_ref_27_completed_)
          ;;[binary_29_complete_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[binary_29_complete_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          binary_29_trigger_ &-> (binary_29_complete_Sample)
          binary_29_active_ <-& (binary_29_complete_Sample)
          binary_29_active_ &-> (binary_29_complete_Update)
          binary_29_completed_ <-& (binary_29_complete_Update)
          binary_24_active_ o<-& (binary_29_active_)
          binary_29_trigger_ o<-& (binary_29_active_)
          binary_29_active_ o<-& (binary_29_completed_)
          assign_stmt_30_active_ <-& (binary_29_completed_)
          binary_29_active_ o<-& (assign_stmt_30_completed_)
          // R3
          // implicit reference
          assign_stmt_30_completed_ <-& (assign_stmt_30_active_)
          assign_stmt_30_trigger_ o<-& (assign_stmt_30_active_)
          assign_stmt_30_active_ o<-& (assign_stmt_30_completed_)
          // 			R4 := (R3 + 1 )
          //  file prog.opt.aa, line 28
          $T[assign_stmt_35_trigger_] 
          $T[assign_stmt_35_active_] 
          $T[assign_stmt_35_completed_] 
          assign_stmt_35_active_ <-& (assign_stmt_35_trigger_)
          // (R3 + 1 )
          $T[binary_34_active_] 
          $T[binary_34_trigger_] 
          $T[binary_34_completed_] 
          // R3
          // implicit reference
          $T[simple_obj_ref_32_trigger_] 
          $T[simple_obj_ref_32_completed_] 
          $T[simple_obj_ref_32_active_] 
          simple_obj_ref_32_completed_ <-& (simple_obj_ref_32_active_)
          simple_obj_ref_32_active_ <-& (simple_obj_ref_32_trigger_)
          simple_obj_ref_32_trigger_ <-& (assign_stmt_30_completed_)
          binary_29_active_ o<-& (simple_obj_ref_32_completed_)
          simple_obj_ref_32_trigger_ o<-& (simple_obj_ref_32_active_)
          simple_obj_ref_32_active_ o<-& (simple_obj_ref_32_completed_)
          binary_34_trigger_ <-& (simple_obj_ref_32_completed_)
          ;;[binary_34_complete_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[binary_34_complete_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          binary_34_trigger_ &-> (binary_34_complete_Sample)
          binary_34_active_ <-& (binary_34_complete_Sample)
          binary_34_active_ &-> (binary_34_complete_Update)
          binary_34_completed_ <-& (binary_34_complete_Update)
          binary_29_active_ o<-& (binary_34_active_)
          binary_34_trigger_ o<-& (binary_34_active_)
          binary_34_active_ o<-& (binary_34_completed_)
          assign_stmt_35_active_ <-& (binary_34_completed_)
          binary_34_active_ o<-& (assign_stmt_35_completed_)
          // R4
          // implicit reference
          assign_stmt_35_completed_ <-& (assign_stmt_35_active_)
          // WAR dependency: Read: R4 before Write: 			R4 := (R3 + 1 )
          binary_34_trigger_ <-& (phi_stmt_11_completed_)
          // WAR dependency: release  Read: R4 with Write: 			R4 := (R3 + 1 )
          simple_obj_ref_14_trigger_ o<-& (assign_stmt_35_completed_)
          assign_stmt_35_trigger_ o<-& (assign_stmt_35_active_)
          assign_stmt_35_active_ o<-& (assign_stmt_35_completed_)
          // 			NI := (I + 1 )
          //  file prog.opt.aa, line 33
          $T[assign_stmt_40_trigger_] 
          $T[assign_stmt_40_active_] 
          $T[assign_stmt_40_completed_] 
          assign_stmt_40_active_ <-& (assign_stmt_40_trigger_)
          // (I + 1 )
          $T[binary_39_active_] 
          $T[binary_39_trigger_] 
          $T[binary_39_completed_] 
          // I
          // implicit reference
          $T[simple_obj_ref_37_trigger_] 
          $T[simple_obj_ref_37_completed_] 
          $T[simple_obj_ref_37_active_] 
          simple_obj_ref_37_completed_ <-& (simple_obj_ref_37_active_)
          simple_obj_ref_37_active_ <-& (simple_obj_ref_37_trigger_)
          simple_obj_ref_37_trigger_ <-& (phi_stmt_6_completed_)
          phi_stmt_6_enable_ o<-& (simple_obj_ref_37_completed_)
          simple_obj_ref_37_trigger_ o<-& (simple_obj_ref_37_active_)
          simple_obj_ref_37_active_ o<-& (simple_obj_ref_37_completed_)
          binary_39_trigger_ <-& (simple_obj_ref_37_completed_)
          ;;[binary_39_complete_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[binary_39_complete_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          binary_39_trigger_ &-> (binary_39_complete_Sample)
          binary_39_active_ <-& (binary_39_complete_Sample)
          binary_39_active_ &-> (binary_39_complete_Update)
          binary_39_completed_ <-& (binary_39_complete_Update)
          phi_stmt_6_enable_ o<-& (binary_39_active_)
          binary_39_trigger_ o<-& (binary_39_active_)
          binary_39_active_ o<-& (binary_39_completed_)
          assign_stmt_40_active_ <-& (binary_39_completed_)
          binary_39_active_ o<-& (assign_stmt_40_completed_)
          // NI
          // implicit reference
          assign_stmt_40_completed_ <-& (assign_stmt_40_active_)
          // WAR dependency: Read: NI before Write: 			NI := (I + 1 )
          binary_39_trigger_ <-& (phi_stmt_6_completed_)
          // WAR dependency: release  Read: NI with Write: 			NI := (I + 1 )
          simple_obj_ref_10_trigger_ o<-& (assign_stmt_40_completed_)
          assign_stmt_40_trigger_ o<-& (assign_stmt_40_active_)
          assign_stmt_40_active_ o<-& (assign_stmt_40_completed_)
          // (NI < 10 )
          $T[binary_44_active_] 
          $T[binary_44_trigger_] 
          $T[binary_44_completed_] 
          // NI
          // implicit reference
          $T[simple_obj_ref_42_trigger_] 
          $T[simple_obj_ref_42_completed_] 
          $T[simple_obj_ref_42_active_] 
          simple_obj_ref_42_completed_ <-& (simple_obj_ref_42_active_)
          simple_obj_ref_42_active_ <-& (simple_obj_ref_42_trigger_)
          simple_obj_ref_42_trigger_ <-& (assign_stmt_40_completed_)
          binary_39_active_ o<-& (simple_obj_ref_42_completed_)
          simple_obj_ref_42_trigger_ o<-& (simple_obj_ref_42_active_)
          simple_obj_ref_42_active_ o<-& (simple_obj_ref_42_completed_)
          binary_44_trigger_ <-& (simple_obj_ref_42_completed_)
          ;;[binary_44_complete_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[binary_44_complete_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          binary_44_trigger_ &-> (binary_44_complete_Sample)
          binary_44_active_ <-& (binary_44_complete_Sample)
          binary_44_active_ &-> (binary_44_complete_Update)
          binary_44_completed_ <-& (binary_44_complete_Update)
          binary_39_active_ o<-& (binary_44_active_)
          binary_44_trigger_ o<-& (binary_44_active_)
          binary_44_active_ o<-& (binary_44_completed_)
          binary_44_completed_ &-> ($exit)
          // load-store dependencies..
        }
        (back_edge_to_loop_body first_time_through_loop_body) // exported inputs
        (binary_44_completed_) // exported outputs
        // do_while_stmt_4_loop_body
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_4__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_4_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_4__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_4_loop_body : binary_44_completed_
        $bind do_while_stmt_4__entry__  => do_while_stmt_4_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_4_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_4__exit__)
      }
      do_while_stmt_4__entry__ |-> (do_while_stmt_4)
      do_while_stmt_4__exit__ <-| (do_while_stmt_4)
      do_while_stmt_4__entry__ <-| (branch_block_stmt_3__entry__)
      do_while_stmt_4__exit__ |-> (branch_block_stmt_3__exit__)
    }
    ::[assign_stmt_49] 
    {
      // 	c := result
      //  file prog.opt.aa, line 41
      $T[assign_stmt_49_trigger_] 
      $T[assign_stmt_49_active_] 
      $T[assign_stmt_49_completed_] 
      assign_stmt_49_active_ <-& (assign_stmt_49_trigger_)
      // result
      // implicit reference
      $T[simple_obj_ref_48_trigger_] 
      $T[simple_obj_ref_48_completed_] 
      $T[simple_obj_ref_48_active_] 
      simple_obj_ref_48_completed_ <-& (simple_obj_ref_48_active_)
      simple_obj_ref_48_active_ <-& (simple_obj_ref_48_trigger_)
      assign_stmt_49_active_ <-& (simple_obj_ref_48_completed_)
      // c
      // implicit reference
      assign_stmt_49_completed_ <-& (assign_stmt_49_active_)
      ;;[assign_stmt_49_register] 
      {
        $T [req] $T [ack] // register.
      }
      assign_stmt_49_trigger_ &-> (assign_stmt_49_register)
      assign_stmt_49_active_ <-& (assign_stmt_49_register)
      assign_stmt_49_completed_ <-& (assign_stmt_49_active_)
      // load-store dependencies..
    }
    // assign_stmt_49
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %asum%run%
    //  file prog.opt.aa, line 9
    // constant-object-declarations for block %asum%run
    //  file prog.opt.aa, line 6
    // constant-object-declarations for block %asum
    //  file prog.opt.aa, line 1
    // constant-declarations for block %asum%run
    //  file prog.opt.aa, line 6
    // do-while statement  
    //  file prog.opt.aa, line 0
    // 10 
    $constant $W[expr_43_wire_constant] : $int<32> := _b00000000000000000000000000001010// 10
    // constant-declarations for block %asum%run%
    //  file prog.opt.aa, line 9
    // constant-declarations for phi:  			$phi I := 			  ($bitcast ($uint<32>) 0  ) $on $entry			  NI $on $loopback // type of target is $uint<32>
    //  file prog.opt.aa, line 10
    // ($bitcast ($uint<32>) 0  )
    $constant $W[type_cast_9_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi R := 			  0  $on $entry			  R4 $on $loopback // type of target is $uint<32>
    //  file prog.opt.aa, line 11
    // 0 
    $constant $W[expr_13_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // 1 
    $constant $W[expr_18_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // 1 
    $constant $W[expr_23_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // 1 
    $constant $W[expr_28_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // 1 
    $constant $W[expr_33_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // 1 
    $constant $W[expr_38_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // block %asum%run
    //  file prog.opt.aa, line 6
    // do-while statement  
    //  file prog.opt.aa, line 0
    // (NI < 10 )
    $intermediate $W[binary_44_wire] : $int<1>
    // merge-statement  
    //  file prog.opt.aa, line 9
    // 			$phi I := 			  ($bitcast ($uint<32>) 0  ) $on $entry			  NI $on $loopback // type of target is $uint<32>
    //  file prog.opt.aa, line 10
    // I
    $W[I_6] : $int<32>
    // 			$phi R := 			  0  $on $entry			  R4 $on $loopback // type of target is $uint<32>
    //  file prog.opt.aa, line 11
    // R
    $W[R_11] : $int<32>
    // 			R1 := (R + 1 )
    //  file prog.opt.aa, line 13
    // R1
    $W[R1_20] : $int<32>
    // 			R2 := (R1 + 1 )
    //  file prog.opt.aa, line 18
    // R2
    $W[R2_25] : $int<32>
    // 			R3 := (R2 + 1 )
    //  file prog.opt.aa, line 23
    // R3
    $W[R3_30] : $int<32>
    // 			R4 := (R3 + 1 )
    //  file prog.opt.aa, line 28
    // R4
    $W[R4_35] : $int<32>
    // 			NI := (I + 1 )
    //  file prog.opt.aa, line 33
    // NI
    $W[NI_40] : $int<32>
    // 	c := result
    //  file prog.opt.aa, line 41
    // c
    // datapath-instances for block %asum%run
    //  file prog.opt.aa, line 6
    // datapath-instances for do-while  
    //  file prog.opt.aa, line 0
    // (NI < 10 )
    <[binary_44_inst] (NI_40 expr_43_wire_constant) (binary_44_wire) 
    ==0? [do_while_stmt_4_branch] (binary_44_wire)
    // data-path instances for merge  
    //  file prog.opt.aa, line 9
    // 			$phi I := 			  ($bitcast ($uint<32>) 0  ) $on $entry			  NI $on $loopback // type of target is $uint<32>
    //  file prog.opt.aa, line 10
    $phi [phi_stmt_6] (type_cast_9_wire_constant NI_40) ( I_6 )
    // 			$phi R := 			  0  $on $entry			  R4 $on $loopback // type of target is $uint<32>
    //  file prog.opt.aa, line 11
    $phi [phi_stmt_11] (expr_13_wire_constant R4_35) ( R_11 )
    // 			R1 := (R + 1 )
    //  file prog.opt.aa, line 13
    // (R + 1 )
    +[binary_19_inst] (R_11 expr_18_wire_constant) (R1_20) 
    // 			R2 := (R1 + 1 )
    //  file prog.opt.aa, line 18
    // (R1 + 1 )
    +[binary_24_inst] (R1_20 expr_23_wire_constant) (R2_25) 
    // 			R3 := (R2 + 1 )
    //  file prog.opt.aa, line 23
    // (R2 + 1 )
    +[binary_29_inst] (R2_25 expr_28_wire_constant) (R3_30) 
    // 			R4 := (R3 + 1 )
    //  file prog.opt.aa, line 28
    // (R3 + 1 )
    +[binary_34_inst] (R3_30 expr_33_wire_constant) (R4_35) 
    // 			NI := (I + 1 )
    //  file prog.opt.aa, line 33
    // (I + 1 )
    +[binary_39_inst] (I_6 expr_38_wire_constant) (NI_40) 
    // 	c := result
    //  file prog.opt.aa, line 41
    := [simple_obj_ref_47_inst] (R4_35) (c)  
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_4
  //  file prog.opt.aa, line 0
  phi_stmt_6 <=> (branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/phi_stmt_6_req_0 branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/phi_stmt_6_req_1) (branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/phi_stmt_6_ack)
  phi_stmt_11 <=> (branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/phi_stmt_11_req_0 branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/phi_stmt_11_req_1) (branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/phi_stmt_11_ack)
  // 			R1 := (R + 1 )
  //  file prog.opt.aa, line 13
  // (R + 1 )
  binary_19_inst <=> (branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/binary_19_complete_Sample/rr branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/binary_19_complete_Update/cr) (branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/binary_19_complete_Sample/ra branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/binary_19_complete_Update/ca)
  // 			R2 := (R1 + 1 )
  //  file prog.opt.aa, line 18
  // (R1 + 1 )
  binary_24_inst <=> (branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/binary_24_complete_Sample/rr branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/binary_24_complete_Update/cr) (branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/binary_24_complete_Sample/ra branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/binary_24_complete_Update/ca)
  // 			R3 := (R2 + 1 )
  //  file prog.opt.aa, line 23
  // (R2 + 1 )
  binary_29_inst <=> (branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/binary_29_complete_Sample/rr branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/binary_29_complete_Update/cr) (branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/binary_29_complete_Sample/ra branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/binary_29_complete_Update/ca)
  // 			R4 := (R3 + 1 )
  //  file prog.opt.aa, line 28
  // (R3 + 1 )
  binary_34_inst <=> (branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/binary_34_complete_Sample/rr branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/binary_34_complete_Update/cr) (branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/binary_34_complete_Sample/ra branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/binary_34_complete_Update/ca)
  // 			NI := (I + 1 )
  //  file prog.opt.aa, line 33
  // (I + 1 )
  binary_39_inst <=> (branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/binary_39_complete_Sample/rr branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/binary_39_complete_Update/cr) (branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/binary_39_complete_Sample/ra branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/binary_39_complete_Update/ca)
  // (NI < 10 )
  binary_44_inst <=> (branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/binary_44_complete_Sample/rr branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/binary_44_complete_Update/cr) (branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/binary_44_complete_Sample/ra branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/binary_44_complete_Update/ca)
  do_while_stmt_4_branch <=> (branch_block_stmt_3/do_while_stmt_4/do_while_stmt_4_loop_body/binary_44_completed_) (branch_block_stmt_3/do_while_stmt_4/loop_exit/ack branch_block_stmt_3/do_while_stmt_4/loop_taken/ack)
  // 	c := result
  //  file prog.opt.aa, line 41
  simple_obj_ref_47_inst <=> (assign_stmt_49/assign_stmt_49_register/req) (assign_stmt_49/assign_stmt_49_register/ack)
}
$module [ssum] 
{
  $out c:$int<32>
  // can point into  foreign( $void )
  // pipe-declarations for block %ssum
  //  file prog.opt.aa, line 47
  // pipe-declarations for block %ssum%init
  //  file prog.opt.aa, line 54
  // pipe-declarations for block %ssum%run
  //  file prog.opt.aa, line 72
  $memoryspace [memory_space_0] 
  {
    $capacity 10
    $datawidth 32
    $addrwidth 4
    $maxaccesswidth 32
    // 	$storage  a : $array[10] $of $uint<32> // memory space index = 0  base address = 0  word size = 32
    // can point into 
    // in scope  %ssum
    $object [xxssumxxa] : $array[10] $of $int<32>
  }
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_55] // Branch Block  file prog.opt.aa, line 54
    {
      $P [branch_block_stmt_55__entry__]
      branch_block_stmt_55__entry__ <-| ($entry)
      $P [branch_block_stmt_55__exit__]
      branch_block_stmt_55__exit__ |-> ($exit)
      $P [do_while_stmt_56__entry__] 
      $P [do_while_stmt_56__exit__] 
      // do-while-statement  
      //  file prog.opt.aa, line 0
      <o> [do_while_stmt_56] 
      {
        $P[do_while_stmt_56__entry__] 
        $P[do_while_stmt_56__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline[do_while_stmt_56_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          // PHI statement phi_stmt_58
          // 			$phi I := 			  ($bitcast ($uint<32>) 0  ) $on $entry			  NI $on $loopback // type of target is $uint<32>
          $T[phi_stmt_58_req_0_raw] 
          $T[phi_stmt_58_req_0] 
          phi_stmt_58_req_0_raw &-> (phi_stmt_58_req_0)
          $T[phi_stmt_58_trigger_from_first_time_through_loop_body] 
          first_time_through_loop_body &-> (phi_stmt_58_trigger_from_first_time_through_loop_body)
          $T[phi_stmt_58_req_1_raw] 
          $T[phi_stmt_58_req_1] 
          phi_stmt_58_req_1_raw &-> (phi_stmt_58_req_1)
          $T[phi_stmt_58_trigger_from_back_edge_to_loop_body] 
          back_edge_to_loop_body &-> (phi_stmt_58_trigger_from_back_edge_to_loop_body)
          $T[phi_stmt_58_phi_sequencer_reqs_merged] 
          $T[phi_stmt_58_phi_sequencer_done] 
          $T[phi_stmt_58_ack] 
          $T[phi_stmt_58_enable_] 
          $T[phi_stmt_58_trigger_] 
          $T[phi_stmt_58_active_] 
          $T[phi_stmt_58_completed_] 
          phi_stmt_58_trigger_ &-> (phi_stmt_58_enable_)
          $phisequencer (  phi_stmt_58_trigger_from_first_time_through_loop_body phi_stmt_58_trigger_from_back_edge_to_loop_body : phi_stmt_58_enable_ : phi_stmt_58_ack ) (  phi_stmt_58_req_0_raw phi_stmt_58_req_1_raw : phi_stmt_58_phi_sequencer_done ) 
          $transitionmerge [phi_stmt_58_req_merger] ( phi_stmt_58_req_0 phi_stmt_58_req_1) (phi_stmt_58_phi_sequencer_reqs_merged)
          phi_stmt_58_phi_sequencer_reqs_merged &-> ($exit)
          phi_stmt_58_active_ <-& (phi_stmt_58_phi_sequencer_done)
          phi_stmt_58_completed_ <-& (phi_stmt_58_active_)
          // NI
          // implicit reference
          $T[simple_obj_ref_62_trigger_] 
          $T[simple_obj_ref_62_completed_] 
          $T[simple_obj_ref_62_active_] 
          simple_obj_ref_62_completed_ <-& (simple_obj_ref_62_active_)
          simple_obj_ref_62_active_ <-& (simple_obj_ref_62_trigger_)
          phi_stmt_58_trigger_ <-& (simple_obj_ref_62_completed_)
          simple_obj_ref_62_trigger_ o<-& (phi_stmt_58_completed_)
          // 			a[I] := I
          //  file prog.opt.aa, line 60
          $T[assign_stmt_67_trigger_] 
          $T[assign_stmt_67_active_] 
          $T[assign_stmt_67_completed_] 
          assign_stmt_67_active_ <-& (assign_stmt_67_trigger_)
          // I
          // implicit reference
          $T[simple_obj_ref_66_trigger_] 
          $T[simple_obj_ref_66_completed_] 
          $T[simple_obj_ref_66_active_] 
          simple_obj_ref_66_completed_ <-& (simple_obj_ref_66_active_)
          simple_obj_ref_66_active_ <-& (simple_obj_ref_66_trigger_)
          simple_obj_ref_66_trigger_ <-& (phi_stmt_58_completed_)
          phi_stmt_58_enable_ o<-& (simple_obj_ref_66_completed_)
          simple_obj_ref_66_trigger_ o<-& (simple_obj_ref_66_active_)
          simple_obj_ref_66_active_ o<-& (simple_obj_ref_66_completed_)
          assign_stmt_67_active_ <-& (simple_obj_ref_66_completed_)
          phi_stmt_58_enable_ o<-& (assign_stmt_67_completed_)
          // a[I]
          $T[array_obj_ref_65_trigger_] 
          $T[array_obj_ref_65_active_] 
          $T[array_obj_ref_65_completed_] 
          $T[array_obj_ref_65_root_address_calculated] 
          $T[array_obj_ref_65_word_address_calculated] 
          $T[array_obj_ref_65_root_address_calculated] 
          $T[array_obj_ref_65_indices_scaled] 
          $T[array_obj_ref_65_offset_calculated] 
          $T[array_obj_ref_65_index_computed_0] 
          $T[array_obj_ref_65_index_resized_0] 
          // I
          // implicit reference
          $T[simple_obj_ref_64_trigger_] 
          $T[simple_obj_ref_64_completed_] 
          $T[simple_obj_ref_64_active_] 
          simple_obj_ref_64_completed_ <-& (simple_obj_ref_64_active_)
          simple_obj_ref_64_active_ <-& (simple_obj_ref_64_trigger_)
          simple_obj_ref_64_trigger_ <-& (phi_stmt_58_completed_)
          phi_stmt_58_enable_ o<-& (simple_obj_ref_64_completed_)
          simple_obj_ref_64_trigger_ o<-& (simple_obj_ref_64_active_)
          simple_obj_ref_64_active_ o<-& (simple_obj_ref_64_completed_)
          array_obj_ref_65_index_computed_0 <-& (simple_obj_ref_64_completed_)
          ;;[array_obj_ref_65_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_65_index_computed_0 &-> (array_obj_ref_65_index_resize_0)
          array_obj_ref_65_index_resized_0 <-& (array_obj_ref_65_index_resize_0)
          array_obj_ref_65_index_computed_0 o<-& (array_obj_ref_65_index_resized_0)
          ;;[array_obj_ref_65_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_65_index_resized_0 &-> (array_obj_ref_65_index_scale_0)
          array_obj_ref_65_indices_scaled <-& (array_obj_ref_65_index_scale_0)
          array_obj_ref_65_index_resized_0 o<-& (array_obj_ref_65_indices_scaled)
          ;;[array_obj_ref_65_add_indices] 
          {
            $T [final_index_req] $T [final_index_ack] // rename
          }
          array_obj_ref_65_indices_scaled &-> (array_obj_ref_65_add_indices)
          array_obj_ref_65_offset_calculated <-& (array_obj_ref_65_add_indices)
          array_obj_ref_65_indices_scaled o<-& (array_obj_ref_65_offset_calculated)
          ;;[array_obj_ref_65_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_65_offset_calculated &-> (array_obj_ref_65_base_plus_offset)
          array_obj_ref_65_offset_calculated o<-& (array_obj_ref_65_root_address_calculated)
          array_obj_ref_65_root_address_calculated <-& (array_obj_ref_65_base_plus_offset)
          ;;[array_obj_ref_65_word_addrgen] 
          {
            $T [root_rename_req] $T [root_rename_ack]
          }
          array_obj_ref_65_root_address_calculated &-> (array_obj_ref_65_word_addrgen)
          array_obj_ref_65_word_address_calculated <-& (array_obj_ref_65_word_addrgen)
          array_obj_ref_65_root_address_calculated o<-& (array_obj_ref_65_word_address_calculated)
          ;;[array_obj_ref_65_request] 
          {
            $T [split_req] $T [split_ack]
            ||[word_access] 
            {
              ;;[word_access_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_65_complete] 
          {
            ||[word_access] 
            {
              ;;[word_access_0] 
              {
                $T [cr] $T [ca] 
              }
            }
          }
          array_obj_ref_65_trigger_ &-> (array_obj_ref_65_request)
          array_obj_ref_65_active_ <-& (array_obj_ref_65_request)
          array_obj_ref_65_active_ &-> (array_obj_ref_65_complete)
          array_obj_ref_65_completed_ <-& (array_obj_ref_65_complete)
          array_obj_ref_65_root_address_calculated o<-& (array_obj_ref_65_active_)
          array_obj_ref_65_trigger_ <-& (array_obj_ref_65_word_address_calculated)
          array_obj_ref_65_root_address_calculated o<-& (array_obj_ref_65_active_)
          array_obj_ref_65_trigger_ o<-& (array_obj_ref_65_active_)
          array_obj_ref_65_active_ o<-& (array_obj_ref_65_completed_)
          array_obj_ref_65_trigger_ <-& (assign_stmt_67_active_)
          assign_stmt_67_completed_ <-& (array_obj_ref_65_completed_)
          array_obj_ref_65_active_ o<-& (array_obj_ref_65_active_)
          assign_stmt_67_trigger_ o<-& (assign_stmt_67_active_)
          assign_stmt_67_active_ o<-& (assign_stmt_67_completed_)
          // 			NI := (I + 1 )
          //  file prog.opt.aa, line 65
          $T[assign_stmt_72_trigger_] 
          $T[assign_stmt_72_active_] 
          $T[assign_stmt_72_completed_] 
          assign_stmt_72_active_ <-& (assign_stmt_72_trigger_)
          // (I + 1 )
          $T[binary_71_active_] 
          $T[binary_71_trigger_] 
          $T[binary_71_completed_] 
          // I
          // implicit reference
          $T[simple_obj_ref_69_trigger_] 
          $T[simple_obj_ref_69_completed_] 
          $T[simple_obj_ref_69_active_] 
          simple_obj_ref_69_completed_ <-& (simple_obj_ref_69_active_)
          simple_obj_ref_69_active_ <-& (simple_obj_ref_69_trigger_)
          simple_obj_ref_69_trigger_ <-& (phi_stmt_58_completed_)
          phi_stmt_58_enable_ o<-& (simple_obj_ref_69_completed_)
          simple_obj_ref_69_trigger_ o<-& (simple_obj_ref_69_active_)
          simple_obj_ref_69_active_ o<-& (simple_obj_ref_69_completed_)
          binary_71_trigger_ <-& (simple_obj_ref_69_completed_)
          ;;[binary_71_complete_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[binary_71_complete_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          binary_71_trigger_ &-> (binary_71_complete_Sample)
          binary_71_active_ <-& (binary_71_complete_Sample)
          binary_71_active_ &-> (binary_71_complete_Update)
          binary_71_completed_ <-& (binary_71_complete_Update)
          phi_stmt_58_enable_ o<-& (binary_71_active_)
          binary_71_trigger_ o<-& (binary_71_active_)
          binary_71_active_ o<-& (binary_71_completed_)
          assign_stmt_72_active_ <-& (binary_71_completed_)
          binary_71_active_ o<-& (assign_stmt_72_completed_)
          // NI
          // implicit reference
          assign_stmt_72_completed_ <-& (assign_stmt_72_active_)
          // WAR dependency: Read: NI before Write: 			NI := (I + 1 )
          binary_71_trigger_ <-& (phi_stmt_58_completed_)
          // WAR dependency: release  Read: NI with Write: 			NI := (I + 1 )
          simple_obj_ref_62_trigger_ o<-& (assign_stmt_72_completed_)
          assign_stmt_72_trigger_ o<-& (assign_stmt_72_active_)
          assign_stmt_72_active_ o<-& (assign_stmt_72_completed_)
          // (NI < 10 )
          $T[binary_76_active_] 
          $T[binary_76_trigger_] 
          $T[binary_76_completed_] 
          // NI
          // implicit reference
          $T[simple_obj_ref_74_trigger_] 
          $T[simple_obj_ref_74_completed_] 
          $T[simple_obj_ref_74_active_] 
          simple_obj_ref_74_completed_ <-& (simple_obj_ref_74_active_)
          simple_obj_ref_74_active_ <-& (simple_obj_ref_74_trigger_)
          simple_obj_ref_74_trigger_ <-& (assign_stmt_72_completed_)
          binary_71_active_ o<-& (simple_obj_ref_74_completed_)
          simple_obj_ref_74_trigger_ o<-& (simple_obj_ref_74_active_)
          simple_obj_ref_74_active_ o<-& (simple_obj_ref_74_completed_)
          binary_76_trigger_ <-& (simple_obj_ref_74_completed_)
          ;;[binary_76_complete_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[binary_76_complete_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          binary_76_trigger_ &-> (binary_76_complete_Sample)
          binary_76_active_ <-& (binary_76_complete_Sample)
          binary_76_active_ &-> (binary_76_complete_Update)
          binary_76_completed_ <-& (binary_76_complete_Update)
          binary_71_active_ o<-& (binary_76_active_)
          binary_76_trigger_ o<-& (binary_76_active_)
          binary_76_active_ o<-& (binary_76_completed_)
          binary_76_completed_ &-> ($exit)
          // load-store dependencies..
        }
        (back_edge_to_loop_body first_time_through_loop_body) // exported inputs
        (binary_76_completed_) // exported outputs
        // do_while_stmt_56_loop_body
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_56__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_56_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_56__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_56_loop_body : binary_76_completed_
        $bind do_while_stmt_56__entry__  => do_while_stmt_56_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_56_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_56__exit__)
      }
      do_while_stmt_56__entry__ |-> (do_while_stmt_56)
      do_while_stmt_56__exit__ <-| (do_while_stmt_56)
      do_while_stmt_56__entry__ <-| (branch_block_stmt_55__entry__)
      do_while_stmt_56__exit__ |-> (branch_block_stmt_55__exit__)
    }
    <>[branch_block_stmt_78] // Branch Block  file prog.opt.aa, line 72
    {
      $P [branch_block_stmt_78__entry__]
      branch_block_stmt_78__entry__ <-| ($entry)
      $P [branch_block_stmt_78__exit__]
      branch_block_stmt_78__exit__ |-> ($exit)
      $P [do_while_stmt_79__entry__] 
      $P [do_while_stmt_79__exit__] 
      // do-while-statement  
      //  file prog.opt.aa, line 0
      <o> [do_while_stmt_79] 
      {
        $P[do_while_stmt_79__entry__] 
        $P[do_while_stmt_79__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline[do_while_stmt_79_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          // PHI statement phi_stmt_81
          // 			$phi I := 			  ($bitcast ($uint<32>) 0  ) $on $entry			  NI $on $loopback // type of target is $uint<32>
          $T[phi_stmt_81_req_0_raw] 
          $T[phi_stmt_81_req_0] 
          phi_stmt_81_req_0_raw &-> (phi_stmt_81_req_0)
          $T[phi_stmt_81_trigger_from_first_time_through_loop_body] 
          first_time_through_loop_body &-> (phi_stmt_81_trigger_from_first_time_through_loop_body)
          $T[phi_stmt_81_req_1_raw] 
          $T[phi_stmt_81_req_1] 
          phi_stmt_81_req_1_raw &-> (phi_stmt_81_req_1)
          $T[phi_stmt_81_trigger_from_back_edge_to_loop_body] 
          back_edge_to_loop_body &-> (phi_stmt_81_trigger_from_back_edge_to_loop_body)
          $T[phi_stmt_81_phi_sequencer_reqs_merged] 
          $T[phi_stmt_81_phi_sequencer_done] 
          $T[phi_stmt_81_ack] 
          $T[phi_stmt_81_enable_] 
          $T[phi_stmt_81_trigger_] 
          $T[phi_stmt_81_active_] 
          $T[phi_stmt_81_completed_] 
          phi_stmt_81_trigger_ &-> (phi_stmt_81_enable_)
          $phisequencer (  phi_stmt_81_trigger_from_first_time_through_loop_body phi_stmt_81_trigger_from_back_edge_to_loop_body : phi_stmt_81_enable_ : phi_stmt_81_ack ) (  phi_stmt_81_req_0_raw phi_stmt_81_req_1_raw : phi_stmt_81_phi_sequencer_done ) 
          $transitionmerge [phi_stmt_81_req_merger] ( phi_stmt_81_req_0 phi_stmt_81_req_1) (phi_stmt_81_phi_sequencer_reqs_merged)
          phi_stmt_81_phi_sequencer_reqs_merged &-> ($exit)
          phi_stmt_81_active_ <-& (phi_stmt_81_phi_sequencer_done)
          phi_stmt_81_completed_ <-& (phi_stmt_81_active_)
          // NI
          // implicit reference
          $T[simple_obj_ref_85_trigger_] 
          $T[simple_obj_ref_85_completed_] 
          $T[simple_obj_ref_85_active_] 
          simple_obj_ref_85_completed_ <-& (simple_obj_ref_85_active_)
          simple_obj_ref_85_active_ <-& (simple_obj_ref_85_trigger_)
          phi_stmt_81_trigger_ <-& (simple_obj_ref_85_completed_)
          simple_obj_ref_85_trigger_ o<-& (phi_stmt_81_completed_)
          // PHI statement phi_stmt_86
          // 			$phi result := 			  0  $on $entry			  nresult $on $loopback // type of target is $uint<32>
          $T[phi_stmt_86_req_0_raw] 
          $T[phi_stmt_86_req_0] 
          phi_stmt_86_req_0_raw &-> (phi_stmt_86_req_0)
          $T[phi_stmt_86_trigger_from_first_time_through_loop_body] 
          first_time_through_loop_body &-> (phi_stmt_86_trigger_from_first_time_through_loop_body)
          $T[phi_stmt_86_req_1_raw] 
          $T[phi_stmt_86_req_1] 
          phi_stmt_86_req_1_raw &-> (phi_stmt_86_req_1)
          $T[phi_stmt_86_trigger_from_back_edge_to_loop_body] 
          back_edge_to_loop_body &-> (phi_stmt_86_trigger_from_back_edge_to_loop_body)
          $T[phi_stmt_86_phi_sequencer_reqs_merged] 
          $T[phi_stmt_86_phi_sequencer_done] 
          $T[phi_stmt_86_ack] 
          $T[phi_stmt_86_enable_] 
          $T[phi_stmt_86_trigger_] 
          $T[phi_stmt_86_active_] 
          $T[phi_stmt_86_completed_] 
          phi_stmt_86_trigger_ &-> (phi_stmt_86_enable_)
          $phisequencer (  phi_stmt_86_trigger_from_first_time_through_loop_body phi_stmt_86_trigger_from_back_edge_to_loop_body : phi_stmt_86_enable_ : phi_stmt_86_ack ) (  phi_stmt_86_req_0_raw phi_stmt_86_req_1_raw : phi_stmt_86_phi_sequencer_done ) 
          $transitionmerge [phi_stmt_86_req_merger] ( phi_stmt_86_req_0 phi_stmt_86_req_1) (phi_stmt_86_phi_sequencer_reqs_merged)
          phi_stmt_86_phi_sequencer_reqs_merged &-> ($exit)
          phi_stmt_86_active_ <-& (phi_stmt_86_phi_sequencer_done)
          phi_stmt_86_completed_ <-& (phi_stmt_86_active_)
          // nresult
          // implicit reference
          $T[simple_obj_ref_89_trigger_] 
          $T[simple_obj_ref_89_completed_] 
          $T[simple_obj_ref_89_active_] 
          simple_obj_ref_89_completed_ <-& (simple_obj_ref_89_active_)
          simple_obj_ref_89_active_ <-& (simple_obj_ref_89_trigger_)
          phi_stmt_86_trigger_ <-& (simple_obj_ref_89_completed_)
          simple_obj_ref_89_trigger_ o<-& (phi_stmt_86_completed_)
          // 			nresult := (result + a[I])
          //  file prog.opt.aa, line 79
          $T[assign_stmt_96_trigger_] 
          $T[assign_stmt_96_active_] 
          $T[assign_stmt_96_completed_] 
          assign_stmt_96_active_ <-& (assign_stmt_96_trigger_)
          // (result + a[I])
          $T[binary_95_active_] 
          $T[binary_95_trigger_] 
          $T[binary_95_completed_] 
          // result
          // implicit reference
          $T[simple_obj_ref_92_trigger_] 
          $T[simple_obj_ref_92_completed_] 
          $T[simple_obj_ref_92_active_] 
          simple_obj_ref_92_completed_ <-& (simple_obj_ref_92_active_)
          simple_obj_ref_92_active_ <-& (simple_obj_ref_92_trigger_)
          simple_obj_ref_92_trigger_ <-& (phi_stmt_86_completed_)
          phi_stmt_86_enable_ o<-& (simple_obj_ref_92_completed_)
          simple_obj_ref_92_trigger_ o<-& (simple_obj_ref_92_active_)
          simple_obj_ref_92_active_ o<-& (simple_obj_ref_92_completed_)
          // a[I]
          $T[array_obj_ref_94_trigger_] 
          $T[array_obj_ref_94_active_] 
          $T[array_obj_ref_94_completed_] 
          $T[array_obj_ref_94_root_address_calculated] 
          $T[array_obj_ref_94_word_address_calculated] 
          $T[array_obj_ref_94_root_address_calculated] 
          $T[array_obj_ref_94_indices_scaled] 
          $T[array_obj_ref_94_offset_calculated] 
          $T[array_obj_ref_94_index_computed_0] 
          $T[array_obj_ref_94_index_resized_0] 
          // I
          // implicit reference
          $T[simple_obj_ref_93_trigger_] 
          $T[simple_obj_ref_93_completed_] 
          $T[simple_obj_ref_93_active_] 
          simple_obj_ref_93_completed_ <-& (simple_obj_ref_93_active_)
          simple_obj_ref_93_active_ <-& (simple_obj_ref_93_trigger_)
          simple_obj_ref_93_trigger_ <-& (phi_stmt_81_completed_)
          phi_stmt_81_enable_ o<-& (simple_obj_ref_93_completed_)
          simple_obj_ref_93_trigger_ o<-& (simple_obj_ref_93_active_)
          simple_obj_ref_93_active_ o<-& (simple_obj_ref_93_completed_)
          array_obj_ref_94_index_computed_0 <-& (simple_obj_ref_93_completed_)
          ;;[array_obj_ref_94_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_94_index_computed_0 &-> (array_obj_ref_94_index_resize_0)
          array_obj_ref_94_index_resized_0 <-& (array_obj_ref_94_index_resize_0)
          array_obj_ref_94_index_computed_0 o<-& (array_obj_ref_94_index_resized_0)
          ;;[array_obj_ref_94_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_94_index_resized_0 &-> (array_obj_ref_94_index_scale_0)
          array_obj_ref_94_indices_scaled <-& (array_obj_ref_94_index_scale_0)
          array_obj_ref_94_index_resized_0 o<-& (array_obj_ref_94_indices_scaled)
          ;;[array_obj_ref_94_add_indices] 
          {
            $T [final_index_req] $T [final_index_ack] // rename
          }
          array_obj_ref_94_indices_scaled &-> (array_obj_ref_94_add_indices)
          array_obj_ref_94_offset_calculated <-& (array_obj_ref_94_add_indices)
          array_obj_ref_94_indices_scaled o<-& (array_obj_ref_94_offset_calculated)
          ;;[array_obj_ref_94_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_94_offset_calculated &-> (array_obj_ref_94_base_plus_offset)
          array_obj_ref_94_offset_calculated o<-& (array_obj_ref_94_root_address_calculated)
          array_obj_ref_94_root_address_calculated <-& (array_obj_ref_94_base_plus_offset)
          ;;[array_obj_ref_94_word_addrgen] 
          {
            $T [root_rename_req] $T [root_rename_ack]
          }
          array_obj_ref_94_root_address_calculated &-> (array_obj_ref_94_word_addrgen)
          array_obj_ref_94_word_address_calculated <-& (array_obj_ref_94_word_addrgen)
          array_obj_ref_94_root_address_calculated o<-& (array_obj_ref_94_word_address_calculated)
          ;;[array_obj_ref_94_request] 
          {
            ||[word_access] 
            {
              ;;[word_access_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_94_complete] 
          {
            ||[word_access] 
            {
              ;;[word_access_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            $T [merge_req] $T [merge_ack]
          }
          array_obj_ref_94_trigger_ &-> (array_obj_ref_94_request)
          array_obj_ref_94_active_ <-& (array_obj_ref_94_request)
          array_obj_ref_94_active_ &-> (array_obj_ref_94_complete)
          array_obj_ref_94_completed_ <-& (array_obj_ref_94_complete)
          array_obj_ref_94_root_address_calculated o<-& (array_obj_ref_94_active_)
          array_obj_ref_94_trigger_ <-& (array_obj_ref_94_word_address_calculated)
          array_obj_ref_94_root_address_calculated o<-& (array_obj_ref_94_active_)
          array_obj_ref_94_trigger_ o<-& (array_obj_ref_94_active_)
          array_obj_ref_94_active_ o<-& (array_obj_ref_94_completed_)
          binary_95_trigger_ <-& (simple_obj_ref_92_completed_)
          binary_95_trigger_ <-& (array_obj_ref_94_completed_)
          ;;[binary_95_complete_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[binary_95_complete_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          binary_95_trigger_ &-> (binary_95_complete_Sample)
          binary_95_active_ <-& (binary_95_complete_Sample)
          binary_95_active_ &-> (binary_95_complete_Update)
          binary_95_completed_ <-& (binary_95_complete_Update)
          phi_stmt_86_enable_ o<-& (binary_95_active_)
          array_obj_ref_94_active_ o<-& (binary_95_active_)
          binary_95_trigger_ o<-& (binary_95_active_)
          binary_95_active_ o<-& (binary_95_completed_)
          assign_stmt_96_active_ <-& (binary_95_completed_)
          binary_95_active_ o<-& (assign_stmt_96_completed_)
          // nresult
          // implicit reference
          assign_stmt_96_completed_ <-& (assign_stmt_96_active_)
          // WAR dependency: Read: nresult before Write: 			nresult := (result + a[I])
          binary_95_trigger_ <-& (phi_stmt_86_completed_)
          // WAR dependency: release  Read: nresult with Write: 			nresult := (result + a[I])
          simple_obj_ref_89_trigger_ o<-& (assign_stmt_96_completed_)
          assign_stmt_96_trigger_ o<-& (assign_stmt_96_active_)
          assign_stmt_96_active_ o<-& (assign_stmt_96_completed_)
          // 			NI := (I + 1 )
          //  file prog.opt.aa, line 84
          $T[assign_stmt_101_trigger_] 
          $T[assign_stmt_101_active_] 
          $T[assign_stmt_101_completed_] 
          assign_stmt_101_active_ <-& (assign_stmt_101_trigger_)
          // (I + 1 )
          $T[binary_100_active_] 
          $T[binary_100_trigger_] 
          $T[binary_100_completed_] 
          // I
          // implicit reference
          $T[simple_obj_ref_98_trigger_] 
          $T[simple_obj_ref_98_completed_] 
          $T[simple_obj_ref_98_active_] 
          simple_obj_ref_98_completed_ <-& (simple_obj_ref_98_active_)
          simple_obj_ref_98_active_ <-& (simple_obj_ref_98_trigger_)
          simple_obj_ref_98_trigger_ <-& (phi_stmt_81_completed_)
          phi_stmt_81_enable_ o<-& (simple_obj_ref_98_completed_)
          simple_obj_ref_98_trigger_ o<-& (simple_obj_ref_98_active_)
          simple_obj_ref_98_active_ o<-& (simple_obj_ref_98_completed_)
          binary_100_trigger_ <-& (simple_obj_ref_98_completed_)
          ;;[binary_100_complete_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[binary_100_complete_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          binary_100_trigger_ &-> (binary_100_complete_Sample)
          binary_100_active_ <-& (binary_100_complete_Sample)
          binary_100_active_ &-> (binary_100_complete_Update)
          binary_100_completed_ <-& (binary_100_complete_Update)
          phi_stmt_81_enable_ o<-& (binary_100_active_)
          binary_100_trigger_ o<-& (binary_100_active_)
          binary_100_active_ o<-& (binary_100_completed_)
          assign_stmt_101_active_ <-& (binary_100_completed_)
          binary_100_active_ o<-& (assign_stmt_101_completed_)
          // NI
          // implicit reference
          assign_stmt_101_completed_ <-& (assign_stmt_101_active_)
          // WAR dependency: Read: NI before Write: 			NI := (I + 1 )
          binary_100_trigger_ <-& (phi_stmt_81_completed_)
          // WAR dependency: release  Read: NI with Write: 			NI := (I + 1 )
          simple_obj_ref_85_trigger_ o<-& (assign_stmt_101_completed_)
          assign_stmt_101_trigger_ o<-& (assign_stmt_101_active_)
          assign_stmt_101_active_ o<-& (assign_stmt_101_completed_)
          // (NI < 10 )
          $T[binary_105_active_] 
          $T[binary_105_trigger_] 
          $T[binary_105_completed_] 
          // NI
          // implicit reference
          $T[simple_obj_ref_103_trigger_] 
          $T[simple_obj_ref_103_completed_] 
          $T[simple_obj_ref_103_active_] 
          simple_obj_ref_103_completed_ <-& (simple_obj_ref_103_active_)
          simple_obj_ref_103_active_ <-& (simple_obj_ref_103_trigger_)
          simple_obj_ref_103_trigger_ <-& (assign_stmt_101_completed_)
          binary_100_active_ o<-& (simple_obj_ref_103_completed_)
          simple_obj_ref_103_trigger_ o<-& (simple_obj_ref_103_active_)
          simple_obj_ref_103_active_ o<-& (simple_obj_ref_103_completed_)
          binary_105_trigger_ <-& (simple_obj_ref_103_completed_)
          ;;[binary_105_complete_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[binary_105_complete_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          binary_105_trigger_ &-> (binary_105_complete_Sample)
          binary_105_active_ <-& (binary_105_complete_Sample)
          binary_105_active_ &-> (binary_105_complete_Update)
          binary_105_completed_ <-& (binary_105_complete_Update)
          binary_100_active_ o<-& (binary_105_active_)
          binary_105_trigger_ o<-& (binary_105_active_)
          binary_105_active_ o<-& (binary_105_completed_)
          binary_105_completed_ &-> ($exit)
          // load-store dependencies..
        }
        (back_edge_to_loop_body first_time_through_loop_body) // exported inputs
        (binary_105_completed_) // exported outputs
        // do_while_stmt_79_loop_body
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_79__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_79_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_79__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_79_loop_body : binary_105_completed_
        $bind do_while_stmt_79__entry__  => do_while_stmt_79_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_79_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_79__exit__)
      }
      do_while_stmt_79__entry__ |-> (do_while_stmt_79)
      do_while_stmt_79__exit__ <-| (do_while_stmt_79)
      do_while_stmt_79__entry__ <-| (branch_block_stmt_78__entry__)
      do_while_stmt_79__exit__ |-> (branch_block_stmt_78__exit__)
    }
    ::[assign_stmt_109] 
    {
      // 	c := result
      //  file prog.opt.aa, line 92
      $T[assign_stmt_109_trigger_] 
      $T[assign_stmt_109_active_] 
      $T[assign_stmt_109_completed_] 
      assign_stmt_109_active_ <-& (assign_stmt_109_trigger_)
      // result
      // implicit reference
      $T[simple_obj_ref_108_trigger_] 
      $T[simple_obj_ref_108_completed_] 
      $T[simple_obj_ref_108_active_] 
      simple_obj_ref_108_completed_ <-& (simple_obj_ref_108_active_)
      simple_obj_ref_108_active_ <-& (simple_obj_ref_108_trigger_)
      assign_stmt_109_active_ <-& (simple_obj_ref_108_completed_)
      // c
      // implicit reference
      assign_stmt_109_completed_ <-& (assign_stmt_109_active_)
      ;;[assign_stmt_109_register] 
      {
        $T [req] $T [ack] // register.
      }
      assign_stmt_109_trigger_ &-> (assign_stmt_109_register)
      assign_stmt_109_active_ <-& (assign_stmt_109_register)
      assign_stmt_109_completed_ <-& (assign_stmt_109_active_)
      // load-store dependencies..
    }
    // assign_stmt_109
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %ssum%init%
    //  file prog.opt.aa, line 57
    // constant-object-declarations for block %ssum%init
    //  file prog.opt.aa, line 54
    // constant-object-declarations for block %ssum%run%
    //  file prog.opt.aa, line 75
    // constant-object-declarations for block %ssum%run
    //  file prog.opt.aa, line 72
    // constant-object-declarations for block %ssum
    //  file prog.opt.aa, line 47
    // load store constants for object %ssum:a
    $constant $W[xxssumxxa_base_address] : $int<4> := _b0000
    // constant-declarations for block %ssum%init
    //  file prog.opt.aa, line 54
    // do-while statement  
    //  file prog.opt.aa, line 0
    // 10 
    $constant $W[expr_75_wire_constant] : $int<32> := _b00000000000000000000000000001010// 10
    // constant-declarations for block %ssum%init%
    //  file prog.opt.aa, line 57
    // constant-declarations for phi:  			$phi I := 			  ($bitcast ($uint<32>) 0  ) $on $entry			  NI $on $loopback // type of target is $uint<32>
    //  file prog.opt.aa, line 58
    // ($bitcast ($uint<32>) 0  )
    $constant $W[type_cast_61_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // a[I]
    $constant $W[array_obj_ref_65_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_65_offset_scale_factor_0] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_65_word_offset_0] : $int<4> := _b0000// 0
    // 1 
    $constant $W[expr_70_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // constant-declarations for block %ssum%run
    //  file prog.opt.aa, line 72
    // do-while statement  
    //  file prog.opt.aa, line 0
    // 10 
    $constant $W[expr_104_wire_constant] : $int<32> := _b00000000000000000000000000001010// 10
    // constant-declarations for block %ssum%run%
    //  file prog.opt.aa, line 75
    // constant-declarations for phi:  			$phi I := 			  ($bitcast ($uint<32>) 0  ) $on $entry			  NI $on $loopback // type of target is $uint<32>
    //  file prog.opt.aa, line 76
    // ($bitcast ($uint<32>) 0  )
    $constant $W[type_cast_84_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi result := 			  0  $on $entry			  nresult $on $loopback // type of target is $uint<32>
    //  file prog.opt.aa, line 77
    // 0 
    $constant $W[expr_88_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // a[I]
    $constant $W[array_obj_ref_94_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_94_offset_scale_factor_0] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_94_word_offset_0] : $int<4> := _b0000// 0
    // 1 
    $constant $W[expr_99_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // block %ssum%init
    //  file prog.opt.aa, line 54
    // do-while statement  
    //  file prog.opt.aa, line 0
    // (NI < 10 )
    $intermediate $W[binary_76_wire] : $int<1>
    // merge-statement  
    //  file prog.opt.aa, line 57
    // 			$phi I := 			  ($bitcast ($uint<32>) 0  ) $on $entry			  NI $on $loopback // type of target is $uint<32>
    //  file prog.opt.aa, line 58
    // I
    $W[I_58] : $int<32>
    // 			a[I] := I
    //  file prog.opt.aa, line 60
    // a[I]
    $intermediate $W[simple_obj_ref_64_resized] : $int<4>
    $intermediate $W[simple_obj_ref_64_scaled] : $int<4>
    $intermediate $W[array_obj_ref_65_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_65_root_address] : $int<4>
    $W[array_obj_ref_65_word_address_0] : $pointer<ssum/memory_space_0>
    $W[array_obj_ref_65_data_0] : $int<32>
    // 			NI := (I + 1 )
    //  file prog.opt.aa, line 65
    // NI
    $W[NI_72] : $int<32>
    // block %ssum%run
    //  file prog.opt.aa, line 72
    // do-while statement  
    //  file prog.opt.aa, line 0
    // (NI < 10 )
    $intermediate $W[binary_105_wire] : $int<1>
    // merge-statement  
    //  file prog.opt.aa, line 75
    // 			$phi I := 			  ($bitcast ($uint<32>) 0  ) $on $entry			  NI $on $loopback // type of target is $uint<32>
    //  file prog.opt.aa, line 76
    // I
    $W[I_81] : $int<32>
    // 			$phi result := 			  0  $on $entry			  nresult $on $loopback // type of target is $uint<32>
    //  file prog.opt.aa, line 77
    // result
    $W[result_86] : $int<32>
    // 			nresult := (result + a[I])
    //  file prog.opt.aa, line 79
    // a[I]
    $intermediate $W[simple_obj_ref_93_resized] : $int<4>
    $intermediate $W[simple_obj_ref_93_scaled] : $int<4>
    $intermediate $W[array_obj_ref_94_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_94_root_address] : $int<4>
    $W[array_obj_ref_94_word_address_0] : $pointer<ssum/memory_space_0>
    $W[array_obj_ref_94_data_0] : $int<32>
    $W[array_obj_ref_94_wire] : $int<32>
    // nresult
    $W[nresult_96] : $int<32>
    // 			NI := (I + 1 )
    //  file prog.opt.aa, line 84
    // NI
    $W[NI_101] : $int<32>
    // 	c := result
    //  file prog.opt.aa, line 92
    // c
    // datapath-instances for block %ssum%init
    //  file prog.opt.aa, line 54
    // datapath-instances for do-while  
    //  file prog.opt.aa, line 0
    // (NI < 10 )
    <[binary_76_inst] (NI_72 expr_75_wire_constant) (binary_76_wire) 
    ==0? [do_while_stmt_56_branch] (binary_76_wire)
    // data-path instances for merge  
    //  file prog.opt.aa, line 57
    // 			$phi I := 			  ($bitcast ($uint<32>) 0  ) $on $entry			  NI $on $loopback // type of target is $uint<32>
    //  file prog.opt.aa, line 58
    $phi [phi_stmt_58] (type_cast_61_wire_constant NI_72) ( I_58 )
    // 			a[I] := I
    //  file prog.opt.aa, line 60
    // a[I]
    := [array_obj_ref_65_index_0_resize] (I_58) (simple_obj_ref_64_resized)  
    &/ [array_obj_ref_65_index_0_rename] (simple_obj_ref_64_resized) (simple_obj_ref_64_scaled) 
    := [array_obj_ref_65_offset_inst] (simple_obj_ref_64_scaled) (array_obj_ref_65_final_offset)  
    &/ [array_obj_ref_65_root_address_inst] (array_obj_ref_65_final_offset) (array_obj_ref_65_root_address) 
    &/ [array_obj_ref_65_addr_0] (array_obj_ref_65_root_address) (array_obj_ref_65_word_address_0) 
    $store [array_obj_ref_65_store_0] $to ssum/memory_space_0 (array_obj_ref_65_word_address_0 array_obj_ref_65_data_0) 
    &/ [array_obj_ref_65_gather_scatter] (I_58) (array_obj_ref_65_data_0) 
    // 			NI := (I + 1 )
    //  file prog.opt.aa, line 65
    // (I + 1 )
    +[binary_71_inst] (I_58 expr_70_wire_constant) (NI_72) 
    // datapath-instances for block %ssum%run
    //  file prog.opt.aa, line 72
    // datapath-instances for do-while  
    //  file prog.opt.aa, line 0
    // (NI < 10 )
    <[binary_105_inst] (NI_101 expr_104_wire_constant) (binary_105_wire) 
    ==0? [do_while_stmt_79_branch] (binary_105_wire)
    // data-path instances for merge  
    //  file prog.opt.aa, line 75
    // 			$phi I := 			  ($bitcast ($uint<32>) 0  ) $on $entry			  NI $on $loopback // type of target is $uint<32>
    //  file prog.opt.aa, line 76
    $phi [phi_stmt_81] (type_cast_84_wire_constant NI_101) ( I_81 )
    // 			$phi result := 			  0  $on $entry			  nresult $on $loopback // type of target is $uint<32>
    //  file prog.opt.aa, line 77
    $phi [phi_stmt_86] (expr_88_wire_constant nresult_96) ( result_86 )
    // 			nresult := (result + a[I])
    //  file prog.opt.aa, line 79
    // a[I]
    := [array_obj_ref_94_index_0_resize] (I_81) (simple_obj_ref_93_resized)  
    &/ [array_obj_ref_94_index_0_rename] (simple_obj_ref_93_resized) (simple_obj_ref_93_scaled) 
    := [array_obj_ref_94_offset_inst] (simple_obj_ref_93_scaled) (array_obj_ref_94_final_offset)  
    &/ [array_obj_ref_94_root_address_inst] (array_obj_ref_94_final_offset) (array_obj_ref_94_root_address) 
    &/ [array_obj_ref_94_addr_0] (array_obj_ref_94_root_address) (array_obj_ref_94_word_address_0) 
    $load [array_obj_ref_94_load_0] $from ssum/memory_space_0 (array_obj_ref_94_word_address_0) (array_obj_ref_94_data_0) 
    &/ [array_obj_ref_94_gather_scatter] (array_obj_ref_94_data_0) (array_obj_ref_94_wire) 
    // (result + a[I])
    +[binary_95_inst] (result_86 array_obj_ref_94_wire) (nresult_96) 
    // 			NI := (I + 1 )
    //  file prog.opt.aa, line 84
    // (I + 1 )
    +[binary_100_inst] (I_81 expr_99_wire_constant) (NI_101) 
    // 	c := result
    //  file prog.opt.aa, line 92
    := [simple_obj_ref_107_inst] (result_86) (c)  
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_56
  //  file prog.opt.aa, line 0
  phi_stmt_58 <=> (branch_block_stmt_55/do_while_stmt_56/do_while_stmt_56_loop_body/phi_stmt_58_req_0 branch_block_stmt_55/do_while_stmt_56/do_while_stmt_56_loop_body/phi_stmt_58_req_1) (branch_block_stmt_55/do_while_stmt_56/do_while_stmt_56_loop_body/phi_stmt_58_ack)
  // 			a[I] := I
  //  file prog.opt.aa, line 60
  array_obj_ref_65_index_0_resize <=> (branch_block_stmt_55/do_while_stmt_56/do_while_stmt_56_loop_body/array_obj_ref_65_index_resize_0/index_resize_req) (branch_block_stmt_55/do_while_stmt_56/do_while_stmt_56_loop_body/array_obj_ref_65_index_resize_0/index_resize_ack)
  array_obj_ref_65_index_0_rename <=> (branch_block_stmt_55/do_while_stmt_56/do_while_stmt_56_loop_body/array_obj_ref_65_index_scale_0/scale_rename_req) (branch_block_stmt_55/do_while_stmt_56/do_while_stmt_56_loop_body/array_obj_ref_65_index_scale_0/scale_rename_ack)
  array_obj_ref_65_offset_inst <=> (branch_block_stmt_55/do_while_stmt_56/do_while_stmt_56_loop_body/array_obj_ref_65_add_indices/final_index_req) (branch_block_stmt_55/do_while_stmt_56/do_while_stmt_56_loop_body/array_obj_ref_65_add_indices/final_index_ack)
  array_obj_ref_65_root_address_inst <=> (branch_block_stmt_55/do_while_stmt_56/do_while_stmt_56_loop_body/array_obj_ref_65_base_plus_offset/sum_rename_req) (branch_block_stmt_55/do_while_stmt_56/do_while_stmt_56_loop_body/array_obj_ref_65_base_plus_offset/sum_rename_ack)
  array_obj_ref_65_addr_0 <=> (branch_block_stmt_55/do_while_stmt_56/do_while_stmt_56_loop_body/array_obj_ref_65_word_addrgen/root_rename_req) (branch_block_stmt_55/do_while_stmt_56/do_while_stmt_56_loop_body/array_obj_ref_65_word_addrgen/root_rename_ack)
  array_obj_ref_65_gather_scatter <=> (branch_block_stmt_55/do_while_stmt_56/do_while_stmt_56_loop_body/array_obj_ref_65_request/split_req) (branch_block_stmt_55/do_while_stmt_56/do_while_stmt_56_loop_body/array_obj_ref_65_request/split_ack)
  array_obj_ref_65_store_0 <=> (branch_block_stmt_55/do_while_stmt_56/do_while_stmt_56_loop_body/array_obj_ref_65_request/word_access/word_access_0/rr branch_block_stmt_55/do_while_stmt_56/do_while_stmt_56_loop_body/array_obj_ref_65_complete/word_access/word_access_0/cr) (branch_block_stmt_55/do_while_stmt_56/do_while_stmt_56_loop_body/array_obj_ref_65_request/word_access/word_access_0/ra branch_block_stmt_55/do_while_stmt_56/do_while_stmt_56_loop_body/array_obj_ref_65_complete/word_access/word_access_0/ca)
  // 			NI := (I + 1 )
  //  file prog.opt.aa, line 65
  // (I + 1 )
  binary_71_inst <=> (branch_block_stmt_55/do_while_stmt_56/do_while_stmt_56_loop_body/binary_71_complete_Sample/rr branch_block_stmt_55/do_while_stmt_56/do_while_stmt_56_loop_body/binary_71_complete_Update/cr) (branch_block_stmt_55/do_while_stmt_56/do_while_stmt_56_loop_body/binary_71_complete_Sample/ra branch_block_stmt_55/do_while_stmt_56/do_while_stmt_56_loop_body/binary_71_complete_Update/ca)
  // (NI < 10 )
  binary_76_inst <=> (branch_block_stmt_55/do_while_stmt_56/do_while_stmt_56_loop_body/binary_76_complete_Sample/rr branch_block_stmt_55/do_while_stmt_56/do_while_stmt_56_loop_body/binary_76_complete_Update/cr) (branch_block_stmt_55/do_while_stmt_56/do_while_stmt_56_loop_body/binary_76_complete_Sample/ra branch_block_stmt_55/do_while_stmt_56/do_while_stmt_56_loop_body/binary_76_complete_Update/ca)
  do_while_stmt_56_branch <=> (branch_block_stmt_55/do_while_stmt_56/do_while_stmt_56_loop_body/binary_76_completed_) (branch_block_stmt_55/do_while_stmt_56/loop_exit/ack branch_block_stmt_55/do_while_stmt_56/loop_taken/ack)
  // CP-DP links for do-while  do_while_stmt_79
  //  file prog.opt.aa, line 0
  phi_stmt_81 <=> (branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/phi_stmt_81_req_0 branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/phi_stmt_81_req_1) (branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/phi_stmt_81_ack)
  phi_stmt_86 <=> (branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/phi_stmt_86_req_0 branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/phi_stmt_86_req_1) (branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/phi_stmt_86_ack)
  // 			nresult := (result + a[I])
  //  file prog.opt.aa, line 79
  // a[I]
  array_obj_ref_94_index_0_resize <=> (branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/array_obj_ref_94_index_resize_0/index_resize_req) (branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/array_obj_ref_94_index_resize_0/index_resize_ack)
  array_obj_ref_94_index_0_rename <=> (branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/array_obj_ref_94_index_scale_0/scale_rename_req) (branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/array_obj_ref_94_index_scale_0/scale_rename_ack)
  array_obj_ref_94_offset_inst <=> (branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/array_obj_ref_94_add_indices/final_index_req) (branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/array_obj_ref_94_add_indices/final_index_ack)
  array_obj_ref_94_root_address_inst <=> (branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/array_obj_ref_94_base_plus_offset/sum_rename_req) (branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/array_obj_ref_94_base_plus_offset/sum_rename_ack)
  array_obj_ref_94_addr_0 <=> (branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/array_obj_ref_94_word_addrgen/root_rename_req) (branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/array_obj_ref_94_word_addrgen/root_rename_ack)
  array_obj_ref_94_gather_scatter <=> (branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/array_obj_ref_94_complete/merge_req) (branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/array_obj_ref_94_complete/merge_ack)
  array_obj_ref_94_load_0 <=> (branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/array_obj_ref_94_request/word_access/word_access_0/rr branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/array_obj_ref_94_complete/word_access/word_access_0/cr) (branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/array_obj_ref_94_request/word_access/word_access_0/ra branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/array_obj_ref_94_complete/word_access/word_access_0/ca)
  // (result + a[I])
  binary_95_inst <=> (branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/binary_95_complete_Sample/rr branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/binary_95_complete_Update/cr) (branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/binary_95_complete_Sample/ra branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/binary_95_complete_Update/ca)
  // 			NI := (I + 1 )
  //  file prog.opt.aa, line 84
  // (I + 1 )
  binary_100_inst <=> (branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/binary_100_complete_Sample/rr branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/binary_100_complete_Update/cr) (branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/binary_100_complete_Sample/ra branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/binary_100_complete_Update/ca)
  // (NI < 10 )
  binary_105_inst <=> (branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/binary_105_complete_Sample/rr branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/binary_105_complete_Update/cr) (branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/binary_105_complete_Sample/ra branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/binary_105_complete_Update/ca)
  do_while_stmt_79_branch <=> (branch_block_stmt_78/do_while_stmt_79/do_while_stmt_79_loop_body/binary_105_completed_) (branch_block_stmt_78/do_while_stmt_79/loop_exit/ack branch_block_stmt_78/do_while_stmt_79/loop_taken/ack)
  // 	c := result
  //  file prog.opt.aa, line 92
  simple_obj_ref_107_inst <=> (assign_stmt_109/assign_stmt_109_register/req) (assign_stmt_109/assign_stmt_109_register/ack)
}
