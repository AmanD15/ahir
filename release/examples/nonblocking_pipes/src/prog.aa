$noblock $pipe read_command: $uint<8>   $depth 2
$noblock $pipe write_command : $uint<8> $depth 2
$pipe out_data: $uint<8> $depth 2
$constant ONE_1: $uint<1> := 1
$constant ZERO_1: $uint<1> := 0


$module [run_daemon] $in () $out () $is
{
	$branchblock[LoOp] {

		$dopipeline $depth 8 $buffering 2 $fullrate

			$merge $entry $loopback 

				$phi FULL := ($bitcast ($uint<1>) 1) $on $entry next_FULL $on $loopback
				$phi counter := ($bitcast($uint<8>) 0) $on $entry next_counter $on $loopback

				$phi read_cmd := 0 $on $entry $guard (~next_read_state)
									read_command $on $loopback
				$phi read_state := 0 $on $entry next_read_state $on $loopback

				$phi write_cmd :=  0 $on $entry $guard (~next_write_state)
									write_command $on $loopback
				$phi write_state := 0 $on $entry next_write_state $on $loopback
			$endmerge

			$volatile read_cmd_valid  :=  (read_cmd [] 0)
			$volatile write_cmd_valid :=  (write_cmd [] 0)

			$volatile next_read_state := 
				($prioritymux 
					($reduce & read_cmd_valid  write_cmd_valid)  ZERO_1
					($reduce & read_cmd_valid  FULL)  ZERO_1
					read_cmd_valid     ONE_1
					$default read_state)
						
			$volatile next_write_state := 
				($prioritymux
					($reduce & read_cmd_valid  write_cmd_valid)  ZERO_1
					($reduce & write_cmd_valid (~FULL))  ZERO_1
					write_cmd_valid ONE_1
					$default write_state)

			$volatile next_FULL :=
				($prioritymux
					($reduce & read_cmd_valid write_cmd_valid) FULL
					($reduce & read_cmd_valid FULL)            ZERO_1
					($reduce & write_cmd_valid (~FULL))        ONE_1
					$default FULL)

			$volatile next_counter := ($mux ((~next_write_state) & write_cmd_valid) (counter + 1) counter)

			$volatile send_data := ((~next_read_state) & read_cmd_valid)
			$guard (send_data)
				out_data := counter

		$while 1
	}
}
