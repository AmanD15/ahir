$noblock $pipe read_command: $uint<8>   $depth 2
$pipe write_command : $uint<8> $depth 2
$pipe out_data: $uint<8> $depth 2


$module [run_daemon] $in () $out () $is
{
	$branchblock[LoOp] {

		$dopipeline $depth 8 $buffering 2 $fullrate

			$merge $entry $loopback 

				$phi FULL := ($bitcast ($uint<1>) 0) $on $entry next_FULL $on $loopback
				$phi counter := ($bitcast($uint<8>) 0) $on $entry next_counter $on $loopback

			$endmerge

			$volatile fetch_next_rcmd := FULL
			$volatile fetch_next_wcmd := (~FULL)
								
			$guard (fetch_next_rcmd)
				rcmd := read_command

			$guard (fetch_next_wcmd)
				wcmd := write_command

			$volatile active_read := (fetch_next_rcmd & (rcmd [] 0))
			$volatile active_write := (fetch_next_wcmd & (wcmd [] 0))
		

			$volatile next_FULL := ($prioritymux active_read 0 active_write 1 $default FULL)
			$volatile next_counter := ($mux active_write (counter+1) counter)

			$guard (active_read) 
					out_data := counter

		$while 1
	}
}
