// pipe-declarations for block %sum_mod
//  file ConcatBitsel.aa, line 2
// pipe-declarations for block %sum_mod%mainloop
//  file ConcatBitsel.aa, line 9
// pipe-declarations for block %sum_mod%mainloop%
//  file ConcatBitsel.aa, line 11
// pipe-declarations for block %sum_mod%mainloop%next
//  file ConcatBitsel.aa, line 16
// pipe-declarations for block %sum_mod%mainloop%
//  file ConcatBitsel.aa, line 25
// pipe-declarations for block %sum_mod%mainloop%ds
//  file ConcatBitsel.aa, line 31
$module [sum_mod] 
{
  $in a:$int<10> b:$int<10>
  $out aXb:$int<20>
  // memory-space-declarations for block %sum_mod
  //  file ConcatBitsel.aa, line 2
  // memory-space-declarations for block %sum_mod%mainloop
  //  file ConcatBitsel.aa, line 9
  // memory-space-declarations for block %sum_mod%mainloop%
  //  file ConcatBitsel.aa, line 11
  // memory-space-declarations for block %sum_mod%mainloop%next
  //  file ConcatBitsel.aa, line 16
  // memory-space-declarations for block %sum_mod%mainloop%
  //  file ConcatBitsel.aa, line 25
  // memory-space-declarations for block %sum_mod%mainloop%ds
  //  file ConcatBitsel.aa, line 31
  // memory-space-declarations for block %sum_mod%mainloop
  //  file ConcatBitsel.aa, line 9
  // memory-space-declarations for block %sum_mod%mainloop%
  //  file ConcatBitsel.aa, line 11
  // memory-space-declarations for block %sum_mod%mainloop%next
  //  file ConcatBitsel.aa, line 16
  // memory-space-declarations for block %sum_mod%mainloop%
  //  file ConcatBitsel.aa, line 25
  // memory-space-declarations for block %sum_mod%mainloop%ds
  //  file ConcatBitsel.aa, line 31
  $CP 
  {
    // begin control-path 
    // control-path for branch block %sum_mod%mainloop
    //  file ConcatBitsel.aa, line 9
    <>[branch_block_stmt_14] // Branch Block  file ConcatBitsel.aa, line 9
    {
      $P [branch_block_stmt_14__entry__]
      branch_block_stmt_14__entry__ <-| ($entry)
      $P [branch_block_stmt_14__exit__]
      branch_block_stmt_14__exit__ |-> ($exit)
      $P [merge_stmt_15__exit__] 
      $P [parallel_block_stmt_29__entry__] 
      $P [parallel_block_stmt_29__exit__] 
      $P [if_stmt_47__entry__] 
      $P [merge_stmt_55__exit__] 
      $P [assign_stmt_69__entry__] 
      $P [assign_stmt_69__exit__] 
      $P [parallel_block_stmt_70__entry__] 
      $P [parallel_block_stmt_70__exit__] 
      $P [if_stmt_87__entry__] 
      ||[parallel_block_stmt_29] // parallel block  file ConcatBitsel.aa, line 16
      {
        // control-path for: 			nu_if := (((u_in + b) && z1) >> 1 ) // type of target is $uint<11>
        //  file ConcatBitsel.aa, line 17
        ;;[assign_stmt_38] //  file ConcatBitsel.aa, line 17
        {
          // control-path for expression: (((u_in + b) && z1) >> 1 )
          ;;[binary_37] 
          {
            // binary expression: (((u_in + b) && z1) >> 1 )
            ||[binary_37_inputs] 
            {
              // control-path for expression: ((u_in + b) && z1)
              ;;[binary_35] 
              {
                // binary expression: ((u_in + b) && z1)
                ||[binary_35_inputs] 
                {
                  // control-path for expression: (u_in + b)
                  ;;[binary_33] 
                  {
                    // binary expression: (u_in + b)
                    ||[binary_33_inputs] 
                    {
                      // CP for expression: u_in
                      // CP for expression: b
                    }
                    $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
                  }
                }
                $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
              }
            }
            $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
          }
          // CP for expression: nu_if
        }
        // end assignment statement assign_stmt_38
        // control-path for: 			nu_else := ((u_in && z1) >> 1 ) // type of target is $uint<11>
        //  file ConcatBitsel.aa, line 18
        ;;[assign_stmt_45] //  file ConcatBitsel.aa, line 18
        {
          // control-path for expression: ((u_in && z1) >> 1 )
          ;;[binary_44] 
          {
            // binary expression: ((u_in && z1) >> 1 )
            ||[binary_44_inputs] 
            {
              // control-path for expression: (u_in && z1)
              ;;[binary_42] 
              {
                // binary expression: (u_in && z1)
                ||[binary_42_inputs] 
                {
                  // CP for expression: u_in
                }
                $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
              }
            }
            $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
          }
          // CP for expression: nu_else
        }
        // end assignment statement assign_stmt_45
      }
      // end parallel block parallel_block_stmt_29
      parallel_block_stmt_29__entry__ |-> (parallel_block_stmt_29)
      parallel_block_stmt_29__exit__ <-| (parallel_block_stmt_29)
      // control-path  for if  
      //  file ConcatBitsel.aa, line 20
      //---------------------    if statement  file ConcatBitsel.aa, line 20  --------------------------
      ;;[if_stmt_47_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // control-path for expression: (a [] count_in)
        ;;[binary_50] 
        {
          // binary expression: (a [] count_in)
          ||[binary_50_inputs] 
          {
            // CP for expression: a
            // CP for expression: count_in
          }
          $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
        }
        $T [branch_req] 
      }
      if_stmt_47__entry__ |-> (if_stmt_47_eval_test)
      $P [binary_50_place]
      binary_50_place <-| (if_stmt_47_eval_test)
      ;;[if_stmt_47_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_47_else_link] 
      {
        $T [else_choice_transition] 
      }
      binary_50_place |-> (if_stmt_47_if_link if_stmt_47_else_link)
      $P [if1]
      if1 <-| (if_stmt_47_if_link)
      $P [if0]
      if0 <-| (if_stmt_47_else_link)
      //---------------------  end of if statement  file ConcatBitsel.aa, line 20  --------------------------
      // control-path for: 		nv := (((nu [] 0 ) && v_in) >> 1 ) // type of target is $uint<11>
      //  file ConcatBitsel.aa, line 30
      ;;[assign_stmt_69] //  file ConcatBitsel.aa, line 30
      {
        // control-path for expression: (((nu [] 0 ) && v_in) >> 1 )
        ;;[binary_68] 
        {
          // binary expression: (((nu [] 0 ) && v_in) >> 1 )
          ||[binary_68_inputs] 
          {
            // control-path for expression: ((nu [] 0 ) && v_in)
            ;;[binary_66] 
            {
              // binary expression: ((nu [] 0 ) && v_in)
              ||[binary_66_inputs] 
              {
                // control-path for expression: (nu [] 0 )
                ;;[binary_64] 
                {
                  // binary expression: (nu [] 0 )
                  ||[binary_64_inputs] 
                  {
                    // CP for expression: nu
                  }
                  $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
                }
                // CP for expression: v_in
              }
              $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
            }
          }
          $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
        }
        // CP for expression: nv
      }
      // end assignment statement assign_stmt_69
      assign_stmt_69__entry__ |-> (assign_stmt_69)
      assign_stmt_69__exit__ <-| (assign_stmt_69)
      ||[parallel_block_stmt_70] // parallel block  file ConcatBitsel.aa, line 31
      {
        // control-path for: 			u := ( ($uint<10>) (nu >> 1 ) ) // type of target is $uint<10>
        //  file ConcatBitsel.aa, line 33
        ;;[assign_stmt_76] //  file ConcatBitsel.aa, line 33
        {
          // control-path for expression: ( ($uint<10>) (nu >> 1 ) )
          ;;[type_cast_75] 
          {
            // type-cast expression: ( ($uint<10>) (nu >> 1 ) )
            // control-path for expression: (nu >> 1 )
            ;;[binary_74] 
            {
              // binary expression: (nu >> 1 )
              ||[binary_74_inputs] 
              {
                // CP for expression: nu
              }
              $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
            }
            $T [req] $T [ack] //  type-conversion.. 
          }
          // CP for expression: u
        }
        // end assignment statement assign_stmt_76
        // control-path for: 			v := ( ($uint<10>) nv ) // type of target is $uint<10>
        //  file ConcatBitsel.aa, line 34
        ;;[assign_stmt_80] //  file ConcatBitsel.aa, line 34
        {
          // control-path for expression: ( ($uint<10>) nv )
          ;;[type_cast_79] 
          {
            // type-cast expression: ( ($uint<10>) nv )
            // CP for expression: nv
            $T [req] $T [ack] //  type-conversion.. 
          }
          // CP for expression: v
        }
        // end assignment statement assign_stmt_80
        // control-path for: 			count := (count_in + 1 ) // type of target is $uint<4>
        //  file ConcatBitsel.aa, line 35
        ;;[assign_stmt_85] //  file ConcatBitsel.aa, line 35
        {
          // control-path for expression: (count_in + 1 )
          ;;[binary_84] 
          {
            // binary expression: (count_in + 1 )
            ||[binary_84_inputs] 
            {
              // CP for expression: count_in
            }
            $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
          }
          // CP for expression: count
        }
        // end assignment statement assign_stmt_85
      }
      // end parallel block parallel_block_stmt_70
      parallel_block_stmt_70__entry__ |-> (parallel_block_stmt_70)
      parallel_block_stmt_70__exit__ <-| (parallel_block_stmt_70)
      // control-path  for if  
      //  file ConcatBitsel.aa, line 37
      //---------------------    if statement  file ConcatBitsel.aa, line 37  --------------------------
      ;;[if_stmt_87_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // control-path for expression: (%ds:count == 10 )
        ;;[binary_90] 
        {
          // binary expression: (%ds:count == 10 )
          ||[binary_90_inputs] 
          {
            // CP for expression: %ds:count
          }
          $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
        }
        $T [branch_req] 
      }
      if_stmt_87__entry__ |-> (if_stmt_87_eval_test)
      $P [binary_90_place]
      binary_90_place <-| (if_stmt_87_eval_test)
      ;;[if_stmt_87_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_87_else_link] 
      {
        $T [else_choice_transition] 
      }
      binary_90_place |-> (if_stmt_87_if_link if_stmt_87_else_link)
      $P [stmt_91__entry__] 
      $P [stmt_91__exit__] 
      // control-path for: 			$null
      //  file ConcatBitsel.aa, line 0
      ;;[stmt_91] 
      {
      }
      stmt_91__entry__ |-> (stmt_91)
      stmt_91__exit__ <-| (stmt_91)
      stmt_91__entry__ <-| (if_stmt_87_if_link)
      stmt_91__exit__ |-> (branch_block_stmt_14__exit__)
      $P [loopback]
      loopback <-| (if_stmt_87_else_link)
      //---------------------  end of if statement  file ConcatBitsel.aa, line 37  --------------------------
      // control-path for merge  
      //  file ConcatBitsel.aa, line 11
      //---------------------   merge statement  file ConcatBitsel.aa, line 11  --------------------------
      ||[branch_block_stmt_14__entry___PhiReq] 
      {
        $T [phi_stmt_16_req] 
        $T [phi_stmt_20_req] 
        $T [phi_stmt_24_req] 
      }
      branch_block_stmt_14__entry__ |-> (branch_block_stmt_14__entry___PhiReq)
      ||[loopback_PhiReq] 
      {
        $T [phi_stmt_16_req] 
        $T [phi_stmt_20_req] 
        $T [phi_stmt_24_req] 
      }
      loopback |-> (loopback_PhiReq)
      $P [merge_stmt_15_PhiReqMerge] 
      merge_stmt_15_PhiReqMerge <-| ( branch_block_stmt_14__entry___PhiReq  loopback_PhiReq )
      ||[merge_stmt_15_PhiAck] 
      {
        $T [phi_stmt_16_ack] 
        $T [phi_stmt_20_ack] 
        $T [phi_stmt_24_ack] 
      }
      merge_stmt_15_PhiReqMerge |-> (merge_stmt_15_PhiAck)
      merge_stmt_15__exit__ <-| (merge_stmt_15_PhiAck)
      //---------------------  end of merge statement  file ConcatBitsel.aa, line 11  --------------------------
      // control-path for merge  
      //  file ConcatBitsel.aa, line 25
      //---------------------   merge statement  file ConcatBitsel.aa, line 25  --------------------------
      ||[if0_PhiReq] 
      {
        $T [phi_stmt_56_req] 
      }
      if0 |-> (if0_PhiReq)
      ||[if1_PhiReq] 
      {
        $T [phi_stmt_56_req] 
      }
      if1 |-> (if1_PhiReq)
      $P [merge_stmt_55_PhiReqMerge] 
      merge_stmt_55_PhiReqMerge <-| ( if0_PhiReq  if1_PhiReq )
      ||[merge_stmt_55_PhiAck] 
      {
        $T [phi_stmt_56_ack] 
      }
      merge_stmt_55_PhiReqMerge |-> (merge_stmt_55_PhiAck)
      merge_stmt_55__exit__ <-| (merge_stmt_55_PhiAck)
      //---------------------  end of merge statement  file ConcatBitsel.aa, line 25  --------------------------
      parallel_block_stmt_29__entry__ <-| (merge_stmt_15__exit__)
      if_stmt_47__entry__ <-| (parallel_block_stmt_29__exit__)
      assign_stmt_69__entry__ <-| (merge_stmt_55__exit__)
      parallel_block_stmt_70__entry__ <-| (assign_stmt_69__exit__)
      if_stmt_87__entry__ <-| (parallel_block_stmt_70__exit__)
    }
    // control-path for: 	aXb := (%mainloop%ds:u && %mainloop%ds:v) // type of target is $uint<20>
    //  file ConcatBitsel.aa, line 39
    ;;[assign_stmt_100] //  file ConcatBitsel.aa, line 39
    {
      // control-path for expression: (%mainloop%ds:u && %mainloop%ds:v)
      ;;[binary_99] 
      {
        // binary expression: (%mainloop%ds:u && %mainloop%ds:v)
        ||[binary_99_inputs] 
        {
          // CP for expression: %mainloop%ds:u
          // CP for expression: %mainloop%ds:v
        }
        $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
      }
      // CP for expression: aXb
    }
    // end assignment statement assign_stmt_100
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %sum_mod%mainloop%
    //  file ConcatBitsel.aa, line 11
    // constant-object-declarations for block %sum_mod%mainloop%next
    //  file ConcatBitsel.aa, line 16
    // constant-object-declarations for block %sum_mod%mainloop%
    //  file ConcatBitsel.aa, line 25
    // constant-object-declarations for block %sum_mod%mainloop%ds
    //  file ConcatBitsel.aa, line 31
    // constant-object-declarations for block %sum_mod%mainloop
    //  file ConcatBitsel.aa, line 9
    // constant-object-declarations for block %sum_mod
    //  file ConcatBitsel.aa, line 2
    $constant $W[xxsum_modxxz9] : $int<9> := _b000000000
    $constant $W[xxsum_modxxz1] : $int<1> := _b0
    // constant-declarations for block %sum_mod%mainloop
    //  file ConcatBitsel.aa, line 9
    // constant-declarations for block %sum_mod%mainloop%
    //  file ConcatBitsel.aa, line 11
    // constant-declarations for phi:  			$phi u_in := 			  0  $on $entry			  %ds:u $on loopback // type of target is $uint<10>
    //  file ConcatBitsel.aa, line 12
    // Constant-declaration for expression: 0 
    $constant $W[expr_18_wire_constant] : $int<10> := _b0000000000
    // constant-declarations for phi:  			$phi v_in := 			  0  $on $entry			  %ds:v $on loopback // type of target is $uint<10>
    //  file ConcatBitsel.aa, line 13
    // Constant-declaration for expression: 0 
    $constant $W[expr_22_wire_constant] : $int<10> := _b0000000000
    // constant-declarations for phi:  			$phi count_in := 			  0  $on $entry			  %ds:count $on loopback // type of target is $uint<4>
    //  file ConcatBitsel.aa, line 14
    // Constant-declaration for expression: 0 
    $constant $W[expr_26_wire_constant] : $int<4> := _b0000
    // constant-declarations for block %sum_mod%mainloop%next
    //  file ConcatBitsel.aa, line 16
    $constant $W[simple_obj_ref_34_wire_constant] : $int<1> := _b0
    // Constant-declaration for expression: 1 
    $constant $W[expr_36_wire_constant] : $int<4> := _b0001
    $constant $W[simple_obj_ref_41_wire_constant] : $int<1> := _b0
    // Constant-declaration for expression: 1 
    $constant $W[expr_43_wire_constant] : $int<4> := _b0001
    // constant-declarations for if  
    //  file ConcatBitsel.aa, line 20
    // constant-declarations for block %sum_mod%mainloop%
    //  file ConcatBitsel.aa, line 25
    // constant-declarations for phi:  			$phi nu := 			  %next:nu_if $on if1			  %next:nu_else $on if0 // type of target is $uint<11>
    //  file ConcatBitsel.aa, line 26
    // Constant-declaration for expression: 0 
    $constant $W[expr_63_wire_constant] : $int<4> := _b0000
    // Constant-declaration for expression: 1 
    $constant $W[expr_67_wire_constant] : $int<4> := _b0001
    // constant-declarations for block %sum_mod%mainloop%ds
    //  file ConcatBitsel.aa, line 31
    // Constant-declaration for expression: 1 
    $constant $W[expr_73_wire_constant] : $int<4> := _b0001
    // Constant-declaration for expression: 1 
    $constant $W[expr_83_wire_constant] : $int<4> := _b0001
    // constant-declarations for if  
    //  file ConcatBitsel.aa, line 37
    // Constant-declaration for expression: 10 
    $constant $W[expr_89_wire_constant] : $int<4> := _b1010
    // wire-declarations for block %sum_mod%mainloop
    //  file ConcatBitsel.aa, line 9
    // wire-declarations for merge  
    //  file ConcatBitsel.aa, line 11
    // wire-declarations for phi:  			$phi u_in := 			  0  $on $entry			  %ds:u $on loopback // type of target is $uint<10>
    //  file ConcatBitsel.aa, line 12
    $W[u_in_16] : $int<10>
    // wire-declarations for phi:  			$phi v_in := 			  0  $on $entry			  %ds:v $on loopback // type of target is $uint<10>
    //  file ConcatBitsel.aa, line 13
    $W[v_in_20] : $int<10>
    // wire-declarations for phi:  			$phi count_in := 			  0  $on $entry			  %ds:count $on loopback // type of target is $uint<4>
    //  file ConcatBitsel.aa, line 14
    $W[count_in_24] : $int<4>
    // wire-declarations for block %sum_mod%mainloop%next
    //  file ConcatBitsel.aa, line 16
    // wire-declarations for: 			nu_if := (((u_in + b) && z1) >> 1 ) // type of target is $uint<11>
    //  file ConcatBitsel.aa, line 17
    // wire-declarations for expression: (u_in + b)
    $intermediate $W[binary_33_wire] : $int<10>
    // wire-declarations for expression: ((u_in + b) && z1)
    $intermediate $W[binary_35_wire] : $int<11>
    $W[nu_if_38] : $int<11>
    // wire-declarations for: 			nu_else := ((u_in && z1) >> 1 ) // type of target is $uint<11>
    //  file ConcatBitsel.aa, line 18
    // wire-declarations for expression: (u_in && z1)
    $intermediate $W[binary_42_wire] : $int<11>
    $W[nu_else_45] : $int<11>
    // wire-declarations for if  
    //  file ConcatBitsel.aa, line 20
    // wire-declarations for expression: (a [] count_in)
    $intermediate $W[binary_50_wire] : $int<1>
    // wire-declarations for merge  
    //  file ConcatBitsel.aa, line 25
    // wire-declarations for phi:  			$phi nu := 			  %next:nu_if $on if1			  %next:nu_else $on if0 // type of target is $uint<11>
    //  file ConcatBitsel.aa, line 26
    $W[nu_56] : $int<11>
    // wire-declarations for: 		nv := (((nu [] 0 ) && v_in) >> 1 ) // type of target is $uint<11>
    //  file ConcatBitsel.aa, line 30
    // wire-declarations for expression: (nu [] 0 )
    $intermediate $W[binary_64_wire] : $int<1>
    // wire-declarations for expression: ((nu [] 0 ) && v_in)
    $intermediate $W[binary_66_wire] : $int<11>
    $W[nv_69] : $int<11>
    // wire-declarations for block %sum_mod%mainloop%ds
    //  file ConcatBitsel.aa, line 31
    // wire-declarations for: 			u := ( ($uint<10>) (nu >> 1 ) ) // type of target is $uint<10>
    //  file ConcatBitsel.aa, line 33
    // wire-declarations for expression: (nu >> 1 )
    $intermediate $W[binary_74_wire] : $int<11>
    $W[u_76] : $int<10>
    // wire-declarations for: 			v := ( ($uint<10>) nv ) // type of target is $uint<10>
    //  file ConcatBitsel.aa, line 34
    $W[v_80] : $int<10>
    // wire-declarations for: 			count := (count_in + 1 ) // type of target is $uint<4>
    //  file ConcatBitsel.aa, line 35
    $W[count_85] : $int<4>
    // wire-declarations for if  
    //  file ConcatBitsel.aa, line 37
    // wire-declarations for expression: (%ds:count == 10 )
    $intermediate $W[binary_90_wire] : $int<1>
    // wire-declarations for: 	aXb := (%mainloop%ds:u && %mainloop%ds:v) // type of target is $uint<20>
    //  file ConcatBitsel.aa, line 39
    // datapath-instances for block %sum_mod%mainloop
    //  file ConcatBitsel.aa, line 9
    // data-path instances for merge  
    //  file ConcatBitsel.aa, line 11
    // datapath-instances for phi:  			$phi u_in := 			  0  $on $entry			  %ds:u $on loopback // type of target is $uint<10>
    //  file ConcatBitsel.aa, line 12
    $phi [phi_stmt_16] (expr_18_wire_constant u_76) ( u_in_16 )
    // datapath-instances for phi:  			$phi v_in := 			  0  $on $entry			  %ds:v $on loopback // type of target is $uint<10>
    //  file ConcatBitsel.aa, line 13
    $phi [phi_stmt_20] (expr_22_wire_constant v_80) ( v_in_20 )
    // datapath-instances for phi:  			$phi count_in := 			  0  $on $entry			  %ds:count $on loopback // type of target is $uint<4>
    //  file ConcatBitsel.aa, line 14
    $phi [phi_stmt_24] (expr_26_wire_constant count_85) ( count_in_24 )
    // datapath-instances for block %sum_mod%mainloop%next
    //  file ConcatBitsel.aa, line 16
    // data-path instances for: 			nu_if := (((u_in + b) && z1) >> 1 ) // type of target is $uint<11>
    //  file ConcatBitsel.aa, line 17
    // data-path-instances for expression: (u_in + b)
    +[binary_33_inst] (u_in_16 b) (binary_33_wire)
    // data-path-instances for expression: ((u_in + b) && z1)
    &&[binary_35_inst] (binary_33_wire simple_obj_ref_34_wire_constant) (binary_35_wire)
    // data-path-instances for expression: (((u_in + b) && z1) >> 1 )
    >>[binary_37_inst] (binary_35_wire expr_36_wire_constant) (nu_if_38)
    // data-path instances for: 			nu_else := ((u_in && z1) >> 1 ) // type of target is $uint<11>
    //  file ConcatBitsel.aa, line 18
    // data-path-instances for expression: (u_in && z1)
    &&[binary_42_inst] (u_in_16 simple_obj_ref_41_wire_constant) (binary_42_wire)
    // data-path-instances for expression: ((u_in && z1) >> 1 )
    >>[binary_44_inst] (binary_42_wire expr_43_wire_constant) (nu_else_45)
    // datapath-instances for if  
    //  file ConcatBitsel.aa, line 20
    // data-path-instances for expression: (a [] count_in)
    [][binary_50_inst] (a count_in_24) (binary_50_wire)
    ==0? [if_stmt_47_branch] (binary_50_wire)
    // data-path instances for merge  
    //  file ConcatBitsel.aa, line 25
    // datapath-instances for phi:  			$phi nu := 			  %next:nu_if $on if1			  %next:nu_else $on if0 // type of target is $uint<11>
    //  file ConcatBitsel.aa, line 26
    $phi [phi_stmt_56] (nu_if_38 nu_else_45) ( nu_56 )
    // data-path instances for: 		nv := (((nu [] 0 ) && v_in) >> 1 ) // type of target is $uint<11>
    //  file ConcatBitsel.aa, line 30
    // data-path-instances for expression: (nu [] 0 )
    [][binary_64_inst] (nu_56 expr_63_wire_constant) (binary_64_wire)
    // data-path-instances for expression: ((nu [] 0 ) && v_in)
    &&[binary_66_inst] (binary_64_wire v_in_20) (binary_66_wire)
    // data-path-instances for expression: (((nu [] 0 ) && v_in) >> 1 )
    >>[binary_68_inst] (binary_66_wire expr_67_wire_constant) (nv_69)
    // datapath-instances for block %sum_mod%mainloop%ds
    //  file ConcatBitsel.aa, line 31
    // data-path instances for: 			u := ( ($uint<10>) (nu >> 1 ) ) // type of target is $uint<10>
    //  file ConcatBitsel.aa, line 33
    // data-path-instances for expression: (nu >> 1 )
    >>[binary_74_inst] (nu_56 expr_73_wire_constant) (binary_74_wire)
    // data-path instances for expression: ( ($uint<10>) (nu >> 1 ) )
    := [type_cast_75_inst] (binary_74_wire) (u_76)
    // data-path instances for: 			v := ( ($uint<10>) nv ) // type of target is $uint<10>
    //  file ConcatBitsel.aa, line 34
    // data-path instances for expression: ( ($uint<10>) nv )
    := [type_cast_79_inst] (nv_69) (v_80)
    // data-path instances for: 			count := (count_in + 1 ) // type of target is $uint<4>
    //  file ConcatBitsel.aa, line 35
    // data-path-instances for expression: (count_in + 1 )
    +[binary_84_inst] (count_in_24 expr_83_wire_constant) (count_85)
    // datapath-instances for if  
    //  file ConcatBitsel.aa, line 37
    // data-path-instances for expression: (%ds:count == 10 )
    ==[binary_90_inst] (count_85 expr_89_wire_constant) (binary_90_wire)
    ==0? [if_stmt_87_branch] (binary_90_wire)
    // data-path instances for: 	aXb := (%mainloop%ds:u && %mainloop%ds:v) // type of target is $uint<20>
    //  file ConcatBitsel.aa, line 39
    // data-path-instances for expression: (%mainloop%ds:u && %mainloop%ds:v)
    &&[binary_99_inst] (u_76 v_80) (aXb)
  }
  // end data-path
  // CP-DP links for block %sum_mod%mainloop
  //  file ConcatBitsel.aa, line 9
  // CP-DP links for merge  
  //  file ConcatBitsel.aa, line 11
  phi_stmt_16 <=> (branch_block_stmt_14/branch_block_stmt_14__entry___PhiReq/phi_stmt_16_req branch_block_stmt_14/loopback_PhiReq/phi_stmt_16_req) (branch_block_stmt_14/merge_stmt_15_PhiAck/phi_stmt_16_ack)
  phi_stmt_20 <=> (branch_block_stmt_14/branch_block_stmt_14__entry___PhiReq/phi_stmt_20_req branch_block_stmt_14/loopback_PhiReq/phi_stmt_20_req) (branch_block_stmt_14/merge_stmt_15_PhiAck/phi_stmt_20_ack)
  phi_stmt_24 <=> (branch_block_stmt_14/branch_block_stmt_14__entry___PhiReq/phi_stmt_24_req branch_block_stmt_14/loopback_PhiReq/phi_stmt_24_req) (branch_block_stmt_14/merge_stmt_15_PhiAck/phi_stmt_24_ack)
  // CP-DP links for block %sum_mod%mainloop%next
  //  file ConcatBitsel.aa, line 16
  // CP-DP links for: 			nu_if := (((u_in + b) && z1) >> 1 ) // type of target is $uint<11>
  //  file ConcatBitsel.aa, line 17
  // CP-DP links for expression: (u_in + b)
  binary_33_inst <=> (branch_block_stmt_14/parallel_block_stmt_29/assign_stmt_38/binary_37/binary_37_inputs/binary_35/binary_35_inputs/binary_33/rr branch_block_stmt_14/parallel_block_stmt_29/assign_stmt_38/binary_37/binary_37_inputs/binary_35/binary_35_inputs/binary_33/cr) (branch_block_stmt_14/parallel_block_stmt_29/assign_stmt_38/binary_37/binary_37_inputs/binary_35/binary_35_inputs/binary_33/ra branch_block_stmt_14/parallel_block_stmt_29/assign_stmt_38/binary_37/binary_37_inputs/binary_35/binary_35_inputs/binary_33/ca)
  // CP-DP links for expression: ((u_in + b) && z1)
  binary_35_inst <=> (branch_block_stmt_14/parallel_block_stmt_29/assign_stmt_38/binary_37/binary_37_inputs/binary_35/rr branch_block_stmt_14/parallel_block_stmt_29/assign_stmt_38/binary_37/binary_37_inputs/binary_35/cr) (branch_block_stmt_14/parallel_block_stmt_29/assign_stmt_38/binary_37/binary_37_inputs/binary_35/ra branch_block_stmt_14/parallel_block_stmt_29/assign_stmt_38/binary_37/binary_37_inputs/binary_35/ca)
  // CP-DP links for expression: (((u_in + b) && z1) >> 1 )
  binary_37_inst <=> (branch_block_stmt_14/parallel_block_stmt_29/assign_stmt_38/binary_37/rr branch_block_stmt_14/parallel_block_stmt_29/assign_stmt_38/binary_37/cr) (branch_block_stmt_14/parallel_block_stmt_29/assign_stmt_38/binary_37/ra branch_block_stmt_14/parallel_block_stmt_29/assign_stmt_38/binary_37/ca)
  // CP-DP links for: 			nu_else := ((u_in && z1) >> 1 ) // type of target is $uint<11>
  //  file ConcatBitsel.aa, line 18
  // CP-DP links for expression: (u_in && z1)
  binary_42_inst <=> (branch_block_stmt_14/parallel_block_stmt_29/assign_stmt_45/binary_44/binary_44_inputs/binary_42/rr branch_block_stmt_14/parallel_block_stmt_29/assign_stmt_45/binary_44/binary_44_inputs/binary_42/cr) (branch_block_stmt_14/parallel_block_stmt_29/assign_stmt_45/binary_44/binary_44_inputs/binary_42/ra branch_block_stmt_14/parallel_block_stmt_29/assign_stmt_45/binary_44/binary_44_inputs/binary_42/ca)
  // CP-DP links for expression: ((u_in && z1) >> 1 )
  binary_44_inst <=> (branch_block_stmt_14/parallel_block_stmt_29/assign_stmt_45/binary_44/rr branch_block_stmt_14/parallel_block_stmt_29/assign_stmt_45/binary_44/cr) (branch_block_stmt_14/parallel_block_stmt_29/assign_stmt_45/binary_44/ra branch_block_stmt_14/parallel_block_stmt_29/assign_stmt_45/binary_44/ca)
  // CP-DP links for if  
  //  file ConcatBitsel.aa, line 20
  // CP-DP links for expression: (a [] count_in)
  binary_50_inst <=> (branch_block_stmt_14/if_stmt_47_eval_test/binary_50/rr branch_block_stmt_14/if_stmt_47_eval_test/binary_50/cr) (branch_block_stmt_14/if_stmt_47_eval_test/binary_50/ra branch_block_stmt_14/if_stmt_47_eval_test/binary_50/ca)
  if_stmt_47_branch <=> (branch_block_stmt_14/if_stmt_47_eval_test/branch_req) (branch_block_stmt_14/if_stmt_47_else_link/else_choice_transition branch_block_stmt_14/if_stmt_47_if_link/if_choice_transition)
  // CP-DP links for merge  
  //  file ConcatBitsel.aa, line 25
  phi_stmt_56 <=> (branch_block_stmt_14/if1_PhiReq/phi_stmt_56_req branch_block_stmt_14/if0_PhiReq/phi_stmt_56_req) (branch_block_stmt_14/merge_stmt_55_PhiAck/phi_stmt_56_ack)
  // CP-DP links for: 		nv := (((nu [] 0 ) && v_in) >> 1 ) // type of target is $uint<11>
  //  file ConcatBitsel.aa, line 30
  // CP-DP links for expression: (nu [] 0 )
  binary_64_inst <=> (branch_block_stmt_14/assign_stmt_69/binary_68/binary_68_inputs/binary_66/binary_66_inputs/binary_64/rr branch_block_stmt_14/assign_stmt_69/binary_68/binary_68_inputs/binary_66/binary_66_inputs/binary_64/cr) (branch_block_stmt_14/assign_stmt_69/binary_68/binary_68_inputs/binary_66/binary_66_inputs/binary_64/ra branch_block_stmt_14/assign_stmt_69/binary_68/binary_68_inputs/binary_66/binary_66_inputs/binary_64/ca)
  // CP-DP links for expression: ((nu [] 0 ) && v_in)
  binary_66_inst <=> (branch_block_stmt_14/assign_stmt_69/binary_68/binary_68_inputs/binary_66/rr branch_block_stmt_14/assign_stmt_69/binary_68/binary_68_inputs/binary_66/cr) (branch_block_stmt_14/assign_stmt_69/binary_68/binary_68_inputs/binary_66/ra branch_block_stmt_14/assign_stmt_69/binary_68/binary_68_inputs/binary_66/ca)
  // CP-DP links for expression: (((nu [] 0 ) && v_in) >> 1 )
  binary_68_inst <=> (branch_block_stmt_14/assign_stmt_69/binary_68/rr branch_block_stmt_14/assign_stmt_69/binary_68/cr) (branch_block_stmt_14/assign_stmt_69/binary_68/ra branch_block_stmt_14/assign_stmt_69/binary_68/ca)
  // CP-DP links for block %sum_mod%mainloop%ds
  //  file ConcatBitsel.aa, line 31
  // CP-DP links for: 			u := ( ($uint<10>) (nu >> 1 ) ) // type of target is $uint<10>
  //  file ConcatBitsel.aa, line 33
  // CP-DP links for expression: (nu >> 1 )
  binary_74_inst <=> (branch_block_stmt_14/parallel_block_stmt_70/assign_stmt_76/type_cast_75/binary_74/rr branch_block_stmt_14/parallel_block_stmt_70/assign_stmt_76/type_cast_75/binary_74/cr) (branch_block_stmt_14/parallel_block_stmt_70/assign_stmt_76/type_cast_75/binary_74/ra branch_block_stmt_14/parallel_block_stmt_70/assign_stmt_76/type_cast_75/binary_74/ca)
  // CP-DP links for expression: ( ($uint<10>) (nu >> 1 ) )
  type_cast_75_inst <=> (branch_block_stmt_14/parallel_block_stmt_70/assign_stmt_76/type_cast_75/req) (branch_block_stmt_14/parallel_block_stmt_70/assign_stmt_76/type_cast_75/ack)
  // CP-DP links for: 			v := ( ($uint<10>) nv ) // type of target is $uint<10>
  //  file ConcatBitsel.aa, line 34
  // CP-DP links for expression: ( ($uint<10>) nv )
  type_cast_79_inst <=> (branch_block_stmt_14/parallel_block_stmt_70/assign_stmt_80/type_cast_79/req) (branch_block_stmt_14/parallel_block_stmt_70/assign_stmt_80/type_cast_79/ack)
  // CP-DP links for: 			count := (count_in + 1 ) // type of target is $uint<4>
  //  file ConcatBitsel.aa, line 35
  // CP-DP links for expression: (count_in + 1 )
  binary_84_inst <=> (branch_block_stmt_14/parallel_block_stmt_70/assign_stmt_85/binary_84/rr branch_block_stmt_14/parallel_block_stmt_70/assign_stmt_85/binary_84/cr) (branch_block_stmt_14/parallel_block_stmt_70/assign_stmt_85/binary_84/ra branch_block_stmt_14/parallel_block_stmt_70/assign_stmt_85/binary_84/ca)
  // CP-DP links for if  
  //  file ConcatBitsel.aa, line 37
  // CP-DP links for expression: (%ds:count == 10 )
  binary_90_inst <=> (branch_block_stmt_14/if_stmt_87_eval_test/binary_90/rr branch_block_stmt_14/if_stmt_87_eval_test/binary_90/cr) (branch_block_stmt_14/if_stmt_87_eval_test/binary_90/ra branch_block_stmt_14/if_stmt_87_eval_test/binary_90/ca)
  if_stmt_87_branch <=> (branch_block_stmt_14/if_stmt_87_eval_test/branch_req) (branch_block_stmt_14/if_stmt_87_else_link/else_choice_transition branch_block_stmt_14/if_stmt_87_if_link/if_choice_transition)
  // CP-DP links for: 	aXb := (%mainloop%ds:u && %mainloop%ds:v) // type of target is $uint<20>
  //  file ConcatBitsel.aa, line 39
  // CP-DP links for expression: (%mainloop%ds:u && %mainloop%ds:v)
  binary_99_inst <=> (assign_stmt_100/binary_99/rr assign_stmt_100/binary_99/cr) (assign_stmt_100/binary_99/ra assign_stmt_100/binary_99/ca)
}
