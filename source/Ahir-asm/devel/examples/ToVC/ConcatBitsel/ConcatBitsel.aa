// a simple example.. of a shift and add multiplier..
$module [sum_mod]
    $in (a:$uint<10> b:$uint<10>)
    $out (aXb:$uint<20>) 
$is
{
        $constant z9 : $uint<9> := 0
	$constant z1 : $uint<1> := 0
	$branchblock[mainloop]
	{
		$merge $entry loopback
			$phi u_in := 0 $on $entry %ds:u $on loopback
			$phi v_in := 0 $on $entry %ds:v $on loopback
			$phi count_in := 0 $on $entry %ds:count $on loopback
		$endmerge
		$parallelblock[next] {
			nu_if := (((u_in + b) && z1) >> 1)
			nu_else := ((u_in && z1) >> 1)
		}
		$if (a [] count_in) $then
			$place [if1]
		$else
			$place [if0]
		$endif   
		$merge $entry if1 if0 
			$phi nu := %next:nu_if $on if1 %next:nu_else $on if0
		$endmerge 
		// bit 0 of nu contains the shift-in bit for the lower
		// half.
		nv := (((nu [] 0) && v_in) >> 1)
		$parallelblock[ds] 
		{
			u := ($cast ($uint<10>) (nu >> 1))
			v := ($cast ($uint<10>) nv)
			count := (count_in + 1)
		}
		$if (%ds:count == 10) $then $null $else $place [loopback] $endif
	}
	aXb := (%mainloop%ds:u && %mainloop%ds:v)	

}
