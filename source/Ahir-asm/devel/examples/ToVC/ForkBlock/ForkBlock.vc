// pipe-declarations for block %sum_mod
//  file ForkBlock.aa, line 2
// pipe-declarations for block %sum_mod%p
//  file ForkBlock.aa, line 7
// pipe-declarations for block %sum_mod%p%s1
//  file ForkBlock.aa, line 8
// pipe-declarations for block %sum_mod%p%s2
//  file ForkBlock.aa, line 9
// pipe-declarations for block %sum_mod%p%
//  file ForkBlock.aa, line 11
$module [sum_mod] 
{
  $in a:$int<10> b:$int<10> c:$int<10> d:$int<10>
  $out result:$int<10>
  // memory-space-declarations for block %sum_mod
  //  file ForkBlock.aa, line 2
  // memory-space-declarations for block %sum_mod%p
  //  file ForkBlock.aa, line 7
  // memory-space-declarations for block %sum_mod%p%s1
  //  file ForkBlock.aa, line 8
  // memory-space-declarations for block %sum_mod%p%s2
  //  file ForkBlock.aa, line 9
  // memory-space-declarations for block %sum_mod%p%
  //  file ForkBlock.aa, line 11
  // memory-space-declarations for block %sum_mod%p
  //  file ForkBlock.aa, line 7
  // memory-space-declarations for block %sum_mod%p%s1
  //  file ForkBlock.aa, line 8
  // memory-space-declarations for block %sum_mod%p%s2
  //  file ForkBlock.aa, line 9
  // memory-space-declarations for block %sum_mod%p%
  //  file ForkBlock.aa, line 11
  $CP 
  {
    // begin control-path 
    // control-path for fork-block %sum_mod%p
    //  file ForkBlock.aa, line 7
    ::[fork_block_stmt_7] // fork block  file ForkBlock.aa, line 7
    {
      ;;[series_block_stmt_8] // series block  file ForkBlock.aa, line 8
      {
        // control-path for: 			q := (a + b) // type of target is $uint<10>
        //  file ForkBlock.aa, line 8
        ;;[assign_stmt_13] //  file ForkBlock.aa, line 8
        {
          // control-path for expression: (a + b)
          ;;[binary_12] 
          {
            // binary expression: (a + b)
            ||[binary_12_inputs] 
            {
              // CP for expression: a
              // CP for expression: b
            }
            $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
          }
          // CP for expression: q
        }
        // end assignment statement assign_stmt_13
      }
      // end series block series_block_stmt_8
      ;;[series_block_stmt_15] // series block  file ForkBlock.aa, line 9
      {
        // control-path for: 			r := (c + d) // type of target is $uint<10>
        //  file ForkBlock.aa, line 9
        ;;[assign_stmt_20] //  file ForkBlock.aa, line 9
        {
          // control-path for expression: (c + d)
          ;;[binary_19] 
          {
            // binary expression: (c + d)
            ||[binary_19_inputs] 
            {
              // CP for expression: c
              // CP for expression: d
            }
            $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
          }
          // CP for expression: r
        }
        // end assignment statement assign_stmt_20
      }
      // end series block series_block_stmt_15
      // control-path for join-fork statement 
      //  file ForkBlock.aa, line 11
      // control-path for: 		s := (%s1:q - %s2:r) // type of target is $uint<10>
      //  file ForkBlock.aa, line 12
      ;;[assign_stmt_27] //  file ForkBlock.aa, line 12
      {
        // control-path for expression: (%s1:q - %s2:r)
        ;;[binary_26] 
        {
          // binary expression: (%s1:q - %s2:r)
          ||[binary_26_inputs] 
          {
            // CP for expression: %s1:q
            // CP for expression: %s2:r
          }
          $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
        }
        // CP for expression: s
      }
      // end assignment statement assign_stmt_27
      // control-path for: 		t := (%s1:q + %s2:r) // type of target is $uint<10>
      //  file ForkBlock.aa, line 13
      ;;[assign_stmt_32] //  file ForkBlock.aa, line 13
      {
        // control-path for expression: (%s1:q + %s2:r)
        ;;[binary_31] 
        {
          // binary expression: (%s1:q + %s2:r)
          ||[binary_31_inputs] 
          {
            // CP for expression: %s1:q
            // CP for expression: %s2:r
          }
          $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
        }
        // CP for expression: t
      }
      // end assignment statement assign_stmt_32
      $T [join_fork_stmt_22] // join  file ForkBlock.aa, line 11
      join_fork_stmt_22 <-& (series_block_stmt_8 series_block_stmt_15)
      join_fork_stmt_22 &-> (assign_stmt_27 assign_stmt_32)
    }
    // end fork block  file ForkBlock.aa, line 7
    // control-path for: 	result := (%p:s + %p:t) // type of target is $uint<10>
    //  file ForkBlock.aa, line 16
    ;;[assign_stmt_39] //  file ForkBlock.aa, line 16
    {
      // control-path for expression: (%p:s + %p:t)
      ;;[binary_38] 
      {
        // binary expression: (%p:s + %p:t)
        ||[binary_38_inputs] 
        {
          // CP for expression: %p:s
          // CP for expression: %p:t
        }
        $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
      }
      // CP for expression: result
    }
    // end assignment statement assign_stmt_39
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %sum_mod%p%s1
    //  file ForkBlock.aa, line 8
    // constant-object-declarations for block %sum_mod%p%s2
    //  file ForkBlock.aa, line 9
    // constant-object-declarations for block %sum_mod%p%
    //  file ForkBlock.aa, line 11
    // constant-object-declarations for block %sum_mod%p
    //  file ForkBlock.aa, line 7
    // constant-object-declarations for block %sum_mod
    //  file ForkBlock.aa, line 2
    // constant-declarations for block %sum_mod%p
    //  file ForkBlock.aa, line 7
    // constant-declarations for block %sum_mod%p%s1
    //  file ForkBlock.aa, line 8
    // constant-declarations for block %sum_mod%p%s2
    //  file ForkBlock.aa, line 9
    // constant-declarations for block %sum_mod%p%
    //  file ForkBlock.aa, line 11
    // wire-declarations for block %sum_mod%p
    //  file ForkBlock.aa, line 7
    // wire-declarations for block %sum_mod%p%s1
    //  file ForkBlock.aa, line 8
    // wire-declarations for: 			q := (a + b) // type of target is $uint<10>
    //  file ForkBlock.aa, line 8
    $W[q_13] : $int<10>
    // wire-declarations for block %sum_mod%p%s2
    //  file ForkBlock.aa, line 9
    // wire-declarations for: 			r := (c + d) // type of target is $uint<10>
    //  file ForkBlock.aa, line 9
    $W[r_20] : $int<10>
    // wire-declarations for block %sum_mod%p%
    //  file ForkBlock.aa, line 11
    // wire-declarations for: 		s := (%s1:q - %s2:r) // type of target is $uint<10>
    //  file ForkBlock.aa, line 12
    $W[s_27] : $int<10>
    // wire-declarations for: 		t := (%s1:q + %s2:r) // type of target is $uint<10>
    //  file ForkBlock.aa, line 13
    $W[t_32] : $int<10>
    // wire-declarations for: 	result := (%p:s + %p:t) // type of target is $uint<10>
    //  file ForkBlock.aa, line 16
    // datapath-instances for block %sum_mod%p
    //  file ForkBlock.aa, line 7
    // datapath-instances for block %sum_mod%p%s1
    //  file ForkBlock.aa, line 8
    // data-path instances for: 			q := (a + b) // type of target is $uint<10>
    //  file ForkBlock.aa, line 8
    // data-path-instances for expression: (a + b)
    +[binary_12_inst] (a b) (q_13)
    // datapath-instances for block %sum_mod%p%s2
    //  file ForkBlock.aa, line 9
    // data-path instances for: 			r := (c + d) // type of target is $uint<10>
    //  file ForkBlock.aa, line 9
    // data-path-instances for expression: (c + d)
    +[binary_19_inst] (c d) (r_20)
    // datapath-instances for block %sum_mod%p%
    //  file ForkBlock.aa, line 11
    // data-path instances for: 		s := (%s1:q - %s2:r) // type of target is $uint<10>
    //  file ForkBlock.aa, line 12
    // data-path-instances for expression: (%s1:q - %s2:r)
    -[binary_26_inst] (q_13 r_20) (s_27)
    // data-path instances for: 		t := (%s1:q + %s2:r) // type of target is $uint<10>
    //  file ForkBlock.aa, line 13
    // data-path-instances for expression: (%s1:q + %s2:r)
    +[binary_31_inst] (q_13 r_20) (t_32)
    // data-path instances for: 	result := (%p:s + %p:t) // type of target is $uint<10>
    //  file ForkBlock.aa, line 16
    // data-path-instances for expression: (%p:s + %p:t)
    +[binary_38_inst] (s_27 t_32) (result)
  }
  // end data-path
  // CP-DP links for block %sum_mod%p
  //  file ForkBlock.aa, line 7
  // CP-DP links for block %sum_mod%p%s1
  //  file ForkBlock.aa, line 8
  // CP-DP links for: 			q := (a + b) // type of target is $uint<10>
  //  file ForkBlock.aa, line 8
  // CP-DP links for expression: (a + b)
  binary_12_inst <=> (fork_block_stmt_7/series_block_stmt_8/assign_stmt_13/binary_12/rr fork_block_stmt_7/series_block_stmt_8/assign_stmt_13/binary_12/cr) (fork_block_stmt_7/series_block_stmt_8/assign_stmt_13/binary_12/ra fork_block_stmt_7/series_block_stmt_8/assign_stmt_13/binary_12/ca)
  // CP-DP links for block %sum_mod%p%s2
  //  file ForkBlock.aa, line 9
  // CP-DP links for: 			r := (c + d) // type of target is $uint<10>
  //  file ForkBlock.aa, line 9
  // CP-DP links for expression: (c + d)
  binary_19_inst <=> (fork_block_stmt_7/series_block_stmt_15/assign_stmt_20/binary_19/rr fork_block_stmt_7/series_block_stmt_15/assign_stmt_20/binary_19/cr) (fork_block_stmt_7/series_block_stmt_15/assign_stmt_20/binary_19/ra fork_block_stmt_7/series_block_stmt_15/assign_stmt_20/binary_19/ca)
  // CP-DP links for join-fork  
  //  file ForkBlock.aa, line 11
  // CP-DP links for: 		s := (%s1:q - %s2:r) // type of target is $uint<10>
  //  file ForkBlock.aa, line 12
  // CP-DP links for expression: (%s1:q - %s2:r)
  binary_26_inst <=> (fork_block_stmt_7/assign_stmt_27/binary_26/rr fork_block_stmt_7/assign_stmt_27/binary_26/cr) (fork_block_stmt_7/assign_stmt_27/binary_26/ra fork_block_stmt_7/assign_stmt_27/binary_26/ca)
  // CP-DP links for: 		t := (%s1:q + %s2:r) // type of target is $uint<10>
  //  file ForkBlock.aa, line 13
  // CP-DP links for expression: (%s1:q + %s2:r)
  binary_31_inst <=> (fork_block_stmt_7/assign_stmt_32/binary_31/rr fork_block_stmt_7/assign_stmt_32/binary_31/cr) (fork_block_stmt_7/assign_stmt_32/binary_31/ra fork_block_stmt_7/assign_stmt_32/binary_31/ca)
  // CP-DP links for: 	result := (%p:s + %p:t) // type of target is $uint<10>
  //  file ForkBlock.aa, line 16
  // CP-DP links for expression: (%p:s + %p:t)
  binary_38_inst <=> (assign_stmt_39/binary_38/rr assign_stmt_39/binary_38/cr) (assign_stmt_39/binary_38/ra assign_stmt_39/binary_38/ca)
}
