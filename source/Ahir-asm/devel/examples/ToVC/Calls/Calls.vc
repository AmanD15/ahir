// pipe-declarations for block %main
//  file Calls.aa, line 10
// pipe-declarations for block %main%Compare
//  file Calls.aa, line 14
// pipe-declarations for block %main%Compare%WithCall
//  file Calls.aa, line 15
// pipe-declarations for block %main%Compare%WithCall%x2
//  file Calls.aa, line 16
// pipe-declarations for block %main%Compare%WithoutCall
//  file Calls.aa, line 22
// pipe-declarations for block %main%Compare%WithoutCall%x2
//  file Calls.aa, line 23
// pipe-declarations for block %sum_mod
//  file Calls.aa, line 2
$module [sum_mod] 
{
  $in a:$int<10> b:$int<10>
  $out c:$int<10>
  // memory-space-declarations for block %sum_mod
  //  file Calls.aa, line 2
  $CP 
  {
    // begin control-path 
    // control-path for: 	c := (a + b) // type of target is $uint<10>
    //  file Calls.aa, line 7
    ;;[assign_stmt_9] //  file Calls.aa, line 7
    {
      // control-path for expression: (a + b)
      ;;[binary_8] 
      {
        // binary expression: (a + b)
        ||[binary_8_inputs] 
        {
          // CP for expression: a
          // CP for expression: b
        }
        $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
      }
      // CP for expression: c
    }
    // end assignment statement assign_stmt_9
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %sum_mod
    //  file Calls.aa, line 2
    // wire-declarations for: 	c := (a + b) // type of target is $uint<10>
    //  file Calls.aa, line 7
    // data-path instances for: 	c := (a + b) // type of target is $uint<10>
    //  file Calls.aa, line 7
    // data-path-instances for expression: (a + b)
    +[binary_8_inst] (a b) (c)
  }
  // end data-path
  // CP-DP links for: 	c := (a + b) // type of target is $uint<10>
  //  file Calls.aa, line 7
  // CP-DP links for expression: (a + b)
  binary_8_inst <=> (assign_stmt_9/binary_8/rr assign_stmt_9/binary_8/cr) (assign_stmt_9/binary_8/ra assign_stmt_9/binary_8/ca)
}
$module [main] 
{
  $in a:$int<10> b:$int<10>
  $out c:$int<10> d:$int<10>
  // memory-space-declarations for block %main
  //  file Calls.aa, line 10
  // memory-space-declarations for block %main%Compare
  //  file Calls.aa, line 14
  // memory-space-declarations for block %main%Compare%WithCall
  //  file Calls.aa, line 15
  // memory-space-declarations for block %main%Compare%WithCall%x2
  //  file Calls.aa, line 16
  // memory-space-declarations for block %main%Compare%WithoutCall
  //  file Calls.aa, line 22
  // memory-space-declarations for block %main%Compare%WithoutCall%x2
  //  file Calls.aa, line 23
  // memory-space-declarations for block %main%Compare
  //  file Calls.aa, line 14
  // memory-space-declarations for block %main%Compare%WithCall
  //  file Calls.aa, line 15
  // memory-space-declarations for block %main%Compare%WithCall%x2
  //  file Calls.aa, line 16
  // memory-space-declarations for block %main%Compare%WithoutCall
  //  file Calls.aa, line 22
  // memory-space-declarations for block %main%Compare%WithoutCall%x2
  //  file Calls.aa, line 23
  $CP 
  {
    // begin control-path 
    ||[parallel_block_stmt_16] // parallel block  file Calls.aa, line 14
    {
      ;;[series_block_stmt_17] // series block  file Calls.aa, line 15
      {
        ||[parallel_block_stmt_18] // parallel block  file Calls.aa, line 16
        {
          // control path for: 				$call sum_mod (a a ) (s )
          //  file Calls.aa, line 17
          ;;[call_stmt_22] 
          {
            // call statement  file Calls.aa, line 17
            ||[call_stmt_22_in_args_] 
            {
              // input arguments
              // CP for expression: a
              // CP for expression: a
            }
            $T [crr] $T [cra] $T [ccr] $T [cca]
            ||[call_stmt_22_out_args_] 
            {
              // output arguments
              // CP for expression: s
            }
          }
          // end call-statement call_stmt_22
          // control path for: 				$call sum_mod (b b ) (t )
          //  file Calls.aa, line 18
          ;;[call_stmt_26] 
          {
            // call statement  file Calls.aa, line 18
            ||[call_stmt_26_in_args_] 
            {
              // input arguments
              // CP for expression: b
              // CP for expression: b
            }
            $T [crr] $T [cra] $T [ccr] $T [cca]
            ||[call_stmt_26_out_args_] 
            {
              // output arguments
              // CP for expression: t
            }
          }
          // end call-statement call_stmt_26
        }
        // end parallel block parallel_block_stmt_18
        // control path for: 			$call sum_mod (%x2:s %x2:t ) (c )
        //  file Calls.aa, line 20
        ;;[call_stmt_31] 
        {
          // call statement  file Calls.aa, line 20
          ||[call_stmt_31_in_args_] 
          {
            // input arguments
            // CP for expression: %x2:s
            // CP for expression: %x2:t
          }
          $T [crr] $T [cra] $T [ccr] $T [cca]
          ||[call_stmt_31_out_args_] 
          {
            // output arguments
            // CP for expression: c
          }
        }
        // end call-statement call_stmt_31
      }
      // end series block series_block_stmt_17
      ;;[series_block_stmt_33] // series block  file Calls.aa, line 22
      {
        ||[parallel_block_stmt_34] // parallel block  file Calls.aa, line 23
        {
          // control-path for: 				s := (a + a) // type of target is $uint<10>
          //  file Calls.aa, line 24
          ;;[assign_stmt_39] //  file Calls.aa, line 24
          {
            // control-path for expression: (a + a)
            ;;[binary_38] 
            {
              // binary expression: (a + a)
              ||[binary_38_inputs] 
              {
                // CP for expression: a
                // CP for expression: a
              }
              $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
            }
            // CP for expression: s
          }
          // end assignment statement assign_stmt_39
          // control-path for: 				t := (b + b) // type of target is $uint<10>
          //  file Calls.aa, line 25
          ;;[assign_stmt_44] //  file Calls.aa, line 25
          {
            // control-path for expression: (b + b)
            ;;[binary_43] 
            {
              // binary expression: (b + b)
              ||[binary_43_inputs] 
              {
                // CP for expression: b
                // CP for expression: b
              }
              $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
            }
            // CP for expression: t
          }
          // end assignment statement assign_stmt_44
        }
        // end parallel block parallel_block_stmt_34
        // control-path for: 			d := (%x2:s + %x2:t) // type of target is $uint<10>
        //  file Calls.aa, line 27
        ;;[assign_stmt_50] //  file Calls.aa, line 27
        {
          // control-path for expression: (%x2:s + %x2:t)
          ;;[binary_49] 
          {
            // binary expression: (%x2:s + %x2:t)
            ||[binary_49_inputs] 
            {
              // CP for expression: %x2:s
              // CP for expression: %x2:t
            }
            $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
          }
          // CP for expression: d
        }
        // end assignment statement assign_stmt_50
      }
      // end series block series_block_stmt_33
    }
    // end parallel block parallel_block_stmt_16
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %main%Compare%WithCall%x2
    //  file Calls.aa, line 16
    // constant-object-declarations for block %main%Compare%WithCall
    //  file Calls.aa, line 15
    // constant-object-declarations for block %main%Compare%WithoutCall%x2
    //  file Calls.aa, line 23
    // constant-object-declarations for block %main%Compare%WithoutCall
    //  file Calls.aa, line 22
    // constant-object-declarations for block %main%Compare
    //  file Calls.aa, line 14
    // constant-object-declarations for block %main
    //  file Calls.aa, line 10
    // constant-declarations for block %main%Compare
    //  file Calls.aa, line 14
    // constant-declarations for block %main%Compare%WithCall
    //  file Calls.aa, line 15
    // constant-declarations for block %main%Compare%WithCall%x2
    //  file Calls.aa, line 16
    // constant-declarations for block %main%Compare%WithoutCall
    //  file Calls.aa, line 22
    // constant-declarations for block %main%Compare%WithoutCall%x2
    //  file Calls.aa, line 23
    // wire-declarations for block %main%Compare
    //  file Calls.aa, line 14
    // wire-declarations for block %main%Compare%WithCall
    //  file Calls.aa, line 15
    // wire-declarations for block %main%Compare%WithCall%x2
    //  file Calls.aa, line 16
    // wire declarations for: 				$call sum_mod (a a ) (s )
    //  file Calls.aa, line 17
    $W[s_22] : $int<10>
    // wire declarations for: 				$call sum_mod (b b ) (t )
    //  file Calls.aa, line 18
    $W[t_26] : $int<10>
    // wire declarations for: 			$call sum_mod (%x2:s %x2:t ) (c )
    //  file Calls.aa, line 20
    // wire-declarations for block %main%Compare%WithoutCall
    //  file Calls.aa, line 22
    // wire-declarations for block %main%Compare%WithoutCall%x2
    //  file Calls.aa, line 23
    // wire-declarations for: 				s := (a + a) // type of target is $uint<10>
    //  file Calls.aa, line 24
    $W[s_39] : $int<10>
    // wire-declarations for: 				t := (b + b) // type of target is $uint<10>
    //  file Calls.aa, line 25
    $W[t_44] : $int<10>
    // wire-declarations for: 			d := (%x2:s + %x2:t) // type of target is $uint<10>
    //  file Calls.aa, line 27
    // datapath-instances for block %main%Compare
    //  file Calls.aa, line 14
    // datapath-instances for block %main%Compare%WithCall
    //  file Calls.aa, line 15
    // datapath-instances for block %main%Compare%WithCall%x2
    //  file Calls.aa, line 16
    // datapath instances for: 				$call sum_mod (a a ) (s )
    //  file Calls.aa, line 17
    $call [call_stmt_22_call] $module sum_mod(a a) (s_22)
    // datapath instances for: 				$call sum_mod (b b ) (t )
    //  file Calls.aa, line 18
    $call [call_stmt_26_call] $module sum_mod(b b) (t_26)
    // datapath instances for: 			$call sum_mod (%x2:s %x2:t ) (c )
    //  file Calls.aa, line 20
    $call [call_stmt_31_call] $module sum_mod(s_22 t_26) (c)
    // datapath-instances for block %main%Compare%WithoutCall
    //  file Calls.aa, line 22
    // datapath-instances for block %main%Compare%WithoutCall%x2
    //  file Calls.aa, line 23
    // data-path instances for: 				s := (a + a) // type of target is $uint<10>
    //  file Calls.aa, line 24
    // data-path-instances for expression: (a + a)
    +[binary_38_inst] (a a) (s_39)
    // data-path instances for: 				t := (b + b) // type of target is $uint<10>
    //  file Calls.aa, line 25
    // data-path-instances for expression: (b + b)
    +[binary_43_inst] (b b) (t_44)
    // data-path instances for: 			d := (%x2:s + %x2:t) // type of target is $uint<10>
    //  file Calls.aa, line 27
    // data-path-instances for expression: (%x2:s + %x2:t)
    +[binary_49_inst] (s_39 t_44) (d)
  }
  // end data-path
  // CP-DP links for block %main%Compare
  //  file Calls.aa, line 14
  // CP-DP links for block %main%Compare%WithCall
  //  file Calls.aa, line 15
  // CP-DP links for block %main%Compare%WithCall%x2
  //  file Calls.aa, line 16
  // CP-DP links for: 				$call sum_mod (a a ) (s )
  //  file Calls.aa, line 17
  call_stmt_22_call <=> (parallel_block_stmt_16/series_block_stmt_17/parallel_block_stmt_18/call_stmt_22/crr parallel_block_stmt_16/series_block_stmt_17/parallel_block_stmt_18/call_stmt_22/ccr) (parallel_block_stmt_16/series_block_stmt_17/parallel_block_stmt_18/call_stmt_22/cra parallel_block_stmt_16/series_block_stmt_17/parallel_block_stmt_18/call_stmt_22/cca)
  // CP-DP links for: 				$call sum_mod (b b ) (t )
  //  file Calls.aa, line 18
  call_stmt_26_call <=> (parallel_block_stmt_16/series_block_stmt_17/parallel_block_stmt_18/call_stmt_26/crr parallel_block_stmt_16/series_block_stmt_17/parallel_block_stmt_18/call_stmt_26/ccr) (parallel_block_stmt_16/series_block_stmt_17/parallel_block_stmt_18/call_stmt_26/cra parallel_block_stmt_16/series_block_stmt_17/parallel_block_stmt_18/call_stmt_26/cca)
  // CP-DP links for: 			$call sum_mod (%x2:s %x2:t ) (c )
  //  file Calls.aa, line 20
  call_stmt_31_call <=> (parallel_block_stmt_16/series_block_stmt_17/call_stmt_31/crr parallel_block_stmt_16/series_block_stmt_17/call_stmt_31/ccr) (parallel_block_stmt_16/series_block_stmt_17/call_stmt_31/cra parallel_block_stmt_16/series_block_stmt_17/call_stmt_31/cca)
  // CP-DP links for block %main%Compare%WithoutCall
  //  file Calls.aa, line 22
  // CP-DP links for block %main%Compare%WithoutCall%x2
  //  file Calls.aa, line 23
  // CP-DP links for: 				s := (a + a) // type of target is $uint<10>
  //  file Calls.aa, line 24
  // CP-DP links for expression: (a + a)
  binary_38_inst <=> (parallel_block_stmt_16/series_block_stmt_33/parallel_block_stmt_34/assign_stmt_39/binary_38/rr parallel_block_stmt_16/series_block_stmt_33/parallel_block_stmt_34/assign_stmt_39/binary_38/cr) (parallel_block_stmt_16/series_block_stmt_33/parallel_block_stmt_34/assign_stmt_39/binary_38/ra parallel_block_stmt_16/series_block_stmt_33/parallel_block_stmt_34/assign_stmt_39/binary_38/ca)
  // CP-DP links for: 				t := (b + b) // type of target is $uint<10>
  //  file Calls.aa, line 25
  // CP-DP links for expression: (b + b)
  binary_43_inst <=> (parallel_block_stmt_16/series_block_stmt_33/parallel_block_stmt_34/assign_stmt_44/binary_43/rr parallel_block_stmt_16/series_block_stmt_33/parallel_block_stmt_34/assign_stmt_44/binary_43/cr) (parallel_block_stmt_16/series_block_stmt_33/parallel_block_stmt_34/assign_stmt_44/binary_43/ra parallel_block_stmt_16/series_block_stmt_33/parallel_block_stmt_34/assign_stmt_44/binary_43/ca)
  // CP-DP links for: 			d := (%x2:s + %x2:t) // type of target is $uint<10>
  //  file Calls.aa, line 27
  // CP-DP links for expression: (%x2:s + %x2:t)
  binary_49_inst <=> (parallel_block_stmt_16/series_block_stmt_33/assign_stmt_50/binary_49/rr parallel_block_stmt_16/series_block_stmt_33/assign_stmt_50/binary_49/cr) (parallel_block_stmt_16/series_block_stmt_33/assign_stmt_50/binary_49/ra parallel_block_stmt_16/series_block_stmt_33/assign_stmt_50/binary_49/ca)
}
