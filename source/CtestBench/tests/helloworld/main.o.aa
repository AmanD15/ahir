// Aa code produced by llvm2aa (version 1.0)
$pipe inpipe : $uint<32>
$pipe midpipe : $uint<32>
$pipe outpipe : $uint<32>
$storage xx_xstr:$array [7] $of $uint<8>
$storage xx_xstr1:$array [8] $of $uint<8>
$storage xx_xstr2:$array [8] $of $uint<8>
$module [foo] 
$in (a : $uint<32> )
$out (ret_val__ : $uint<32>)
$is 
{
  $storage stored_ret_val__ : $uint<32>
  $branchblock [body] 
  {
    //begin: basic-block bb_0
    $storage iNsTr_0 : $uint<32>
    $storage b : $uint<32>
    iNsTr_0 := a
    iNsTr_2 := @(xx_xstr[_b00000000000000000000000000000000])
    iNsTr_3 := ($bitcast ($uint<32> ) inpipe ) 
    b := iNsTr_3
    // load 
    iNsTr_5 := iNsTr_0
    // load 
    iNsTr_6 := b
    iNsTr_7 := (iNsTr_5 + iNsTr_6)
    iNsTr_8 := @(xx_xstr1[_b00000000000000000000000000000000])
    midpipe := ($bitcast ( $uint<32> ) iNsTr_7 )
    // load 
    iNsTr_10 := iNsTr_0
    stored_ret_val__ := iNsTr_10
    $place [return__]
    $merge return__ $endmerge
    ret_val__ := stored_ret_val__ 
  }
}
$module [bar] 
$in (a : $uint<32> )
$out (ret_val__ : $uint<32>)
$is 
{
  $storage stored_ret_val__ : $uint<32>
  $branchblock [body] 
  {
    //begin: basic-block bb_0
    $storage iNsTr_0 : $uint<32>
    $storage b : $uint<32>
    iNsTr_0 := a
    iNsTr_2 := @(xx_xstr1[_b00000000000000000000000000000000])
    iNsTr_3 := ($bitcast ($uint<32> ) midpipe ) 
    b := iNsTr_3
    // load 
    iNsTr_5 := iNsTr_0
    // load 
    iNsTr_6 := b
    iNsTr_7 := (iNsTr_5 + iNsTr_6)
    iNsTr_8 := @(xx_xstr2[_b00000000000000000000000000000000])
    outpipe := ($bitcast ( $uint<32> ) iNsTr_7 )
    // load 
    iNsTr_10 := iNsTr_0
    stored_ret_val__ := iNsTr_10
    $place [return__]
    $merge return__ $endmerge
    ret_val__ := stored_ret_val__ 
  }
}
