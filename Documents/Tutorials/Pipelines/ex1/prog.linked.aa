$constant  ADDOP : $uint<8>:= 0  
$constant  MULOP : $uint<8>:= 2  
$constant  SUBOP : $uint<8>:= 1  
$pipe  in_data_pipe : $float<8,23>  $depth 2 
// can point into 
$pipe  out_data_pipe : $float<8,23>  $depth 2 
// can point into 
$pipeline $depth 1 $buffering 1 $fullrate $module [fpadd32]
$in ( L : $float<8,23>   R : $float<8,23>  )
$out ( ret_val_x_x : $float<8,23>  )
$is
{
  ret_val_x_x := (L + R)
}
$pipeline $depth 1 $buffering 1 $fullrate $module [fpadd64]
$in ( L : $float<11,52>   R : $float<11,52>  )
$out ( ret_val_x_x : $float<11,52>  )
$is
{
  ret_val_x_x := (L + R)
}
$pipeline $depth 1 $buffering 1 $fullrate $module [fpmul32]
$in ( L : $float<8,23>   R : $float<8,23>  )
$out ( ret_val_x_x : $float<8,23>  )
$is
{
  ret_val_x_x := (L * R)
}
$pipeline $depth 1 $buffering 1 $fullrate $module [fpmul64]
$in ( L : $float<11,52>   R : $float<11,52>  )
$out ( ret_val_x_x : $float<11,52>  )
$is
{
  ret_val_x_x := (L * R)
}
$pipeline $depth 1 $buffering 1 $fullrate $module [fpsub32]
$in ( L : $float<8,23>   R : $float<8,23>  )
$out ( ret_val_x_x : $float<8,23>  )
$is
{
  ret_val_x_x := (L - R)
}
$pipeline $depth 1 $buffering 1 $fullrate $module [fpsub64]
$in ( L : $float<11,52>   R : $float<11,52>  )
$out ( ret_val_x_x : $float<11,52>  )
$is
{
  ret_val_x_x := (L - R)
}
$pipeline $depth 1 $buffering 1 $fullrate $module [fpu32]
$in ( L : $float<8,23>   R : $float<8,23>   OP_ID : $uint<8>  )
$out ( ret_val_x_x : $float<8,23>  )
$is
{
  is_add := (OP_ID == ADDOP)
  is_sub := (OP_ID == SUBOP)
  is_mul := (OP_ID == MULOP)
  $guard (is_add) oadd := (L + R)
  $guard (is_sub) osub := (L - R)
  $guard (is_mul) omul := (L * R)
  ret_val_x_x := ( $mux is_add oadd  ( $mux is_sub osub  ( $mux is_mul omul  0  )  )  ) 
}
$pipeline $depth 1 $buffering 1 $fullrate $module [fpu64]
$in ( L : $float<11,52>   R : $float<11,52>   OP_ID : $uint<8>  )
$out ( ret_val_x_x : $float<11,52>  )
$is
{
  is_add := (OP_ID == ADDOP)
  is_sub := (OP_ID == SUBOP)
  is_mul := (OP_ID == MULOP)
  $guard (is_add) oadd := (L + R)
  $guard (is_sub) osub := (L - R)
  $guard (is_mul) omul := (L * R)
  ret_val_x_x := ( $mux is_add oadd  ( $mux is_sub osub  ( $mux is_mul omul  0  )  )  ) 
}
$module [progx_xoptx_xo_storage_initializer_]
$in ()
$out ()
$is
{
  $null
  $attribute initializer 
}
$module [global_storage_initializer_]
$in ()
$out ()
$is
{
  $parallelblock[pb]
  {
    $call progx_xoptx_xo_storage_initializer_ () () 
  }
}
$module [vectorSum]
$in ()
$out ()
$is
{
  $branchblock [body]
  {
    $place[bb_0_bb_1]
    $merge bb_0_bb_1 
    $endmerge
    $dopipeline $depth 63 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $endmerge
    iNsTr_3 := in_data_pipe
    iNsTr_4 := (iNsTr_3 + iNsTr_3)
    iNsTr_5 := (iNsTr_3 * iNsTr_4)
    out_data_pipe := iNsTr_5
    $while 1 
  }
}
