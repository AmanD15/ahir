$pipe in_data  : $uint<32> $depth 2
$pipe out_data : $uint<32> $depth 2

$storage M: $array [1024] $of $uint<128>
$storage X: $array [16] $of $uint<128>

$module [matrix_vector_daemon] $in () $out ()  $is
{
	// first collect the matrix.
	$branchblock[Init] {
		$merge $entry loopback 
		 $phi COUNT := ($bitcast ($uint<16>) 0) 
					$on $entry NCOUNT $on loopback
		$endmerge

		w0 := in_data
		w1 := in_data
		w2 := in_data
		w3 := in_data

		M[COUNT] := ($concat w0 w1 w2 w3)

		NCOUNT := (COUNT + 1)

		$if (NCOUNT < 4096) $then
			$place [loopback]
		$endif
			
	}

	$branchblock[Compute]
	{
		$merge $entry collectloop 
			$phi IDX := ($bitcast ($uint<16>) 0)
					 $on $entry NIDX $on collectloop
		$endmerge

		w0 := in_data
		w1 := in_data
		w2 := in_data
		w3 := in_data
	
		X[IDX] := ($concat w0 w1 w2 w3)
		
		NIDX := (IDX + 1)

		$if (NIDX < 16) $then
			$place collectloop
		$endif

		// do the multiplication..
		$merge $entry outerloopback 
			$phi RDX := ($bitcast ($uint<16>) 0)
					 $on $entry NRDX $on outerloopback
		$endmerge 

		$dopipeline $depth 8 $buffering 1
			$merge $entry $loopback 
				$phi CDX := ($bitcast ($uint<8>) 0)
						$on $entry NCDX $on $loopback
				$phi RV := _f0,0  $on $entry NRV $on $loopback
			$endmerge 
			NCDX := (CDX + 1)

			MV := M[(16*RDX)+CDX]
			XV := X[CDX]
	

			$volatile $split (MV 32 32 32 32)
						(m0 m1 m2 m3)
			$volatile $split (XV 32 32 32 32)
						(x0 x1 x2 x3)

			$volatile fm0 := ($bitcast ($float<8,23>) m0)
			$volatile fm1 := ($bitcast ($float<8,23>) m1)
			$volatile fm2 := ($bitcast ($float<8,23>) m2)
			$volatile fm3 := ($bitcast ($float<8,23>) m3)

			$volatile fx0 := ($bitcast ($float<8,23>) x0)
			$volatile fx1 := ($bitcast ($float<8,23>) x1)
			$volatile fx2 := ($bitcast ($float<8,23>) x2)
			$volatile fx3 := ($bitcast ($float<8,23>) x3)

			NRV := (RV + (((fm0*fx0) + (fm1*fx1)) + 
						((fm2*fx2) + (fm3*fx3))))
		$while (NCDX < 16)

		out_data := RV

		NRDX := (RDX + 1)
		$if (NRDX < 64 ) $then $place [outerloopback] $endif

	}
}
