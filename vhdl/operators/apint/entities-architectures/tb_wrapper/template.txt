# Each line contains the following sequence of strings
# operator operator_id operator_type input_data_width output_data_width 
#
# This script generates one file TB_wrapper.vhd which contains instances of
# <operator_type>_TB 
# 
# Corresponding to each line, 3 instances of testbench with varying 
# number of requesters are created.
# 
# The contents of this file are:
#
# library ieee;
# use ieee.std_logic_1164.all;
# use ieee.numeric_std.all;
# 
# library ahir;
# use ahir.Types.all;
# use ahir.Subprograms.all;
# use ahir.Utilities.all;
# use ahir.BaseComponents.all;
# 
# entity TB_wrapper is
#   port
#     (all_tests_succeeded : out boolean;
#      all_tests_evaluated : out boolean);
# end TB_wrapper;
# 
# architecture Behave of TB_wrapper is
#   signal done_flag    : BooleanArray(2 downto 0);
#   signal success_flag : BooleanArray(2 downto 0);
# 
# begin
# 
#   tb0 : <operator_type>_TB generic map(g_num_req           => 1,
# 				 g_input_data_width  => <input_data_width>,
# 				 g_output_data_width => <output_data_width>,
# 				 verbose_mode        => false,
# 				 operator_id         => "<operator_id>",
# 				 tb_id               => "<operator> num_req=1"
# 				 )
#     port map
#     (all_tests_succeeded => success_flag(0),
#      all_tests_evaluated => done_flag(0));
# 
#   tb1 : <operator_type>_TB generic map(g_num_req           => 2,
# 				 g_input_data_width  => <input_data_width>,
# 				 g_output_data_width => <output_data_width>,
# 				 verbose_mode        => false,
# 				 operator_id         => "<operator_id>",
# 				 tb_id               => "<operator> num_req=2"
# 				 )
#     port map
#     (all_tests_succeeded => success_flag(1),
#      all_tests_evaluated => done_flag(1));
# 
#   tb2 : <operator_type>_TB generic map(g_num_req           => 5,
# 				 g_input_data_width  => <input_data_width>,
# 				 g_output_data_width => <output_data_width>,
# 				 verbose_mode        => false,
# 				 operator_id         => "<operator_id>",
# 				 tb_id               => "<operator> num_req=5"
# 				 )
#     port map
#     (all_tests_succeeded => success_flag(2),
#      all_tests_evaluated => done_flag(2));
# 
#   process(done_flag)
#   begin
#     if(AndReduce(done_flag))then
#       all_tests_evaluated <= true;
#       if(AndReduce(success_flag)) then
# 	assert false report "All Tests Have Passed  " severity note;
# 	all_tests_succeeded <= true;
#       else
# 	assert false report "Some Tests Have Failed " severity error;
# 	all_tests_succeeded <= false;
#       end if;
#     else
#       all_tests_evaluated <= false;
#     end if;
#   end process;
# 
# end Behave;
# 
# -------------------------------------------------------
# configuration conf_TB of TB_wrapper is
# 
#   for Behave
#     for tb0 : <operator_type>_TB
#       for Behave
# 	for op2 : <operator_type>
# 	  use configuration ahir.<operator>;
# 	end for;
#       end for;
#     end for;
#     for tb1 : <operator_type>_TB
#       for Behave
# 	for op2 : <operator_type>
# 	  use configuration ahir.<operator>;
# 	end for;
#       end for;
#     end for;
#     for tb2 : <operator_type>_TB
#       for Behave
# 	for op2 : <operator_type>
# 	  use configuration ahir.<operator>;
# 	end for;
#       end for;
#     end for;
#   end for;
# 
# end conf_TB;
# -------------------------------------------------------
# -------------------------------------------------------
# -------------------------------------------------------
# e.g.
#       ApIntAdd ApInt_S_2  8 8 
# -------------------------------------------------------
#
# library ieee;        
# use ieee.std_logic_1164.all;        
# use ieee.numeric_std.all;        
#	 
# library ahir;        
# use ahir.Types.all;        
# use ahir.Subprograms.all;        
# use ahir.Utilities.all;        
# use ahir.BaseComponents.all;        
#  
# entity TB_wrapper is        
#   port        
#     (all_tests_succeeded : out boolean;        
#      all_tests_evaluated : out boolean);        
# end TB_wrapper;        
# 
# architecture Behave of TB_wrapper is        
#   signal done_flag    : BooleanArray(2 downto 0);        
#   signal success_flag : BooleanArray(2 downto 0);        
#	 
# begin        
#  
#   tb0 : ApInt_S_2_TB generic map(g_num_req           => 1,        
#			       g_input_data_width  => 8,        
#			       g_output_data_width => 8,        
#			       verbose_mode        => false,        
#			       operator_id         => "ApIntAdd",        
#			       tb_id               => "ApIntAdd num_req=1"        
#			       )        
#     port map        
#     (all_tests_succeeded => success_flag(0),        
#      all_tests_evaluated => done_flag(0));        
#	 
#   tb1 : ApInt_S_2_TB generic map(g_num_req           => 2,        
#			       g_input_data_width  => 8,        
#			       g_output_data_width => 8,        
#			       verbose_mode        => false,        
#			       operator_id         => "ApIntAdd",        
#			       tb_id               => "ApIntAdd num_req=2"        
#			       )        
#     port map        
#     (all_tests_succeeded => success_flag(1),        
#      all_tests_evaluated => done_flag(1));        
#	 
#   tb2 : ApInt_S_2_TB generic map(g_num_req           => 5,        
#			       g_input_data_width  => 8,        
#			       g_output_data_width => 8,        
#			       verbose_mode        => false,        
#			       operator_id         => "ApIntAdd",        
#			       tb_id               => "ApIntAdd num_req=5"        
#			       )        
#     port map        
#     (all_tests_succeeded => success_flag(2),        
#      all_tests_evaluated => done_flag(2));        
#  
#   process(done_flag)        
#   begin        
#     if(AndReduce(done_flag))then        
#       all_tests_evaluated <= true;        
#       if(AndReduce(success_flag)) then        
#      assert false report "All Tests Have Passed  " severity note;        
#      all_tests_succeeded <= true;        
#       else        
#      assert false report "Some Tests Have Failed " severity error;        
#      all_tests_succeeded <= false;        
#       end if;        
#     else        
#       all_tests_evaluated <= false;        
#     end if;        
#   end process;        
#	 
# end Behave;        
#	 
# -------------------------------------------------------        
# configuration conf_TB of TB_wrapper is        
#	 
#   for Behave 
#     for tb0 : ApInt_S_2_TB        
#       for Behave        
#	 for op2 : ApInt_S_2        
#	   use configuration ahir.ApIntAdd;        
#	 end for;        
#       end for;        
#     end for;	
#     for tb1 : ApInt_S_2_TB        
#       for Behave        
#	 for op2 : ApInt_S_2        
#	   use configuration ahir.ApIntAdd;        
#	 end for;        
#       end for;        
#     end for; 	
#     for tb2 : ApInt_S_2_TB        
#       for Behave        
#	 for op2 : ApInt_S_2        
#	   use configuration ahir.ApIntAdd;        
#	 end for;        
#       end for;        
#     end for;
#   end for;        
#	 
# end conf_TB;
# -------------------------------------------------------
#single input
ApIntNot ApIntNot ApInt_S_1 8 8 
ApIntToApIntSigned ApIntToApIntSigned ApInt_S_1 8 8 
ApIntToApIntUnsigned ApIntToApIntUnsigned ApInt_S_1  8 8
#two inputs without constant 
ApIntAdd 	ApIntAdd       ApInt_S_2  8 8
ApIntSub        ApIntSub       ApInt_S_2  8 8
ApIntAnd        ApIntAnd       ApInt_S_2  8 8
ApIntOr         ApIntOr        ApInt_S_2  8 8
ApIntXor        ApIntXor       ApInt_S_2  8 8
ApIntMul        ApIntMul       ApInt_S_2  8 8
ApIntSHL        ApIntSHL       ApInt_S_2  8 8
ApIntLSHR       ApIntLSHR      ApInt_S_2  8 8
ApIntASHR       ApIntASHR      ApInt_S_2  8 8
ApIntEq         ApIntEq        ApInt_S_2  8 1
ApIntNe         ApIntNe        ApInt_S_2  8 1
ApIntUgt        ApIntUgt       ApInt_S_2  8 1
ApIntUge        ApIntUge       ApInt_S_2  8 1
ApIntUlt        ApIntUlt       ApInt_S_2  8 1
ApIntUle        ApIntUle       ApInt_S_2  8 1
ApIntSgt        ApIntSgt       ApInt_S_2  8 1
ApIntSge        ApIntSge       ApInt_S_2  8 1
ApIntSlt        ApIntSlt       ApInt_S_2  8 1
ApIntSle        ApIntSle       ApInt_S_2  8 1
#two inputs with constants
ApIntAddC       ApIntAdd       ApInt_S_2_C 8 8  
ApIntSubC       ApIntSub       ApInt_S_2_C 8 8  
ApIntAndC       ApIntAnd       ApInt_S_2_C 8 8  
ApIntOrC        ApIntOr        ApInt_S_2_C 8 8  
ApIntXorC       ApIntXor       ApInt_S_2_C 8 8  
ApIntMulC       ApIntMul       ApInt_S_2_C 8 8  
ApIntSHLC       ApIntSHL       ApInt_S_2_C 8 8  
ApIntLSHRC      ApIntLSHR      ApInt_S_2_C 8 8  
ApIntASHRC      ApIntASHR      ApInt_S_2_C 8 8  
ApIntEqC        ApIntEq        ApInt_S_2_C 8 1  
ApIntNeC        ApIntNe        ApInt_S_2_C 8 1  
ApIntUgtC       ApIntUgt       ApInt_S_2_C 8 1  
ApIntUgeC       ApIntUge       ApInt_S_2_C 8 1  
ApIntUltC       ApIntUlt       ApInt_S_2_C 8 1  
ApIntUleC       ApIntUle       ApInt_S_2_C 8 1  
ApIntSgtC       ApIntSgt       ApInt_S_2_C 8 1  
ApIntSgeC       ApIntSge       ApInt_S_2_C 8 1  
ApIntSltC       ApIntSlt       ApInt_S_2_C 8 1  
ApIntSleC       ApIntSle       ApInt_S_2_C 8 1  
