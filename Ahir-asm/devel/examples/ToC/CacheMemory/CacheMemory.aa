// a simple example.. of a direct-mapped cache
// 
// the module listens for requests by calling a foreign
// function Fetch which returns a pointer
// 
// the request is classified as a read/write (using
// a foreign function Is_Read_Access)
//
// the address and/or data for the request is accessed
// from the pointer (using foreign functions)
//
// hit/miss is figured out and reported using foreign
// functions.

$storage g_data_array $array<4>  $of $uint<32>

$module [cachememory]
	$in()
	$out()
$is
{

	// array
	$storage addr_array  $array<4> $of $uint<8>
	$storage valid_array $array<4> $of $uint<1>
	$storage data_array $array<4>  $of $uint<32>

	// 2 bits, so 4 locations.
        $constant map_mask $uint<8> := 3 // bottom two bits

	// internal pipes.
	$pipe write_address_pipe $uint<8>
	$pipe write_data_pipe    $uint<32>
	$pipe read_address_pipe  $uint<8>

	$branchblock[init]{
		$storage I $uint<2> := 0
		$merge $entry loopback $endmerge
		addr_array[I] := 0
		data_array[I] := 0
		valid_array[I] := 0
		$if (I < 3) $then
			I := (I + 1)
			$place [loopback]
		$endif
	}

	$parallelblock[p1]
	{
		$branchblock[reader] {
			// keep looping, waiting for requests
			$merge $entry loopback $endmerge
			$call Fetch()(req_pointer)

			$call Is_Read_Access(req_pointer)(is_read)
			$if is_read $then
                           	$call Access_Address(req_pointer)(read_address_pipe)
			$else
				$parallelblock[extwrite] {
                           		$call Access_Address(req_pointer)(write_address_pipe)
                           		$call Access_Data(req_pointer)(write_data_pipe)
				}
			$endif
			$place [loopback]
		}
		$branchblock[writeport]
		{
			$storage write_data    $uint<32>
			$storage write_address $uint<8>

			$merge $entry loopback $endmerge
			$parallelblock[getdetails] {
				write_address := write_address_pipe
				write_data    := write_data_pipe
			}
			addr := (write_address & map_mask)
			$if valid_array[addr] $then
				$if (addr_array[addr] == write_address) $then
					// hit.
					data_array[addr] := write_data
					$call Write_Hit(write_address)()
				$else
					// miss
					$call Write_Miss(write_address)()
				$endif
			$else
				// hit
				data_array[addr] := write_data
				valid_array[addr] := 1
				addr_array[addr]  := write_address
				$call Write_Hit(write_address)()
			$endif
			$place [loopback]
		}
		$branchblock[readport]
		{
			$storage read_address $uint<8>

			$merge $entry loopback $endmerge
			read_address := read_address_pipe
			addr := (read_address & map_mask)
			$if valid_array[addr] $then
				$if (addr_array[addr] == read_address) $then
					// hit.
					$call Read_Hit(read_address data_array[addr])()
				$else
					// miss
					$call Read_Miss(read_address)()
				$endif
			$else
				// hit
				$call Read_Miss(read_address)()
			$endif
			$place [loopback]
		}
	}
}

$foreign $module [Fetch] 
	$in ()
	$out (req $pointer<32>)

$foreign $module [Is_Read_Access] 
	$in (req $pointer<32>)
	$out (flag $uint<1>)

$foreign $module [Access_Address] 
	$in (req $pointer<32>)
	$out (addr $uint<8>)

$foreign $module [Access_Data] 
	$in (req $pointer<32>)
	$out (data $uint<32>)

$foreign $module [Write_Hit] 
	$in (addr $uint<8>)
	$out ()

$foreign $module [Write_Miss] 
	$in (addr $uint<8>)
	$out ()

$foreign $module [Read_Miss] 
	$in (addr $uint<8>)
	$out ()

$foreign $module [Read_Hit] 
	$in (addr $uint<8> data $uint<32>)
	$out ()
