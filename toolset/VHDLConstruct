
# VHDLConstruct: An scons script that generates VHDL from one or more
# C files containing the input program.

# Usage: scons -f path/to/VHDLConstruct

# To use this script, either make a copy of it in your directory, or
# reference it from its original location. Remember to edit the script
# so that the first variable ``AHIR'' points to the root of the AHIR
# working copy (i.e., ``AHIR'' points to the directory that is the
# parent of the ``toolset'' directory.)

# For every .c file encountered in the current directory, the script
# runs the entire toolchain, ending with various .bc, .txt, .xml,
# .vhdl files. The script is aware of all the files being generated
# and can clean them up when invoked with the usual `-c' argument to
# scons. If the intention is to process only some selected .c files,
# then replace the call to ``Glob'' in the last line of this script
# with a list of the required files.

import re

AHIR = '../..'
TOOLS = AHIR + '/toolset/tools'

env = Environment()

_llvm = Builder(action = 'llvmc -emit-llvm -o $TARGET -c $SOURCE'
                , suffix = '.bc.unopt'
                , src_suffix = '.c')
env.Append(BUILDERS = {'Llvm' : _llvm})

_llvm_opt = Builder(action = 'opt -std-compile-opts -disable-inlining -lowerswitch -instnamer $SOURCE -o $TARGET'
                    , suffix = '.bc'
                    , src_suffix = '.bc.unopt')
env.Append(BUILDERS = {'LlvmOpt' : _llvm_opt})

def append_assembly_target(target, source, env):
    """Append the assembly .txt target generated by llvm2cdfg"""
    target.append(str(source[0]) + '.txt')
    return target, source

_cdfg = Builder(action = TOOLS + '/llvm2cdfg/llvm2cdfg $SOURCE'
                , suffix = '.cdfg.xml'
                , src_suffix = '.bc'
                , emitter = append_assembly_target)
env.Append(BUILDERS = {'Cdfg' : _cdfg})

_ahir = Builder(action = TOOLS + '/cdfg2ahir/cdfg2ahir $SOURCE'
                , suffix = '.ahir.xml'
                , src_suffix = '.cdfg.xml')
env.Append(BUILDERS = {'Ahir' : _ahir})

_ahir_linker = Builder(action = TOOLS + '/link-ahir/link-ahir $SOURCE'
                       , suffix = '.linked_ahir.xml'
                       , src_suffix = '.ahir.xml')
env.Append(BUILDERS = {'AhirLinker' : _ahir_linker})

_ahir_reuse = Builder(action = TOOLS + '/analyse-ahir/analyse-ahir --reuse $SOURCE'
                      , suffix = '.ahir_shared.xml'
                      , src_suffix = '.linked_ahir.xml')
env.Append(BUILDERS = {'AhirReuse' : _ahir_reuse})

def scan_for_components(target, source, env):
    """Scan AHIR XML to identify additional vhdl files created per module"""
    component_re = re.compile(r'id=\"(.*_(?:cp|dp|ln))\"')
    contents = source[0].get_contents()
    target.append(map(lambda x : x + ".vhdl", component_re.findall(contents)))
    target.append(str(source[0]).replace(".ahir_shared.xml", "_memory_init.txt"))
    return target, source

_vhdl = Builder(action = TOOLS + '/ahir2vhdl/ahir2vhdl $SOURCE'
                , src_suffix = '.ahir_shared.xml'
                , suffix = '_system.vhdl'
                , emitter = scan_for_components)
env.Append(BUILDERS = {'Vhdl' : _vhdl})

def C2VHDL(env, source):
    """Execute the entire flow from C program to VHDL netlists"""
    for x in map(lambda x : str(x).replace(".c", ""), source):
        env.Llvm(x)
        env.LlvmOpt(x)
        env.Cdfg(x)
        env.Ahir(x)
        env.AhirLinker(x)
        env.AhirReuse(x)
        env.Vhdl(x)

AddMethod(Environment, C2VHDL)

env.C2VHDL(Glob('*.c'))

