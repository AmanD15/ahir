// Virtual circuit produced from Aa description by Aa2VC 
// $pipe  in_data : $uint<8>  $depth 2 
// can point into 
// in scope  top-level
$pipe [in_data] 8 $depth 2
// $pipe  out_data : $uint<8>  $depth 2 
// can point into 
// in scope  top-level
$pipe [out_data] 8 $depth 2
$module [counter] 
{
  // pipe-declarations for block %counter
  //  file prog.aa, line 4
  // pipe-declarations for block %counter%fsm
  //  file prog.aa, line 7
  // pipe-declarations for block %counter%fsm%
  //  file prog.aa, line 11
  // pipe-declarations for block %counter%fsm%pb
  //  file prog.aa, line 17
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_4] // Branch Block  file prog.aa, line 7
    {
      $P [branch_block_stmt_4__entry__]
      branch_block_stmt_4__entry__ <-| ($entry)
      $P [branch_block_stmt_4__exit__]
      branch_block_stmt_4__exit__ |-> ($exit)
      $P [merge_stmt_10__entry__] 
      $P [merge_stmt_10__exit__] 
      $P [assign_stmt_22__entry__] 
      $P [assign_stmt_22__exit__] 
      $P [parallel_block_stmt_23__entry__] 
      $P [parallel_block_stmt_23__exit__] 
      $P [loopback]
      ::[assign_stmt_22] 
      {
        // 		in_symbol := in_data
        //  file prog.aa, line 16
        $T[assign_stmt_22_active_] 
        $T[assign_stmt_22_completed_] 
        // in_data
        $T[simple_obj_ref_21_trigger_] 
        ;;[simple_obj_ref_21_complete] 
        {
          // pipe read
          $T [req] $T [ack] 
        }
        simple_obj_ref_21_trigger_ &-> (simple_obj_ref_21_complete)
        assign_stmt_22_active_ <-& (simple_obj_ref_21_complete)
        // in_symbol
        // implicit reference
        assign_stmt_22_completed_ <-& (assign_stmt_22_active_)
        // load-store dependencies..
        // pipe read/write dependencies for pipe in_data
      }
      assign_stmt_22__entry__ |-> (assign_stmt_22)
      assign_stmt_22__exit__ <-| (assign_stmt_22)
      ||[parallel_block_stmt_23] 
      {
        ::[assign_stmt_31] 
        {
          // 			ns0 := ((in_symbol [] 0 ) ^ s0)
          //  file prog.aa, line 19
          $T[assign_stmt_31_active_] 
          $T[assign_stmt_31_completed_] 
          // ((in_symbol [] 0 ) ^ s0)
          $T[binary_30_active_] 
          $T[binary_30_trigger_] 
          binary_30_active_ <-& (binary_30_trigger_)
          // (in_symbol [] 0 )
          $T[binary_27_active_] 
          $T[binary_27_trigger_] 
          binary_27_active_ <-& (binary_27_trigger_)
          // in_symbol
          // implicit reference
          $T[simple_obj_ref_25_complete] 
          binary_27_active_ <-& (simple_obj_ref_25_complete)
          ;;[binary_27_complete] 
          {
            // binary expression 
            $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
          }
          binary_27_active_ &-> (binary_27_complete)
          // s0
          // implicit reference
          $T[simple_obj_ref_29_complete] 
          binary_30_active_ <-& (binary_27_complete)
          binary_30_active_ <-& (simple_obj_ref_29_complete)
          ;;[binary_30_complete] 
          {
            // binary expression 
            $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
          }
          binary_30_active_ &-> (binary_30_complete)
          assign_stmt_31_active_ <-& (binary_30_complete)
          // ns0
          // implicit reference
          assign_stmt_31_completed_ <-& (assign_stmt_31_active_)
          // load-store dependencies..
        }
        ::[assign_stmt_40] 
        {
          // 			ns1 := (((in_symbol [] 0 ) & s0) ^ s1)
          //  file prog.aa, line 20
          $T[assign_stmt_40_active_] 
          $T[assign_stmt_40_completed_] 
          // (((in_symbol [] 0 ) & s0) ^ s1)
          $T[binary_39_active_] 
          $T[binary_39_trigger_] 
          binary_39_active_ <-& (binary_39_trigger_)
          // ((in_symbol [] 0 ) & s0)
          $T[binary_37_active_] 
          $T[binary_37_trigger_] 
          binary_37_active_ <-& (binary_37_trigger_)
          // (in_symbol [] 0 )
          $T[binary_35_active_] 
          $T[binary_35_trigger_] 
          binary_35_active_ <-& (binary_35_trigger_)
          // in_symbol
          // implicit reference
          $T[simple_obj_ref_33_complete] 
          binary_35_active_ <-& (simple_obj_ref_33_complete)
          ;;[binary_35_complete] 
          {
            // binary expression 
            $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
          }
          binary_35_active_ &-> (binary_35_complete)
          // s0
          // implicit reference
          $T[simple_obj_ref_36_complete] 
          binary_37_active_ <-& (binary_35_complete)
          binary_37_active_ <-& (simple_obj_ref_36_complete)
          ;;[binary_37_complete] 
          {
            // binary expression 
            $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
          }
          binary_37_active_ &-> (binary_37_complete)
          // s1
          // implicit reference
          $T[simple_obj_ref_38_complete] 
          binary_39_active_ <-& (binary_37_complete)
          binary_39_active_ <-& (simple_obj_ref_38_complete)
          ;;[binary_39_complete] 
          {
            // binary expression 
            $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
          }
          binary_39_active_ &-> (binary_39_complete)
          assign_stmt_40_active_ <-& (binary_39_complete)
          // ns1
          // implicit reference
          assign_stmt_40_completed_ <-& (assign_stmt_40_active_)
          // load-store dependencies..
        }
        ::[assign_stmt_47] 
        {
          // 			out_data := (z6 && (s1 && s0))
          //  file prog.aa, line 21
          $T[assign_stmt_47_active_] 
          $T[assign_stmt_47_completed_] 
          // (z6 && (s1 && s0))
          $T[binary_46_active_] 
          $T[binary_46_trigger_] 
          binary_46_active_ <-& (binary_46_trigger_)
          // (s1 && s0)
          $T[binary_45_active_] 
          $T[binary_45_trigger_] 
          binary_45_active_ <-& (binary_45_trigger_)
          // s1
          // implicit reference
          $T[simple_obj_ref_43_complete] 
          // s0
          // implicit reference
          $T[simple_obj_ref_44_complete] 
          binary_45_active_ <-& (simple_obj_ref_43_complete)
          binary_45_active_ <-& (simple_obj_ref_44_complete)
          ;;[binary_45_complete] 
          {
            // binary expression 
            $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
          }
          binary_45_active_ &-> (binary_45_complete)
          binary_46_active_ <-& (binary_45_complete)
          ;;[binary_46_complete] 
          {
            // binary expression 
            $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
          }
          binary_46_active_ &-> (binary_46_complete)
          assign_stmt_47_active_ <-& (binary_46_complete)
          // out_data
          $T[simple_obj_ref_41_trigger_] 
          ;;[simple_obj_ref_41_complete] 
          {
            // pipe write out_data
            $T [pipe_wreq] $T [pipe_wack] 
          }
          simple_obj_ref_41_trigger_ &-> (simple_obj_ref_41_complete)
          simple_obj_ref_41_trigger_ <-& (assign_stmt_47_active_)
          assign_stmt_47_completed_ <-& (simple_obj_ref_41_complete)
          // load-store dependencies..
          // pipe read/write dependencies for pipe out_data
        }
      }
      parallel_block_stmt_23__entry__ |-> (parallel_block_stmt_23)
      parallel_block_stmt_23__exit__ <-| (parallel_block_stmt_23)
      // control-path for merge  
      //  file prog.aa, line 11
      ;;[merge_stmt_10_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_10__entry__ |-> (merge_stmt_10_dead_link)
      merge_stmt_10__exit__ <-| (merge_stmt_10_dead_link)
      //---------------------   merge statement  file prog.aa, line 11  --------------------------
      ||[merge_stmt_10__entry___PhiReq] 
      {
        ;;[phi_stmt_11] 
        {
          ||[phi_stmt_11_sources] 
          {
            // sources for 			$phi s0 := 			  0  $on $entry			  ns0 $on loopback // type of target is $uint<1>
          }
          $T [phi_stmt_11_req] 
        }
        ;;[phi_stmt_15] 
        {
          ||[phi_stmt_15_sources] 
          {
            // sources for 			$phi s1 := 			  0  $on $entry			  ns1 $on loopback // type of target is $uint<1>
          }
          $T [phi_stmt_15_req] 
        }
      }
      merge_stmt_10__entry__ |-> (merge_stmt_10__entry___PhiReq)
      ||[loopback_PhiReq] 
      {
        ;;[phi_stmt_11] 
        {
          ||[phi_stmt_11_sources] 
          {
            // sources for 			$phi s0 := 			  0  $on $entry			  ns0 $on loopback // type of target is $uint<1>
          }
          $T [phi_stmt_11_req] 
        }
        ;;[phi_stmt_15] 
        {
          ||[phi_stmt_15_sources] 
          {
            // sources for 			$phi s1 := 			  0  $on $entry			  ns1 $on loopback // type of target is $uint<1>
          }
          $T [phi_stmt_15_req] 
        }
      }
      loopback |-> (loopback_PhiReq)
      $P [merge_stmt_10_PhiReqMerge] 
      merge_stmt_10_PhiReqMerge <-| ( merge_stmt_10__entry___PhiReq  loopback_PhiReq )
      ||[merge_stmt_10_PhiAck] 
      {
        $T [phi_stmt_11_ack] 
        $T [phi_stmt_15_ack] 
      }
      merge_stmt_10_PhiReqMerge |-> (merge_stmt_10_PhiAck)
      merge_stmt_10__exit__  <-| (merge_stmt_10_PhiAck)
      //---------------------  end of merge statement  file prog.aa, line 11  --------------------------
      merge_stmt_10__entry__ <-| (branch_block_stmt_4__entry__)
      assign_stmt_22__entry__ <-| (merge_stmt_10__exit__)
      parallel_block_stmt_23__entry__ <-| (assign_stmt_22__exit__)
      loopback <-| (parallel_block_stmt_23__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %counter%fsm%
    //  file prog.aa, line 11
    // constant-object-declarations for block %counter%fsm%pb
    //  file prog.aa, line 17
    // constant-object-declarations for block %counter%fsm
    //  file prog.aa, line 7
    $constant $W[xxcounterxxfsmxxz6] : $int<6> := _b000000// 0
    // constant-object-declarations for block %counter
    //  file prog.aa, line 4
    // constant-declarations for block %counter%fsm
    //  file prog.aa, line 7
    $constant $W[xxcounterxxfsmxxz6] : $int<6> := _b000000// 0
    // constant-declarations for block %counter%fsm%
    //  file prog.aa, line 11
    // constant-declarations for phi:  			$phi s0 := 			  0  $on $entry			  ns0 $on loopback // type of target is $uint<1>
    //  file prog.aa, line 12
    // 0 
    $constant $W[expr_13_wire_constant] : $int<1> := _b0// 0
    // constant-declarations for phi:  			$phi s1 := 			  0  $on $entry			  ns1 $on loopback // type of target is $uint<1>
    //  file prog.aa, line 13
    // 0 
    $constant $W[expr_17_wire_constant] : $int<1> := _b0// 0
    // constant-declarations for block %counter%fsm%pb
    //  file prog.aa, line 17
    // 0 
    $constant $W[expr_26_wire_constant] : $int<8> := _b00000000// 0
    // 0 
    $constant $W[expr_34_wire_constant] : $int<8> := _b00000000// 0
    // z6
    $constant $W[simple_obj_ref_42_wire_constant] : $int<6> := _b000000// 0
    // block %counter%fsm
    //  file prog.aa, line 7
    // merge-statement  
    //  file prog.aa, line 11
    // 			$phi s0 := 			  0  $on $entry			  ns0 $on loopback // type of target is $uint<1>
    //  file prog.aa, line 12
    // s0
    $W[s0_11] : $int<1>
    // 			$phi s1 := 			  0  $on $entry			  ns1 $on loopback // type of target is $uint<1>
    //  file prog.aa, line 13
    // s1
    $W[s1_15] : $int<1>
    // 		in_symbol := in_data
    //  file prog.aa, line 16
    // in_symbol
    $W[in_symbol_22] : $int<8>
    // block %counter%fsm%pb
    //  file prog.aa, line 17
    // 			ns0 := ((in_symbol [] 0 ) ^ s0)
    //  file prog.aa, line 19
    // (in_symbol [] 0 )
    $intermediate $W[binary_27_wire] : $int<1>
    // ns0
    $W[ns0_31] : $int<1>
    // 			ns1 := (((in_symbol [] 0 ) & s0) ^ s1)
    //  file prog.aa, line 20
    // (in_symbol [] 0 )
    $intermediate $W[binary_35_wire] : $int<1>
    // ((in_symbol [] 0 ) & s0)
    $intermediate $W[binary_37_wire] : $int<1>
    // ns1
    $W[ns1_40] : $int<1>
    // 			out_data := (z6 && (s1 && s0))
    //  file prog.aa, line 21
    // (s1 && s0)
    $intermediate $W[binary_45_wire] : $int<2>
    // (z6 && (s1 && s0))
    $intermediate $W[binary_46_wire] : $int<8>
    // out_data
    // datapath-instances for block %counter%fsm
    //  file prog.aa, line 7
    // data-path instances for merge  
    //  file prog.aa, line 11
    // 			$phi s0 := 			  0  $on $entry			  ns0 $on loopback // type of target is $uint<1>
    //  file prog.aa, line 12
    $phi [phi_stmt_11] (expr_13_wire_constant ns0_31) ( s0_11 )
    // 			$phi s1 := 			  0  $on $entry			  ns1 $on loopback // type of target is $uint<1>
    //  file prog.aa, line 13
    $phi [phi_stmt_15] (expr_17_wire_constant ns1_40) ( s1_15 )
    // 		in_symbol := in_data
    //  file prog.aa, line 16
    // in_data
    $ioport $in [simple_obj_ref_21_inst] (in_data) (in_symbol_22)
    // datapath-instances for block %counter%fsm%pb
    //  file prog.aa, line 17
    // 			ns0 := ((in_symbol [] 0 ) ^ s0)
    //  file prog.aa, line 19
    // (in_symbol [] 0 )
    [][binary_27_inst] (in_symbol_22 expr_26_wire_constant) (binary_27_wire)
    // ((in_symbol [] 0 ) ^ s0)
    ^[binary_30_inst] (binary_27_wire s0_11) (ns0_31)
    // 			ns1 := (((in_symbol [] 0 ) & s0) ^ s1)
    //  file prog.aa, line 20
    // (in_symbol [] 0 )
    [][binary_35_inst] (in_symbol_22 expr_34_wire_constant) (binary_35_wire)
    // ((in_symbol [] 0 ) & s0)
    &[binary_37_inst] (binary_35_wire s0_11) (binary_37_wire)
    // (((in_symbol [] 0 ) & s0) ^ s1)
    ^[binary_39_inst] (binary_37_wire s1_15) (ns1_40)
    // 			out_data := (z6 && (s1 && s0))
    //  file prog.aa, line 21
    // (s1 && s0)
    &&[binary_45_inst] (s1_15 s0_11) (binary_45_wire)
    // (z6 && (s1 && s0))
    &&[binary_46_inst] (simple_obj_ref_42_wire_constant binary_45_wire) (binary_46_wire)
    // out_data
    $ioport $out [simple_obj_ref_41_inst]  (binary_46_wire) (out_data)
  }
  // end data-path
  // CP-DP links for merge  
  //  file prog.aa, line 11
  phi_stmt_11 <=> (branch_block_stmt_4/merge_stmt_10__entry___PhiReq/phi_stmt_11/phi_stmt_11_req branch_block_stmt_4/loopback_PhiReq/phi_stmt_11/phi_stmt_11_req) (branch_block_stmt_4/merge_stmt_10_PhiAck/phi_stmt_11_ack)
  phi_stmt_15 <=> (branch_block_stmt_4/merge_stmt_10__entry___PhiReq/phi_stmt_15/phi_stmt_15_req branch_block_stmt_4/loopback_PhiReq/phi_stmt_15/phi_stmt_15_req) (branch_block_stmt_4/merge_stmt_10_PhiAck/phi_stmt_15_ack)
  // 		in_symbol := in_data
  //  file prog.aa, line 16
  // in_data
  simple_obj_ref_21_inst <=> (branch_block_stmt_4/assign_stmt_22/simple_obj_ref_21_complete/req) (branch_block_stmt_4/assign_stmt_22/simple_obj_ref_21_complete/ack)
  // 			ns0 := ((in_symbol [] 0 ) ^ s0)
  //  file prog.aa, line 19
  // (in_symbol [] 0 )
  binary_27_inst <=> (branch_block_stmt_4/parallel_block_stmt_23/assign_stmt_31/binary_27_complete/rr branch_block_stmt_4/parallel_block_stmt_23/assign_stmt_31/binary_27_complete/cr) (branch_block_stmt_4/parallel_block_stmt_23/assign_stmt_31/binary_27_complete/ra branch_block_stmt_4/parallel_block_stmt_23/assign_stmt_31/binary_27_complete/ca)
  // ((in_symbol [] 0 ) ^ s0)
  binary_30_inst <=> (branch_block_stmt_4/parallel_block_stmt_23/assign_stmt_31/binary_30_complete/rr branch_block_stmt_4/parallel_block_stmt_23/assign_stmt_31/binary_30_complete/cr) (branch_block_stmt_4/parallel_block_stmt_23/assign_stmt_31/binary_30_complete/ra branch_block_stmt_4/parallel_block_stmt_23/assign_stmt_31/binary_30_complete/ca)
  // 			ns1 := (((in_symbol [] 0 ) & s0) ^ s1)
  //  file prog.aa, line 20
  // (in_symbol [] 0 )
  binary_35_inst <=> (branch_block_stmt_4/parallel_block_stmt_23/assign_stmt_40/binary_35_complete/rr branch_block_stmt_4/parallel_block_stmt_23/assign_stmt_40/binary_35_complete/cr) (branch_block_stmt_4/parallel_block_stmt_23/assign_stmt_40/binary_35_complete/ra branch_block_stmt_4/parallel_block_stmt_23/assign_stmt_40/binary_35_complete/ca)
  // ((in_symbol [] 0 ) & s0)
  binary_37_inst <=> (branch_block_stmt_4/parallel_block_stmt_23/assign_stmt_40/binary_37_complete/rr branch_block_stmt_4/parallel_block_stmt_23/assign_stmt_40/binary_37_complete/cr) (branch_block_stmt_4/parallel_block_stmt_23/assign_stmt_40/binary_37_complete/ra branch_block_stmt_4/parallel_block_stmt_23/assign_stmt_40/binary_37_complete/ca)
  // (((in_symbol [] 0 ) & s0) ^ s1)
  binary_39_inst <=> (branch_block_stmt_4/parallel_block_stmt_23/assign_stmt_40/binary_39_complete/rr branch_block_stmt_4/parallel_block_stmt_23/assign_stmt_40/binary_39_complete/cr) (branch_block_stmt_4/parallel_block_stmt_23/assign_stmt_40/binary_39_complete/ra branch_block_stmt_4/parallel_block_stmt_23/assign_stmt_40/binary_39_complete/ca)
  // 			out_data := (z6 && (s1 && s0))
  //  file prog.aa, line 21
  // (s1 && s0)
  binary_45_inst <=> (branch_block_stmt_4/parallel_block_stmt_23/assign_stmt_47/binary_45_complete/rr branch_block_stmt_4/parallel_block_stmt_23/assign_stmt_47/binary_45_complete/cr) (branch_block_stmt_4/parallel_block_stmt_23/assign_stmt_47/binary_45_complete/ra branch_block_stmt_4/parallel_block_stmt_23/assign_stmt_47/binary_45_complete/ca)
  // (z6 && (s1 && s0))
  binary_46_inst <=> (branch_block_stmt_4/parallel_block_stmt_23/assign_stmt_47/binary_46_complete/rr branch_block_stmt_4/parallel_block_stmt_23/assign_stmt_47/binary_46_complete/cr) (branch_block_stmt_4/parallel_block_stmt_23/assign_stmt_47/binary_46_complete/ra branch_block_stmt_4/parallel_block_stmt_23/assign_stmt_47/binary_46_complete/ca)
  // out_data
  simple_obj_ref_41_inst <=> (branch_block_stmt_4/parallel_block_stmt_23/assign_stmt_47/simple_obj_ref_41_complete/pipe_wreq) (branch_block_stmt_4/parallel_block_stmt_23/assign_stmt_47/simple_obj_ref_41_complete/pipe_wack)
}
