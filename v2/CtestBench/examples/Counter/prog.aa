$pipe in_data : $uint<8>  $depth 2
$pipe out_data : $uint<8>  $depth 2

$module [counter]
$in () $out () $is
{
	$branchblock[fsm]{

		$constant z7 : $uint<7> := 0
		
		$merge $entry loopback 
			$phi s0 := 0 $on $entry ns0 $on loopback
			$phi s1 := 0 $on $entry ns0 $on loopback
		$endmerge

		$parallelblock[pb]
		{
			ns0 := ((~ (in_symbol[] 0)) & (s0 ^ (in_symbol [] 0)))
                	ns1 := ((~ (in_symbol [] 0)) & (s1 ^ (s0 & (in_symbol [] 0))))
                	out_data := (z7 && (s1 & s0))
			in_symbol := in_data	
		}  (ns0 => ns0 ns1 => ns1)
		
		$place [loopback]
	}	
}
