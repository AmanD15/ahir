// An example to illustrate a slightly non-trivial
// Aa program

// an array of 32-bit unsigned integers.
$storage mem $array<1024> $of $uint<32> 

// module returns the sum of mem[I] from
// I=low to I=high
$module [sum_mod]
    $in (low $uint<10> high $uint<10>)
    $out (sum $uint<32>)
$is
{
 
   d := (high-low)  
   mp := ((high-low)/2)


   // branch block to distinguish between trivial and non-trivial
   // cases
   $branchblock[trivcheck]
    {
       // d from parent scope
       $if (d > 0) $then  
           // do two summations in parallel
           // parallel summations
           $parallelblock[parsum]
           {
               $branchblock[sb1]{
                    $storage  I $uint<10> := 0
                    $merge $entry loopback
                       $phi s := 0 $on $entry  s1 $on loopback
		    $endmerge
                    $if (I < mp) $then
                       I := (I+1)
                       s1 := ($mux (I == 0)  0 (s + mem[I]))
                       $place [loopback]
                    $endif
               } 
               $branchblock[sb2]{
                    $storage  J $uint<10> := 0
                    J := (mp + 1)
                    $merge $entry loopback
                       $phi s := 0 $on $entry s1 $on loopback
		    $endmerge
                    $if (J < high) $then
                         J := (J+1)
                         s1 := ($mux (J == (mp+1))  0 (s + mem[J]))
                         $place [loopback]
                    $endif
               } 
           }
 
           // combine results from parallel statement above
           snontriv := (%parsum%sb1:s  + %parsum%sb2:s)
           $place [nontrivsum]
      $else

           // summation is trivial 
           striv := mem[low]
           $place [trivsum]
      $endif
      $merge nontrivsum trivsum
         // which sum do you pick? depends on which path was taken
         $phi sum := snontriv $on nontrivsum striv $on trivsum
      $endmerge
    }

}
