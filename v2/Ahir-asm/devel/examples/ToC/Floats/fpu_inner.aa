$constant fp_d_ZERO: $float<11,52> := _f0.0e+0

$module [fpdiv32_inner] $in ( a b : $float<8,23>)  $out ( aByb: $float<8,23>) $is
{
	// convert to double and use double divide algorithm..
	// finally convert back to single
	$call fpdiv64_inner (($cast ($float<11,52>) a) ($cast ($float<11,52>) b)) (aByb_d)
	aByb := ($cast ($float<8,23>) aByb_d)
}


$module [fpdiv64_inner] $in ( a b : $float<11,52>)  $out ( aByb: $float<11,52>) $is
{

	$constant C0 : $float<11,52> := _f1.88235294818878173828125e+0
	$constant C1 : $float<11,52> := _f2.8235294818878173828125e+0
	$constant C2 : $float<11,52> := _f2.0e+0


	n := ($bitcast ($uint<64>) a)
	d := ($bitcast ($uint<64>) b)

	n_val := ($slice n 62 0)
	d_val := ($slice d 62 0)

	s_n := (n [] 63) 
	s_d := (d [] 63)

	e1 := ($slice n 62 52) 
	e2 := ($slice d 62 52) 

	e1_new := ($mux (n_val == 0)  0  ((e1 - e2) + 1022))
	e2_new := ($bitcast ($uint<11>) 1022)

	n1 := (e1_new && ($slice n 51 0)) 
	d1 := (e2_new && ($slice d 51 0)) 

	n_new := (ZERO_1 && n1)
	d_new := (ZERO_1 && d1) 

	a_new  := ($bitcast ($float<11,52>) n_new) 
	b_new  := ($bitcast ($float<11,52>) d_new) 
	
	$call fpmul64_inner (C0  b_new) (t0)
	$call fpsub64_inner (C1 t0) (x0)
	
	$call fpmul64_inner (b_new x0) (u1)
	$call fpsub64_inner (C2 u1) (v1)
	$call fpmul64_inner (x0 v1)  (x1)

	$call fpmul64_inner (b_new x1) (u2)
	$call fpsub64_inner (C2 u2) (v2)
	$call fpmul64_inner (x0 v2)  (x2)

	$call fpmul64_inner (b_new x2) (u3)
	$call fpsub64_inner (C2 u3) (v3)
	$call fpmul64_inner (x0 v3)  (x3)

	$call fpmul64_inner (b_new x3) (u4)
	$call fpsub64_inner (C2 u4) (v4)
	$call fpmul64_inner (x0 v4)  (x4)

	$call fpmul64_inner (a_new x4) (zz) 


	res := ($mux ((n_val != 0) && (d_val != 0))  zz fp_d_ZERO)

	ures := ($bitcast ($uint<64>) res)
	res_int :=  ($mux (s_n ^ s_d) (ures | (ONE_64 << 63)) (ures & (~ (ONE_64 << 63))) )

	aByb := ($bitcast ($float<11,52>) res_int)
}

$module [fpsqrt32_inner] $in ( a  : $float<8,23>)  $out ( sqrt_a : $float<8,23>) $is
{
	// convert to double and use double sqrt algorithm..
	// finally convert back to single
	$call fpsqrt64_inner (($cast ($float<11,52>) a)) (sqrt_a_d)
	sqrt_a := ($cast ($float<8,23>) sqrt_a_d)
}


$pipeline $module [sqrtDoubleApprox] $in (a: $uint<64>) $out (sqrt_approx: $float<11,52>) $is
{
	a0 := (a - (ONE_64 << 52))
	a1 := (a0 >> 1)
	a2 := (a1 + (ONE_64 << 61)) 
	sqrt_approx := ($bitcast ($float<11,52>) a2)
}

$pipeline $module [fpsqrt64_inner] $in ( a : $float<11,52>)  $out ( sqrt_a: $float<11,52>) $is
{
	$constant C3 : $float<11,52> := _f0.5e+0

	// sqrt algorithm.
	ua := ($bitcast ($uint<64>) a) 
	
	$call sqrtDoubleApprox (ua) (sqrt_approx)
	x  := ($mux (a <= 0 )  fp_d_ZERO  sqrt_approx)
	s  := (ua [] 63)
	ua_val := ($slice ua 62 0)

	
	step0 := (x != fp_d_ZERO)
	$guard (step0) $call fpdiv64_inner (a x) (q0)
	$guard (step0) $call fpadd64_inner (x q0) (r0)
	$guard (step0) $call fpmul64_inner (C3 r0) (x1)

	step1 := (x1 != fp_d_ZERO)
	$guard (step1) $call fpdiv64_inner (a x1) (q1)
	$guard (step1) $call fpadd64_inner (x1 q1) (r1)
	$guard (step1) $call fpmul64_inner (C3 r1) (x2)

	step2 := (x2 != fp_d_ZERO)
	$guard (step2) $call fpdiv64_inner (a x2) (q2)
	$guard (step2) $call fpadd64_inner (x2 q2) (r2)
	$guard (step2) $call fpmul64_inner (C3 r2) (x3)

	xf := ($prioritymux step2 x3
				step1 x2
				  step0 x1
					$default x)
	

	sqrt_a := ($mux ((ua_val != 0) & (~s)) xf fp_d_ZERO)
}


