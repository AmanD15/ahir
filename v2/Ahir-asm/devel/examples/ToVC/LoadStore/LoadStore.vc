// pipe-declarations for block %sum_mod
//  file LoadStore.aa, line 5
// $storage  buffer : $uint<10> 
// in scope  top-level
$memoryspace [ms_storage_buffer_1] 
{
  $capacity 1
  $datawidth 10
  $addrwidth 1
  $object [storage_buffer_1] : $int<10>
}
// $storage  scratch : $array<32> $of $uint<10> 
// in scope  top-level
$memoryspace [ms_storage_scratch_3] 
{
  $capacity 32
  $datawidth 10
  $addrwidth 6
  $object [storage_scratch_3] : $array[32] $of $int<10>
}
$module [sum_mod] 
{
  $in a:$int<10>
  $out b:$int<10>
  // memory-space-declarations for block %sum_mod
  //  file LoadStore.aa, line 5
  $CP 
  {
    // begin control-path 
    // control-path for: 	buffer := a // type of target is $uint<10>
    //  file LoadStore.aa, line 10
    ;;[assign_stmt_9] //  file LoadStore.aa, line 10
    {
      // CP for expression: a
      // CP for expression: buffer
      ;;[simple_obj_ref_7] 
      {
        // store buffer
        $T [srr] $T [sra] $T[scr] $T[sca]
      }
    }
    // end assignment statement assign_stmt_9
    // control-path for: 	scratch[0 ] := buffer // type of target is $uint<10>
    //  file LoadStore.aa, line 11
    ;;[assign_stmt_13] //  file LoadStore.aa, line 11
    {
      // CP for expression: buffer
      ;;[simple_obj_ref_12] 
      {
        // load: buffer
        $T [rr] $T [ra] $T[cr] $T[ca]
      }
      // CP for expression: scratch[0 ]
      ;;[array_obj_ref_11] 
      {
        // array object reference: scratch[0 ]
        ;;[array_obj_ref_11_AddressGen] 
        {
          // address generation for scratch[0 ]
          // calculate index1 = idx1*dim1, index2 = idx2*dim2 ... 
          ||[IndexGen] 
          {
            // indices
          }
        }
        $T [rr] $T [ra] $T[cr] $T[ca]
      }
    }
    // end assignment statement assign_stmt_13
    // control-path for: 	b := scratch[0 ] // type of target is $uint<10>
    //  file LoadStore.aa, line 12
    ;;[assign_stmt_17] //  file LoadStore.aa, line 12
    {
      // CP for expression: scratch[0 ]
      ;;[array_obj_ref_16] 
      {
        // array object reference: scratch[0 ]
        ;;[array_obj_ref_16_AddressGen] 
        {
          // address generation for scratch[0 ]
          // calculate index1 = idx1*dim1, index2 = idx2*dim2 ... 
          ||[IndexGen] 
          {
            // indices
          }
        }
        $T [rr] $T [ra] $T[cr] $T[ca]
      }
      // CP for expression: b
    }
    // end assignment statement assign_stmt_17
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %sum_mod
    //  file LoadStore.aa, line 5
    // Constant-declaration for expression: 0 
    $constant $W[expr_15_wire_constant] : $int<6> := _b000000
    // wire-declarations for: 	buffer := a // type of target is $uint<10>
    //  file LoadStore.aa, line 10
    $constant $W[simple_obj_ref_7_wire_addr] : $pointer<ms_storage_buffer_1> := _b0
    // wire-declarations for: 	scratch[0 ] := buffer // type of target is $uint<10>
    //  file LoadStore.aa, line 11
    $W[simple_obj_ref_12_wire] : $int<10>
    $constant $W[simple_obj_ref_12_wire_addr] : $pointer<ms_storage_buffer_1> := _b0
    // wire-declarations for expression: scratch[0 ]
    $constant $W[array_obj_ref_11_wire_constant_write_ptr] : $pointer<ms_storage_scratch_3> := _b000000
    // wire-declarations for: 	b := scratch[0 ] // type of target is $uint<10>
    //  file LoadStore.aa, line 12
    // wire-declarations for expression: scratch[0 ]
    $constant $W[array_obj_ref_16_wire_constant_read_ptr] : $pointer<ms_storage_scratch_3> := _b000000
    // data-path instances for: 	buffer := a // type of target is $uint<10>
    //  file LoadStore.aa, line 10
    $store [simple_obj_ref_7_inst] $to ms_storage_buffer_1 (simple_obj_ref_7_wire_addr a)
    // data-path instances for: 	scratch[0 ] := buffer // type of target is $uint<10>
    //  file LoadStore.aa, line 11
    $load [simple_obj_ref_12_inst] $from ms_storage_buffer_1 (simple_obj_ref_12_wire_addr) (simple_obj_ref_12_wire)
    // data-path-instances for expression: scratch[0 ]
    $store [array_obj_ref_11_inst] $to ms_storage_scratch_3 (array_obj_ref_11_wire_constant_write_ptr simple_obj_ref_12_wire)
    // data-path instances for: 	b := scratch[0 ] // type of target is $uint<10>
    //  file LoadStore.aa, line 12
    // data-path-instances for expression: scratch[0 ]
    $load [array_obj_ref_16_inst] $from ms_storage_scratch_3 (array_obj_ref_16_wire_constant_read_ptr) (b)
  }
  // end data-path
  // CP-DP links for: 	buffer := a // type of target is $uint<10>
  //  file LoadStore.aa, line 10
  // CP-DP links for expression: buffer
  simple_obj_ref_7_inst <=> (assign_stmt_9/simple_obj_ref_7/srr assign_stmt_9/simple_obj_ref_7/scr) (assign_stmt_9/simple_obj_ref_7/sra assign_stmt_9/simple_obj_ref_7/sca)
  // CP-DP links for: 	scratch[0 ] := buffer // type of target is $uint<10>
  //  file LoadStore.aa, line 11
  // CP-DP links for expression: scratch[0 ]
  array_obj_ref_11_inst <=> (assign_stmt_13/array_obj_ref_11/rr assign_stmt_13/array_obj_ref_11/cr) (assign_stmt_13/array_obj_ref_11/ra assign_stmt_13/array_obj_ref_11/ca)
  // CP-DP links for expression: buffer
  simple_obj_ref_12_inst <=> (assign_stmt_13/simple_obj_ref_12/rr assign_stmt_13/simple_obj_ref_12/cr) (assign_stmt_13/simple_obj_ref_12/ra assign_stmt_13/simple_obj_ref_12/ca)
  // CP-DP links for: 	b := scratch[0 ] // type of target is $uint<10>
  //  file LoadStore.aa, line 12
  // CP-DP links for expression: scratch[0 ]
  array_obj_ref_16_inst <=> (assign_stmt_17/array_obj_ref_16/rr assign_stmt_17/array_obj_ref_16/cr) (assign_stmt_17/array_obj_ref_16/ra assign_stmt_17/array_obj_ref_16/ca)
}
