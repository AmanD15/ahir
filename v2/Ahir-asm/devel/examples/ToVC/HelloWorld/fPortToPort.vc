// pipe-declarations for block %sum_mod
//  file PortToPort.aa, line 2
$module [sum_mod] 
{
  $in a:$int<10> b:$int<10>
  $out c:$int<10>
  // memory-space-declarations for block %sum_mod
  //  file PortToPort.aa, line 2
  $CP 
  {
    // begin control-path 
    // control-path for: 	d :=  ( ~ c1[0 ] ) // type of target is $uint<10>
    //  file PortToPort.aa, line 10
    ;;[assign_stmt_15] //  file PortToPort.aa, line 10
    {
      $T [dummy] // assignment evaluates to a constant 
    }
    // end assignment statement assign_stmt_15
    // control-path for: 	e :=  ( ~  ( ~ c1[_b0 ] ) ) // type of target is $uint<10>
    //  file PortToPort.aa, line 11
    ;;[assign_stmt_21] //  file PortToPort.aa, line 11
    {
      $T [dummy] // assignment evaluates to a constant 
    }
    // end assignment statement assign_stmt_21
    // control-path for: 	d1 := (( ( ~ a ) + d) + e) // type of target is $uint<10>
    //  file PortToPort.aa, line 13
    ;;[assign_stmt_29] //  file PortToPort.aa, line 13
    {
      // control-path for expression: (( ( ~ a ) + d) + e)
      ;;[binary_28] 
      {
        // binary expression: (( ( ~ a ) + d) + e)
        ||[binary_28_inputs] 
        {
          // control-path for expression: ( ( ~ a ) + d)
          ;;[binary_26] 
          {
            // binary expression: ( ( ~ a ) + d)
            ||[binary_26_inputs] 
            {
              // control-path for expression:  ( ~ a )
              ;;[unary_24] 
              {
                // unary expression:  ( ~ a )
                // CP for expression: a
                $T [rr] $T [ra] $T [cr] $T [ca] //(split) unary operation
              }
            }
            $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
          }
        }
        $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
      }
      // CP for expression: d1
    }
    // end assignment statement assign_stmt_29
    // control-path for: 	c := (d1 + b) // type of target is $uint<10>
    //  file PortToPort.aa, line 15
    ;;[assign_stmt_34] //  file PortToPort.aa, line 15
    {
      // control-path for expression: (d1 + b)
      ;;[binary_33] 
      {
        // binary expression: (d1 + b)
        ||[binary_33_inputs] 
        {
          // CP for expression: d1
          // CP for expression: b
        }
        $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
      }
      // CP for expression: c
    }
    // end assignment statement assign_stmt_34
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant declarations for: 	d :=  ( ~ c1[0 ] ) // type of target is $uint<10>
    //  file PortToPort.aa, line 10
    $constant $W[d] : $int<10> := _b1111110000
    // constant declarations for: 	e :=  ( ~  ( ~ c1[_b0 ] ) ) // type of target is $uint<10>
    //  file PortToPort.aa, line 11
    $constant $W[e] : $int<10> := _b0000001111
    // wire-declarations for: 	d1 := (( ( ~ a ) + d) + e) // type of target is $uint<10>
    //  file PortToPort.aa, line 13
    // wire-declarations for expression:  ( ~ a )
    $W[unary_24_wire] : $int<10>
    // wire-declarations for expression: ( ( ~ a ) + d)
    $W[binary_26_wire] : $int<10>
    $W[d1] : $int<10>
    // wire-declarations for: 	c := (d1 + b) // type of target is $uint<10>
    //  file PortToPort.aa, line 15
    // data-path instances for: 	d1 := (( ( ~ a ) + d) + e) // type of target is $uint<10>
    //  file PortToPort.aa, line 13
    // data-path instances for expression:  ( ~ a )
    ~ [unary_24_inst] (a) (unary_24_wire)
    // data-path-instances for expression: ( ( ~ a ) + d)
    +[binary_26_inst] (unary_24_wire d) (binary_26_wire)
    // data-path-instances for expression: (( ( ~ a ) + d) + e)
    +[binary_28_inst] (binary_26_wire e) (d1)
    // data-path instances for: 	c := (d1 + b) // type of target is $uint<10>
    //  file PortToPort.aa, line 15
    // data-path-instances for expression: (d1 + b)
    +[binary_33_inst] (d1 b) (c)
  }
  // end data-path
  // CP-DP links for: 	d1 := (( ( ~ a ) + d) + e) // type of target is $uint<10>
  //  file PortToPort.aa, line 13
  // CP-DP links for expression:  ( ~ a )
  unary_24_inst <=> (assign_stmt_29/binary_28/binary_28_inputs/binary_26/binary_26_inputs/unary_24/rr assign_stmt_29/binary_28/binary_28_inputs/binary_26/binary_26_inputs/unary_24/cr) (assign_stmt_29/binary_28/binary_28_inputs/binary_26/binary_26_inputs/unary_24/ra assign_stmt_29/binary_28/binary_28_inputs/binary_26/binary_26_inputs/unary_24/ca)
  // CP-DP links for expression: ( ( ~ a ) + d)
  binary_26_inst <=> (assign_stmt_29/binary_28/binary_28_inputs/binary_26/rr assign_stmt_29/binary_28/binary_28_inputs/binary_26/cr) (assign_stmt_29/binary_28/binary_28_inputs/binary_26/ra assign_stmt_29/binary_28/binary_28_inputs/binary_26/ca)
  // CP-DP links for expression: (( ( ~ a ) + d) + e)
  binary_28_inst <=> (assign_stmt_29/binary_28/rr assign_stmt_29/binary_28/cr) (assign_stmt_29/binary_28/ra assign_stmt_29/binary_28/ca)
  // CP-DP links for: 	c := (d1 + b) // type of target is $uint<10>
  //  file PortToPort.aa, line 15
  // CP-DP links for expression: (d1 + b)
  binary_33_inst <=> (assign_stmt_34/binary_33/rr assign_stmt_34/binary_33/cr) (assign_stmt_34/binary_33/ra assign_stmt_34/binary_33/ca)
}
