// pipe-declarations for block %shift_and_add_multiplier
// file ConcatBitsel.aa, line 2
// pipe-declarations for block %shift_and_add_multiplier%mainloop
// file ConcatBitsel.aa, line 10
// pipe-declarations for block %shift_and_add_multiplier%mainloop%
// file ConcatBitsel.aa, line 12
// pipe-declarations for block %shift_and_add_multiplier%mainloop%nxt
// file ConcatBitsel.aa, line 19
// pipe-declarations for block %shift_and_add_multiplier%mainloop%nxt%vb
// file ConcatBitsel.aa, line 21
// pipe-declarations for block %shift_and_add_multiplier%mainloop%nxt%ub
// file ConcatBitsel.aa, line 25
// pipe-declarations for block %test_bench
// file ConcatBitsel.aa, line 40
$module [shift_and_add_multiplier] 
{
  $in a:$int<10> b:$int<10>
  $out aXb:$int<20>
  $CP 
  {
    // begin control-path 
    // control-path for branch block %shift_and_add_multiplier%mainloop
    // file ConcatBitsel.aa, line 10
    <>[branch_block_stmt_21] // Branch Block file ConcatBitsel.aa, line 10
    {
      $P [branch_block_stmt_21__entry__]
      branch_block_stmt_21__entry__ <-| ($entry)
      $P [branch_block_stmt_21__exit__]
      branch_block_stmt_21__exit__ |-> ($exit)
      $P [merge_stmt_22__exit__] 
      $P [parallel_block_stmt_42__entry__] 
      $P [parallel_block_stmt_42__exit__] 
      $P [if_stmt_105__entry__] 
      ||[parallel_block_stmt_42] // parallel block file ConcatBitsel.aa, line 19
      {
        ;;[series_block_stmt_43] // series block file ConcatBitsel.aa, line 21
        {
          // 				nv := (((( $mux (a_0 [] 0 ) (((u_in + b) && z1) >> 1 )  ((u_in && z1) >> 1 ) )  [] 0 ) && v_in) >> 1 )
          // file ConcatBitsel.aa, line 22
          ;;[assign_stmt_67] // file ConcatBitsel.aa, line 22
          {
            // (((( $mux (a_0 [] 0 ) (((u_in + b) && z1) >> 1 )  ((u_in && z1) >> 1 ) )  [] 0 ) && v_in) >> 1 )
            ;;[binary_66] 
            {
              // binary expression 
              ||[binary_66_inputs] 
              {
                // ((( $mux (a_0 [] 0 ) (((u_in + b) && z1) >> 1 )  ((u_in && z1) >> 1 ) )  [] 0 ) && v_in)
                ;;[binary_64] 
                {
                  // binary expression 
                  ||[binary_64_inputs] 
                  {
                    // (( $mux (a_0 [] 0 ) (((u_in + b) && z1) >> 1 )  ((u_in && z1) >> 1 ) )  [] 0 )
                    ;;[binary_62] 
                    {
                      // binary expression 
                      ||[binary_62_inputs] 
                      {
                        // ( $mux (a_0 [] 0 ) (((u_in + b) && z1) >> 1 )  ((u_in && z1) >> 1 ) ) 
                        ;;[ternary_60] 
                        {
                          // ternary expression: 
                          ||[ternary_60_inputs] 
                          {
                            // (a_0 [] 0 )
                            ;;[binary_47] 
                            {
                              // binary expression 
                              ||[binary_47_inputs] 
                              {
                              }
                              $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
                            }
                            // (((u_in + b) && z1) >> 1 )
                            ;;[binary_54] 
                            {
                              // binary expression 
                              ||[binary_54_inputs] 
                              {
                                // ((u_in + b) && z1)
                                ;;[binary_52] 
                                {
                                  // binary expression 
                                  ||[binary_52_inputs] 
                                  {
                                    // (u_in + b)
                                    ;;[binary_50] 
                                    {
                                      // binary expression 
                                      ||[binary_50_inputs] 
                                      {
                                      }
                                      $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
                                    }
                                  }
                                  $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
                                }
                              }
                              $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
                            }
                            // ((u_in && z1) >> 1 )
                            ;;[binary_59] 
                            {
                              // binary expression 
                              ||[binary_59_inputs] 
                              {
                                // (u_in && z1)
                                ;;[binary_57] 
                                {
                                  // binary expression 
                                  ||[binary_57_inputs] 
                                  {
                                  }
                                  $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
                                }
                              }
                              $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
                            }
                          }
                          $T [req] $T [ack] // select req/ack
                        }
                      }
                      $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
                    }
                  }
                  $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
                }
              }
              $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
            }
          }
          // end assignment statement assign_stmt_67
          // 				v := ( $cast ($uint<10>) nv )
          // file ConcatBitsel.aa, line 23
          ;;[assign_stmt_71] // file ConcatBitsel.aa, line 23
          {
            // ( $cast ($uint<10>) nv )
            ;;[type_cast_70] 
            {
              // type-cast expression
              $T [req] $T [ack] //  type-conversion.. 
            }
          }
          // end assignment statement assign_stmt_71
        }
        // end series block series_block_stmt_43
        ;;[series_block_stmt_73] // series block file ConcatBitsel.aa, line 25
        {
          // 				nu := ( $mux (a_0 [] 0 ) (((u_in + b) && z1) >> 1 )  ((u_in && z1) >> 1 ) ) 
          // file ConcatBitsel.aa, line 26
          ;;[assign_stmt_91] // file ConcatBitsel.aa, line 26
          {
            // ( $mux (a_0 [] 0 ) (((u_in + b) && z1) >> 1 )  ((u_in && z1) >> 1 ) ) 
            ;;[ternary_90] 
            {
              // ternary expression: 
              ||[ternary_90_inputs] 
              {
                // (a_0 [] 0 )
                ;;[binary_77] 
                {
                  // binary expression 
                  ||[binary_77_inputs] 
                  {
                  }
                  $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
                }
                // (((u_in + b) && z1) >> 1 )
                ;;[binary_84] 
                {
                  // binary expression 
                  ||[binary_84_inputs] 
                  {
                    // ((u_in + b) && z1)
                    ;;[binary_82] 
                    {
                      // binary expression 
                      ||[binary_82_inputs] 
                      {
                        // (u_in + b)
                        ;;[binary_80] 
                        {
                          // binary expression 
                          ||[binary_80_inputs] 
                          {
                          }
                          $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
                        }
                      }
                      $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
                    }
                  }
                  $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
                }
                // ((u_in && z1) >> 1 )
                ;;[binary_89] 
                {
                  // binary expression 
                  ||[binary_89_inputs] 
                  {
                    // (u_in && z1)
                    ;;[binary_87] 
                    {
                      // binary expression 
                      ||[binary_87_inputs] 
                      {
                      }
                      $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
                    }
                  }
                  $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
                }
              }
              $T [req] $T [ack] // select req/ack
            }
          }
          // end assignment statement assign_stmt_91
          // 				u := ( $cast ($uint<10>) (nu >> 1 ) )
          // file ConcatBitsel.aa, line 27
          ;;[assign_stmt_97] // file ConcatBitsel.aa, line 27
          {
            // ( $cast ($uint<10>) (nu >> 1 ) )
            ;;[type_cast_96] 
            {
              // type-cast expression
              // (nu >> 1 )
              ;;[binary_95] 
              {
                // binary expression 
                ||[binary_95_inputs] 
                {
                }
                $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
              }
              $T [req] $T [ack] //  type-conversion.. 
            }
          }
          // end assignment statement assign_stmt_97
        }
        // end series block series_block_stmt_73
        // 			ctr := (../:ctr >> 1 )
        // file ConcatBitsel.aa, line 29
        ;;[assign_stmt_103] // file ConcatBitsel.aa, line 29
        {
          // (../:ctr >> 1 )
          ;;[binary_102] 
          {
            // binary expression 
            ||[binary_102_inputs] 
            {
            }
            $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
          }
        }
        // end assignment statement assign_stmt_103
      }
      // end parallel block parallel_block_stmt_42
      parallel_block_stmt_42__entry__ |-> (parallel_block_stmt_42)
      parallel_block_stmt_42__exit__ <-| (parallel_block_stmt_42)
      // if-statement  
      // file ConcatBitsel.aa, line 34
      ;;[if_stmt_105_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (%nxt:ctr [] 0 )
        ;;[binary_108] 
        {
          // binary expression 
          ||[binary_108_inputs] 
          {
          }
          $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
        }
        $T [branch_req] 
      }
      if_stmt_105__entry__ |-> (if_stmt_105_eval_test)
      $P [binary_108_place]
      binary_108_place <-| (if_stmt_105_eval_test)
      ;;[if_stmt_105_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_105_else_link] 
      {
        $T [else_choice_transition] 
      }
      binary_108_place |-> (if_stmt_105_if_link if_stmt_105_else_link)
      $P [stmt_109__entry__] 
      $P [stmt_109__exit__] 
      // 			$null
      // file ConcatBitsel.aa, line 10309976
      ;;[stmt_109] 
      {
      }
      stmt_109__entry__ |-> (stmt_109)
      stmt_109__exit__ <-| (stmt_109)
      stmt_109__entry__ <-| (if_stmt_105_if_link)
      stmt_109__exit__ |-> (branch_block_stmt_21__exit__)
      $P [loopback]
      loopback <-| (if_stmt_105_else_link)
      // control-path for merge  
      // file ConcatBitsel.aa, line 12
      //---------------------   merge statement file ConcatBitsel.aa, line 12  --------------------------
      ||[branch_block_stmt_21__entry___PhiReq] 
      {
        ;;[phi_stmt_23] 
        {
          // sources for 			$phi u_in := 			  0  $on $entry			  %nxt%ub:u $on loopback // type of target is $uint<10>
          $T [phi_stmt_23_req] 
        }
        ;;[phi_stmt_27] 
        {
          // sources for 			$phi v_in := 			  0  $on $entry			  %nxt%vb:v $on loopback // type of target is $uint<10>
          $T [phi_stmt_27_req] 
        }
        ;;[phi_stmt_31] 
        {
          // sources for 			$phi a_0 := 			  a $on $entry			  (a_0 >> 1 ) $on loopback // type of target is $uint<10>
          // (a_0 >> 1 )
          ;;[binary_36] 
          {
            // binary expression 
            ||[binary_36_inputs] 
            {
            }
            $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
          }
          $T [phi_stmt_31_req] 
        }
        ;;[phi_stmt_37] 
        {
          // sources for 			$phi ctr := 			  count $on $entry			  %nxt:ctr $on loopback // type of target is $uint<11>
          $T [phi_stmt_37_req] 
        }
      }
      branch_block_stmt_21__entry__ |-> (branch_block_stmt_21__entry___PhiReq)
      ||[loopback_PhiReq] 
      {
        ;;[phi_stmt_23] 
        {
          // sources for 			$phi u_in := 			  0  $on $entry			  %nxt%ub:u $on loopback // type of target is $uint<10>
          $T [phi_stmt_23_req] 
        }
        ;;[phi_stmt_27] 
        {
          // sources for 			$phi v_in := 			  0  $on $entry			  %nxt%vb:v $on loopback // type of target is $uint<10>
          $T [phi_stmt_27_req] 
        }
        ;;[phi_stmt_31] 
        {
          // sources for 			$phi a_0 := 			  a $on $entry			  (a_0 >> 1 ) $on loopback // type of target is $uint<10>
          // (a_0 >> 1 )
          ;;[binary_36] 
          {
            // binary expression 
            ||[binary_36_inputs] 
            {
            }
            $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
          }
          $T [phi_stmt_31_req] 
        }
        ;;[phi_stmt_37] 
        {
          // sources for 			$phi ctr := 			  count $on $entry			  %nxt:ctr $on loopback // type of target is $uint<11>
          $T [phi_stmt_37_req] 
        }
      }
      loopback |-> (loopback_PhiReq)
      $P [merge_stmt_22_PhiReqMerge] 
      merge_stmt_22_PhiReqMerge <-| ( branch_block_stmt_21__entry___PhiReq  loopback_PhiReq )
      ||[merge_stmt_22_PhiAck] 
      {
        $T [phi_stmt_23_ack] 
        $T [phi_stmt_27_ack] 
        $T [phi_stmt_31_ack] 
        $T [phi_stmt_37_ack] 
      }
      merge_stmt_22_PhiReqMerge |-> (merge_stmt_22_PhiAck)
      merge_stmt_22__exit__ <-| (merge_stmt_22_PhiAck)
      //---------------------  end of merge statement file ConcatBitsel.aa, line 12  --------------------------
      parallel_block_stmt_42__entry__ <-| (merge_stmt_22__exit__)
      if_stmt_105__entry__ <-| (parallel_block_stmt_42__exit__)
    }
    // 	aXb := (%mainloop%nxt%ub:u && %mainloop%nxt%vb:v)
    // file ConcatBitsel.aa, line 36
    ;;[assign_stmt_118] // file ConcatBitsel.aa, line 36
    {
      // (%mainloop%nxt%ub:u && %mainloop%nxt%vb:v)
      ;;[binary_117] 
      {
        // binary expression 
        ||[binary_117_inputs] 
        {
        }
        $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
      }
    }
    // end assignment statement assign_stmt_118
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %shift_and_add_multiplier%mainloop%
    // file ConcatBitsel.aa, line 12
    // constant-object-declarations for block %shift_and_add_multiplier%mainloop%nxt%vb
    // file ConcatBitsel.aa, line 21
    // constant-object-declarations for block %shift_and_add_multiplier%mainloop%nxt%ub
    // file ConcatBitsel.aa, line 25
    // constant-object-declarations for block %shift_and_add_multiplier%mainloop%nxt
    // file ConcatBitsel.aa, line 19
    // constant-object-declarations for block %shift_and_add_multiplier%mainloop
    // file ConcatBitsel.aa, line 10
    // constant-object-declarations for block %shift_and_add_multiplier
    // file ConcatBitsel.aa, line 2
    $constant $W[xxshift_and_add_multiplierxxz9] : $int<9> := _b000000000// 0
    $constant $W[xxshift_and_add_multiplierxxz1] : $int<1> := _b0// 0
    $constant $W[xxshift_and_add_multiplierxxcount] : $int<11> := _b10000000000// 1024
    // constant-declarations for block %shift_and_add_multiplier%mainloop
    // file ConcatBitsel.aa, line 10
    // constant-declarations for block %shift_and_add_multiplier%mainloop%
    // file ConcatBitsel.aa, line 12
    // constant-declarations for phi:  			$phi u_in := 			  0  $on $entry			  %nxt%ub:u $on loopback // type of target is $uint<10>
    // file ConcatBitsel.aa, line 13
    // 0 
    $constant $W[expr_25_wire_constant] : $int<10> := _b0000000000// 0
    // constant-declarations for phi:  			$phi v_in := 			  0  $on $entry			  %nxt%vb:v $on loopback // type of target is $uint<10>
    // file ConcatBitsel.aa, line 14
    // 0 
    $constant $W[expr_29_wire_constant] : $int<10> := _b0000000000// 0
    // constant-declarations for phi:  			$phi a_0 := 			  a $on $entry			  (a_0 >> 1 ) $on loopback // type of target is $uint<10>
    // file ConcatBitsel.aa, line 15
    // 1 
    $constant $W[expr_35_wire_constant] : $int<4> := _b0001// 1
    // constant-declarations for phi:  			$phi ctr := 			  count $on $entry			  %nxt:ctr $on loopback // type of target is $uint<11>
    // file ConcatBitsel.aa, line 16
    // count
    $constant $W[simple_obj_ref_39_wire_constant] : $int<11> := _b10000000000// 1024
    // constant-declarations for block %shift_and_add_multiplier%mainloop%nxt
    // file ConcatBitsel.aa, line 19
    // constant-declarations for block %shift_and_add_multiplier%mainloop%nxt%vb
    // file ConcatBitsel.aa, line 21
    // ( $mux (a_0 [] 0 ) (((u_in + b) && z1) >> 1 )  ((u_in && z1) >> 1 ) ) 
    // 0 
    $constant $W[expr_46_wire_constant] : $int<4> := _b0000// 0
    // z1
    $constant $W[simple_obj_ref_51_wire_constant] : $int<1> := _b0// 0
    // 1 
    $constant $W[expr_53_wire_constant] : $int<4> := _b0001// 1
    // z1
    $constant $W[simple_obj_ref_56_wire_constant] : $int<1> := _b0// 0
    // 1 
    $constant $W[expr_58_wire_constant] : $int<4> := _b0001// 1
    // 0 
    $constant $W[expr_61_wire_constant] : $int<4> := _b0000// 0
    // 1 
    $constant $W[expr_65_wire_constant] : $int<4> := _b0001// 1
    // constant-declarations for block %shift_and_add_multiplier%mainloop%nxt%ub
    // file ConcatBitsel.aa, line 25
    // ( $mux (a_0 [] 0 ) (((u_in + b) && z1) >> 1 )  ((u_in && z1) >> 1 ) ) 
    // 0 
    $constant $W[expr_76_wire_constant] : $int<4> := _b0000// 0
    // z1
    $constant $W[simple_obj_ref_81_wire_constant] : $int<1> := _b0// 0
    // 1 
    $constant $W[expr_83_wire_constant] : $int<4> := _b0001// 1
    // z1
    $constant $W[simple_obj_ref_86_wire_constant] : $int<1> := _b0// 0
    // 1 
    $constant $W[expr_88_wire_constant] : $int<4> := _b0001// 1
    // 1 
    $constant $W[expr_94_wire_constant] : $int<4> := _b0001// 1
    // 1 
    $constant $W[expr_101_wire_constant] : $int<4> := _b0001// 1
    // if-statement  
    // file ConcatBitsel.aa, line 34
    // 0 
    $constant $W[expr_107_wire_constant] : $int<4> := _b0000// 0
    // block %shift_and_add_multiplier%mainloop
    // file ConcatBitsel.aa, line 10
    // merge-statement  
    // file ConcatBitsel.aa, line 12
    // 			$phi u_in := 			  0  $on $entry			  %nxt%ub:u $on loopback // type of target is $uint<10>
    // file ConcatBitsel.aa, line 13
    // u_in
    $W[u_in_23] : $int<10>
    // 			$phi v_in := 			  0  $on $entry			  %nxt%vb:v $on loopback // type of target is $uint<10>
    // file ConcatBitsel.aa, line 14
    // v_in
    $W[v_in_27] : $int<10>
    // 			$phi a_0 := 			  a $on $entry			  (a_0 >> 1 ) $on loopback // type of target is $uint<10>
    // file ConcatBitsel.aa, line 15
    // (a_0 >> 1 )
    $intermediate $W[binary_36_wire] : $int<10>
    // a_0
    $W[a_0_31] : $int<10>
    // 			$phi ctr := 			  count $on $entry			  %nxt:ctr $on loopback // type of target is $uint<11>
    // file ConcatBitsel.aa, line 16
    // ctr
    $W[ctr_37] : $int<11>
    // block %shift_and_add_multiplier%mainloop%nxt
    // file ConcatBitsel.aa, line 19
    // block %shift_and_add_multiplier%mainloop%nxt%vb
    // file ConcatBitsel.aa, line 21
    // 				nv := (((( $mux (a_0 [] 0 ) (((u_in + b) && z1) >> 1 )  ((u_in && z1) >> 1 ) )  [] 0 ) && v_in) >> 1 )
    // file ConcatBitsel.aa, line 22
    // (a_0 [] 0 )
    $intermediate $W[binary_47_wire] : $int<1>
    // (u_in + b)
    $intermediate $W[binary_50_wire] : $int<10>
    // ((u_in + b) && z1)
    $intermediate $W[binary_52_wire] : $int<11>
    // (((u_in + b) && z1) >> 1 )
    $intermediate $W[binary_54_wire] : $int<11>
    // (u_in && z1)
    $intermediate $W[binary_57_wire] : $int<11>
    // ((u_in && z1) >> 1 )
    $intermediate $W[binary_59_wire] : $int<11>
    // ( $mux (a_0 [] 0 ) (((u_in + b) && z1) >> 1 )  ((u_in && z1) >> 1 ) ) 
    $intermediate $W[ternary_60_wire] : $int<11>
    // (( $mux (a_0 [] 0 ) (((u_in + b) && z1) >> 1 )  ((u_in && z1) >> 1 ) )  [] 0 )
    $intermediate $W[binary_62_wire] : $int<1>
    // ((( $mux (a_0 [] 0 ) (((u_in + b) && z1) >> 1 )  ((u_in && z1) >> 1 ) )  [] 0 ) && v_in)
    $intermediate $W[binary_64_wire] : $int<11>
    // nv
    $W[nv_67] : $int<11>
    // 				v := ( $cast ($uint<10>) nv )
    // file ConcatBitsel.aa, line 23
    // v
    $W[v_71] : $int<10>
    // block %shift_and_add_multiplier%mainloop%nxt%ub
    // file ConcatBitsel.aa, line 25
    // 				nu := ( $mux (a_0 [] 0 ) (((u_in + b) && z1) >> 1 )  ((u_in && z1) >> 1 ) ) 
    // file ConcatBitsel.aa, line 26
    // (a_0 [] 0 )
    $intermediate $W[binary_77_wire] : $int<1>
    // (u_in + b)
    $intermediate $W[binary_80_wire] : $int<10>
    // ((u_in + b) && z1)
    $intermediate $W[binary_82_wire] : $int<11>
    // (((u_in + b) && z1) >> 1 )
    $intermediate $W[binary_84_wire] : $int<11>
    // (u_in && z1)
    $intermediate $W[binary_87_wire] : $int<11>
    // ((u_in && z1) >> 1 )
    $intermediate $W[binary_89_wire] : $int<11>
    // nu
    $W[nu_91] : $int<11>
    // 				u := ( $cast ($uint<10>) (nu >> 1 ) )
    // file ConcatBitsel.aa, line 27
    // (nu >> 1 )
    $intermediate $W[binary_95_wire] : $int<11>
    // u
    $W[u_97] : $int<10>
    // 			ctr := (../:ctr >> 1 )
    // file ConcatBitsel.aa, line 29
    // ctr
    $W[ctr_103] : $int<11>
    // if statement  
    // file ConcatBitsel.aa, line 34
    // (%nxt:ctr [] 0 )
    $intermediate $W[binary_108_wire] : $int<1>
    // 	aXb := (%mainloop%nxt%ub:u && %mainloop%nxt%vb:v)
    // file ConcatBitsel.aa, line 36
    // aXb
    // datapath-instances for block %shift_and_add_multiplier%mainloop
    // file ConcatBitsel.aa, line 10
    // data-path instances for merge  
    // file ConcatBitsel.aa, line 12
    // 			$phi u_in := 			  0  $on $entry			  %nxt%ub:u $on loopback // type of target is $uint<10>
    // file ConcatBitsel.aa, line 13
    $phi [phi_stmt_23] (expr_25_wire_constant u_97) ( u_in_23 )
    // 			$phi v_in := 			  0  $on $entry			  %nxt%vb:v $on loopback // type of target is $uint<10>
    // file ConcatBitsel.aa, line 14
    $phi [phi_stmt_27] (expr_29_wire_constant v_71) ( v_in_27 )
    // 			$phi a_0 := 			  a $on $entry			  (a_0 >> 1 ) $on loopback // type of target is $uint<10>
    // file ConcatBitsel.aa, line 15
    // (a_0 >> 1 )
    >>[binary_36_inst] (a_0_31 expr_35_wire_constant) (binary_36_wire)
    $phi [phi_stmt_31] (a binary_36_wire) ( a_0_31 )
    // 			$phi ctr := 			  count $on $entry			  %nxt:ctr $on loopback // type of target is $uint<11>
    // file ConcatBitsel.aa, line 16
    $phi [phi_stmt_37] (simple_obj_ref_39_wire_constant ctr_103) ( ctr_37 )
    // datapath-instances for block %shift_and_add_multiplier%mainloop%nxt
    // file ConcatBitsel.aa, line 19
    // datapath-instances for block %shift_and_add_multiplier%mainloop%nxt%vb
    // file ConcatBitsel.aa, line 21
    // 				nv := (((( $mux (a_0 [] 0 ) (((u_in + b) && z1) >> 1 )  ((u_in && z1) >> 1 ) )  [] 0 ) && v_in) >> 1 )
    // file ConcatBitsel.aa, line 22
    // (a_0 [] 0 )
    [][binary_47_inst] (a_0_31 expr_46_wire_constant) (binary_47_wire)
    // (u_in + b)
    +[binary_50_inst] (u_in_23 b) (binary_50_wire)
    // ((u_in + b) && z1)
    &&[binary_52_inst] (binary_50_wire simple_obj_ref_51_wire_constant) (binary_52_wire)
    // (((u_in + b) && z1) >> 1 )
    >>[binary_54_inst] (binary_52_wire expr_53_wire_constant) (binary_54_wire)
    // (u_in && z1)
    &&[binary_57_inst] (u_in_23 simple_obj_ref_56_wire_constant) (binary_57_wire)
    // ((u_in && z1) >> 1 )
    >>[binary_59_inst] (binary_57_wire expr_58_wire_constant) (binary_59_wire)
    // ( $mux (a_0 [] 0 ) (((u_in + b) && z1) >> 1 )  ((u_in && z1) >> 1 ) ) 
    ? [ternary_60_inst] (binary_47_wire binary_54_wire binary_59_wire) (ternary_60_wire)
    // (( $mux (a_0 [] 0 ) (((u_in + b) && z1) >> 1 )  ((u_in && z1) >> 1 ) )  [] 0 )
    [][binary_62_inst] (ternary_60_wire expr_61_wire_constant) (binary_62_wire)
    // ((( $mux (a_0 [] 0 ) (((u_in + b) && z1) >> 1 )  ((u_in && z1) >> 1 ) )  [] 0 ) && v_in)
    &&[binary_64_inst] (binary_62_wire v_in_27) (binary_64_wire)
    // (((( $mux (a_0 [] 0 ) (((u_in + b) && z1) >> 1 )  ((u_in && z1) >> 1 ) )  [] 0 ) && v_in) >> 1 )
    >>[binary_66_inst] (binary_64_wire expr_65_wire_constant) (nv_67)
    // 				v := ( $cast ($uint<10>) nv )
    // file ConcatBitsel.aa, line 23
    // ( $cast ($uint<10>) nv )
    := [type_cast_70_inst] (nv_67) (v_71)
    // datapath-instances for block %shift_and_add_multiplier%mainloop%nxt%ub
    // file ConcatBitsel.aa, line 25
    // 				nu := ( $mux (a_0 [] 0 ) (((u_in + b) && z1) >> 1 )  ((u_in && z1) >> 1 ) ) 
    // file ConcatBitsel.aa, line 26
    // (a_0 [] 0 )
    [][binary_77_inst] (a_0_31 expr_76_wire_constant) (binary_77_wire)
    // (u_in + b)
    +[binary_80_inst] (u_in_23 b) (binary_80_wire)
    // ((u_in + b) && z1)
    &&[binary_82_inst] (binary_80_wire simple_obj_ref_81_wire_constant) (binary_82_wire)
    // (((u_in + b) && z1) >> 1 )
    >>[binary_84_inst] (binary_82_wire expr_83_wire_constant) (binary_84_wire)
    // (u_in && z1)
    &&[binary_87_inst] (u_in_23 simple_obj_ref_86_wire_constant) (binary_87_wire)
    // ((u_in && z1) >> 1 )
    >>[binary_89_inst] (binary_87_wire expr_88_wire_constant) (binary_89_wire)
    // ( $mux (a_0 [] 0 ) (((u_in + b) && z1) >> 1 )  ((u_in && z1) >> 1 ) ) 
    ? [ternary_90_inst] (binary_77_wire binary_84_wire binary_89_wire) (nu_91)
    // 				u := ( $cast ($uint<10>) (nu >> 1 ) )
    // file ConcatBitsel.aa, line 27
    // (nu >> 1 )
    >>[binary_95_inst] (nu_91 expr_94_wire_constant) (binary_95_wire)
    // ( $cast ($uint<10>) (nu >> 1 ) )
    := [type_cast_96_inst] (binary_95_wire) (u_97)
    // 			ctr := (../:ctr >> 1 )
    // file ConcatBitsel.aa, line 29
    // (../:ctr >> 1 )
    >>[binary_102_inst] (ctr_37 expr_101_wire_constant) (ctr_103)
    // datapath-instances for if  
    // file ConcatBitsel.aa, line 34
    // (%nxt:ctr [] 0 )
    [][binary_108_inst] (ctr_103 expr_107_wire_constant) (binary_108_wire)
    ==0? [if_stmt_105_branch] (binary_108_wire)
    // 	aXb := (%mainloop%nxt%ub:u && %mainloop%nxt%vb:v)
    // file ConcatBitsel.aa, line 36
    // (%mainloop%nxt%ub:u && %mainloop%nxt%vb:v)
    &&[binary_117_inst] (u_97 v_71) (aXb)
  }
  // end data-path
  // CP-DP links for block %shift_and_add_multiplier%mainloop
  // file ConcatBitsel.aa, line 10
  // CP-DP links for merge  
  // file ConcatBitsel.aa, line 12
  phi_stmt_23 <=> (branch_block_stmt_21/branch_block_stmt_21__entry___PhiReq/phi_stmt_23/phi_stmt_23_req branch_block_stmt_21/loopback_PhiReq/phi_stmt_23/phi_stmt_23_req) (branch_block_stmt_21/merge_stmt_22_PhiAck/phi_stmt_23_ack)
  phi_stmt_27 <=> (branch_block_stmt_21/branch_block_stmt_21__entry___PhiReq/phi_stmt_27/phi_stmt_27_req branch_block_stmt_21/loopback_PhiReq/phi_stmt_27/phi_stmt_27_req) (branch_block_stmt_21/merge_stmt_22_PhiAck/phi_stmt_27_ack)
  // (a_0 >> 1 )
  binary_36_inst <=> (branch_block_stmt_21/loopback_PhiReq/phi_stmt_31/binary_36/rr branch_block_stmt_21/loopback_PhiReq/phi_stmt_31/binary_36/cr) (branch_block_stmt_21/loopback_PhiReq/phi_stmt_31/binary_36/ra branch_block_stmt_21/loopback_PhiReq/phi_stmt_31/binary_36/ca)
  phi_stmt_31 <=> (branch_block_stmt_21/branch_block_stmt_21__entry___PhiReq/phi_stmt_31/phi_stmt_31_req branch_block_stmt_21/loopback_PhiReq/phi_stmt_31/phi_stmt_31_req) (branch_block_stmt_21/merge_stmt_22_PhiAck/phi_stmt_31_ack)
  phi_stmt_37 <=> (branch_block_stmt_21/branch_block_stmt_21__entry___PhiReq/phi_stmt_37/phi_stmt_37_req branch_block_stmt_21/loopback_PhiReq/phi_stmt_37/phi_stmt_37_req) (branch_block_stmt_21/merge_stmt_22_PhiAck/phi_stmt_37_ack)
  // CP-DP links for block %shift_and_add_multiplier%mainloop%nxt
  // file ConcatBitsel.aa, line 19
  // CP-DP links for block %shift_and_add_multiplier%mainloop%nxt%vb
  // file ConcatBitsel.aa, line 21
  // 				nv := (((( $mux (a_0 [] 0 ) (((u_in + b) && z1) >> 1 )  ((u_in && z1) >> 1 ) )  [] 0 ) && v_in) >> 1 )
  // file ConcatBitsel.aa, line 22
  // (a_0 [] 0 )
  binary_47_inst <=> (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/binary_64_inputs/binary_62/binary_62_inputs/ternary_60/ternary_60_inputs/binary_47/rr branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/binary_64_inputs/binary_62/binary_62_inputs/ternary_60/ternary_60_inputs/binary_47/cr) (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/binary_64_inputs/binary_62/binary_62_inputs/ternary_60/ternary_60_inputs/binary_47/ra branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/binary_64_inputs/binary_62/binary_62_inputs/ternary_60/ternary_60_inputs/binary_47/ca)
  // (u_in + b)
  binary_50_inst <=> (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/binary_64_inputs/binary_62/binary_62_inputs/ternary_60/ternary_60_inputs/binary_54/binary_54_inputs/binary_52/binary_52_inputs/binary_50/rr branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/binary_64_inputs/binary_62/binary_62_inputs/ternary_60/ternary_60_inputs/binary_54/binary_54_inputs/binary_52/binary_52_inputs/binary_50/cr) (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/binary_64_inputs/binary_62/binary_62_inputs/ternary_60/ternary_60_inputs/binary_54/binary_54_inputs/binary_52/binary_52_inputs/binary_50/ra branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/binary_64_inputs/binary_62/binary_62_inputs/ternary_60/ternary_60_inputs/binary_54/binary_54_inputs/binary_52/binary_52_inputs/binary_50/ca)
  // ((u_in + b) && z1)
  binary_52_inst <=> (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/binary_64_inputs/binary_62/binary_62_inputs/ternary_60/ternary_60_inputs/binary_54/binary_54_inputs/binary_52/rr branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/binary_64_inputs/binary_62/binary_62_inputs/ternary_60/ternary_60_inputs/binary_54/binary_54_inputs/binary_52/cr) (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/binary_64_inputs/binary_62/binary_62_inputs/ternary_60/ternary_60_inputs/binary_54/binary_54_inputs/binary_52/ra branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/binary_64_inputs/binary_62/binary_62_inputs/ternary_60/ternary_60_inputs/binary_54/binary_54_inputs/binary_52/ca)
  // (((u_in + b) && z1) >> 1 )
  binary_54_inst <=> (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/binary_64_inputs/binary_62/binary_62_inputs/ternary_60/ternary_60_inputs/binary_54/rr branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/binary_64_inputs/binary_62/binary_62_inputs/ternary_60/ternary_60_inputs/binary_54/cr) (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/binary_64_inputs/binary_62/binary_62_inputs/ternary_60/ternary_60_inputs/binary_54/ra branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/binary_64_inputs/binary_62/binary_62_inputs/ternary_60/ternary_60_inputs/binary_54/ca)
  // (u_in && z1)
  binary_57_inst <=> (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/binary_64_inputs/binary_62/binary_62_inputs/ternary_60/ternary_60_inputs/binary_59/binary_59_inputs/binary_57/rr branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/binary_64_inputs/binary_62/binary_62_inputs/ternary_60/ternary_60_inputs/binary_59/binary_59_inputs/binary_57/cr) (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/binary_64_inputs/binary_62/binary_62_inputs/ternary_60/ternary_60_inputs/binary_59/binary_59_inputs/binary_57/ra branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/binary_64_inputs/binary_62/binary_62_inputs/ternary_60/ternary_60_inputs/binary_59/binary_59_inputs/binary_57/ca)
  // ((u_in && z1) >> 1 )
  binary_59_inst <=> (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/binary_64_inputs/binary_62/binary_62_inputs/ternary_60/ternary_60_inputs/binary_59/rr branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/binary_64_inputs/binary_62/binary_62_inputs/ternary_60/ternary_60_inputs/binary_59/cr) (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/binary_64_inputs/binary_62/binary_62_inputs/ternary_60/ternary_60_inputs/binary_59/ra branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/binary_64_inputs/binary_62/binary_62_inputs/ternary_60/ternary_60_inputs/binary_59/ca)
  // ( $mux (a_0 [] 0 ) (((u_in + b) && z1) >> 1 )  ((u_in && z1) >> 1 ) ) 
  ternary_60_inst <=> (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/binary_64_inputs/binary_62/binary_62_inputs/ternary_60/req) (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/binary_64_inputs/binary_62/binary_62_inputs/ternary_60/ack)
  // (( $mux (a_0 [] 0 ) (((u_in + b) && z1) >> 1 )  ((u_in && z1) >> 1 ) )  [] 0 )
  binary_62_inst <=> (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/binary_64_inputs/binary_62/rr branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/binary_64_inputs/binary_62/cr) (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/binary_64_inputs/binary_62/ra branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/binary_64_inputs/binary_62/ca)
  // ((( $mux (a_0 [] 0 ) (((u_in + b) && z1) >> 1 )  ((u_in && z1) >> 1 ) )  [] 0 ) && v_in)
  binary_64_inst <=> (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/rr branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/cr) (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/ra branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/binary_66_inputs/binary_64/ca)
  // (((( $mux (a_0 [] 0 ) (((u_in + b) && z1) >> 1 )  ((u_in && z1) >> 1 ) )  [] 0 ) && v_in) >> 1 )
  binary_66_inst <=> (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/rr branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/cr) (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/ra branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_67/binary_66/ca)
  // 				v := ( $cast ($uint<10>) nv )
  // file ConcatBitsel.aa, line 23
  // ( $cast ($uint<10>) nv )
  type_cast_70_inst <=> (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_71/type_cast_70/req) (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_43/assign_stmt_71/type_cast_70/ack)
  // CP-DP links for block %shift_and_add_multiplier%mainloop%nxt%ub
  // file ConcatBitsel.aa, line 25
  // 				nu := ( $mux (a_0 [] 0 ) (((u_in + b) && z1) >> 1 )  ((u_in && z1) >> 1 ) ) 
  // file ConcatBitsel.aa, line 26
  // (a_0 [] 0 )
  binary_77_inst <=> (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_91/ternary_90/ternary_90_inputs/binary_77/rr branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_91/ternary_90/ternary_90_inputs/binary_77/cr) (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_91/ternary_90/ternary_90_inputs/binary_77/ra branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_91/ternary_90/ternary_90_inputs/binary_77/ca)
  // (u_in + b)
  binary_80_inst <=> (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_91/ternary_90/ternary_90_inputs/binary_84/binary_84_inputs/binary_82/binary_82_inputs/binary_80/rr branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_91/ternary_90/ternary_90_inputs/binary_84/binary_84_inputs/binary_82/binary_82_inputs/binary_80/cr) (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_91/ternary_90/ternary_90_inputs/binary_84/binary_84_inputs/binary_82/binary_82_inputs/binary_80/ra branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_91/ternary_90/ternary_90_inputs/binary_84/binary_84_inputs/binary_82/binary_82_inputs/binary_80/ca)
  // ((u_in + b) && z1)
  binary_82_inst <=> (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_91/ternary_90/ternary_90_inputs/binary_84/binary_84_inputs/binary_82/rr branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_91/ternary_90/ternary_90_inputs/binary_84/binary_84_inputs/binary_82/cr) (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_91/ternary_90/ternary_90_inputs/binary_84/binary_84_inputs/binary_82/ra branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_91/ternary_90/ternary_90_inputs/binary_84/binary_84_inputs/binary_82/ca)
  // (((u_in + b) && z1) >> 1 )
  binary_84_inst <=> (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_91/ternary_90/ternary_90_inputs/binary_84/rr branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_91/ternary_90/ternary_90_inputs/binary_84/cr) (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_91/ternary_90/ternary_90_inputs/binary_84/ra branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_91/ternary_90/ternary_90_inputs/binary_84/ca)
  // (u_in && z1)
  binary_87_inst <=> (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_91/ternary_90/ternary_90_inputs/binary_89/binary_89_inputs/binary_87/rr branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_91/ternary_90/ternary_90_inputs/binary_89/binary_89_inputs/binary_87/cr) (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_91/ternary_90/ternary_90_inputs/binary_89/binary_89_inputs/binary_87/ra branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_91/ternary_90/ternary_90_inputs/binary_89/binary_89_inputs/binary_87/ca)
  // ((u_in && z1) >> 1 )
  binary_89_inst <=> (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_91/ternary_90/ternary_90_inputs/binary_89/rr branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_91/ternary_90/ternary_90_inputs/binary_89/cr) (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_91/ternary_90/ternary_90_inputs/binary_89/ra branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_91/ternary_90/ternary_90_inputs/binary_89/ca)
  // ( $mux (a_0 [] 0 ) (((u_in + b) && z1) >> 1 )  ((u_in && z1) >> 1 ) ) 
  ternary_90_inst <=> (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_91/ternary_90/req) (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_91/ternary_90/ack)
  // 				u := ( $cast ($uint<10>) (nu >> 1 ) )
  // file ConcatBitsel.aa, line 27
  // (nu >> 1 )
  binary_95_inst <=> (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_97/type_cast_96/binary_95/rr branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_97/type_cast_96/binary_95/cr) (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_97/type_cast_96/binary_95/ra branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_97/type_cast_96/binary_95/ca)
  // ( $cast ($uint<10>) (nu >> 1 ) )
  type_cast_96_inst <=> (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_97/type_cast_96/req) (branch_block_stmt_21/parallel_block_stmt_42/series_block_stmt_73/assign_stmt_97/type_cast_96/ack)
  // 			ctr := (../:ctr >> 1 )
  // file ConcatBitsel.aa, line 29
  // (../:ctr >> 1 )
  binary_102_inst <=> (branch_block_stmt_21/parallel_block_stmt_42/assign_stmt_103/binary_102/rr branch_block_stmt_21/parallel_block_stmt_42/assign_stmt_103/binary_102/cr) (branch_block_stmt_21/parallel_block_stmt_42/assign_stmt_103/binary_102/ra branch_block_stmt_21/parallel_block_stmt_42/assign_stmt_103/binary_102/ca)
  // CP-DP links for if  
  // file ConcatBitsel.aa, line 34
  // (%nxt:ctr [] 0 )
  binary_108_inst <=> (branch_block_stmt_21/if_stmt_105_eval_test/binary_108/rr branch_block_stmt_21/if_stmt_105_eval_test/binary_108/cr) (branch_block_stmt_21/if_stmt_105_eval_test/binary_108/ra branch_block_stmt_21/if_stmt_105_eval_test/binary_108/ca)
  if_stmt_105_branch <=> (branch_block_stmt_21/if_stmt_105_eval_test/branch_req) (branch_block_stmt_21/if_stmt_105_else_link/else_choice_transition branch_block_stmt_21/if_stmt_105_if_link/if_choice_transition)
  // 	aXb := (%mainloop%nxt%ub:u && %mainloop%nxt%vb:v)
  // file ConcatBitsel.aa, line 36
  // (%mainloop%nxt%ub:u && %mainloop%nxt%vb:v)
  binary_117_inst <=> (assign_stmt_118/binary_117/rr assign_stmt_118/binary_117/cr) (assign_stmt_118/binary_117/ra assign_stmt_118/binary_117/ca)
}
$module [test_bench] 
{
  $out ret_success:$int<1>
  $CP 
  {
    // begin control-path 
    // 	a := 23 
    // file ConcatBitsel.aa, line 45
    ;;[assign_stmt_124] // file ConcatBitsel.aa, line 45
    {
      $T [dummy] // assignment evaluates to a constant 
    }
    // end assignment statement assign_stmt_124
    // 	b := 17 
    // file ConcatBitsel.aa, line 46
    ;;[assign_stmt_127] // file ConcatBitsel.aa, line 46
    {
      $T [dummy] // assignment evaluates to a constant 
    }
    // end assignment statement assign_stmt_127
    // 	c := (a * b)
    // file ConcatBitsel.aa, line 47
    ;;[assign_stmt_132] // file ConcatBitsel.aa, line 47
    {
      $T [dummy] // assignment evaluates to a constant 
    }
    // end assignment statement assign_stmt_132
    // 	$call shift_and_add_multiplier (a b ) (d )
    // file ConcatBitsel.aa, line 48
    ;;[call_stmt_136] 
    {
      // call statement file ConcatBitsel.aa, line 48
      ||[call_stmt_136_in_args_] 
      {
        // input arguments
      }
      $T [crr] $T [cra] $T [ccr] $T [cca]
      ||[call_stmt_136_out_args_] 
      {
        // output arguments
      }
    }
    // end call-statement call_stmt_136
    // 	ret_success := (c == ( $cast ($uint<10>) d ))
    // file ConcatBitsel.aa, line 49
    ;;[assign_stmt_142] // file ConcatBitsel.aa, line 49
    {
      // (c == ( $cast ($uint<10>) d ))
      ;;[binary_141] 
      {
        // binary expression 
        ||[binary_141_inputs] 
        {
          // ( $cast ($uint<10>) d )
          ;;[type_cast_140] 
          {
            // type-cast expression
            $T [req] $T [ack] //  type-conversion.. 
          }
        }
        $T [rr] $T [ra] $T [cr] $T [ca] // (split) binary operation 
      }
    }
    // end assignment statement assign_stmt_142
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %test_bench
    // file ConcatBitsel.aa, line 40
    // 	a := 23 
    // file ConcatBitsel.aa, line 45
    $constant $W[a_124] : $int<10> := _b0000010111 // 23
    // 	b := 17 
    // file ConcatBitsel.aa, line 46
    $constant $W[b_127] : $int<10> := _b0000010001 // 17
    // 	c := (a * b)
    // file ConcatBitsel.aa, line 47
    $constant $W[c_132] : $int<10> := _b0110000111 // 391
    // wire declarations for: 	$call shift_and_add_multiplier (a b ) (d )
    // file ConcatBitsel.aa, line 48
    // d
    $W[d_136] : $int<20>
    // 	ret_success := (c == ( $cast ($uint<10>) d ))
    // file ConcatBitsel.aa, line 49
    // ( $cast ($uint<10>) d )
    $intermediate $W[type_cast_140_wire] : $int<10>
    // ret_success
    // 	$call shift_and_add_multiplier (a b ) (d )
    // file ConcatBitsel.aa, line 48
    $call [call_stmt_136_call] $module shift_and_add_multiplier(a_124 b_127) (d_136)
    // 	ret_success := (c == ( $cast ($uint<10>) d ))
    // file ConcatBitsel.aa, line 49
    // ( $cast ($uint<10>) d )
    := [type_cast_140_inst] (d_136) (type_cast_140_wire)
    // (c == ( $cast ($uint<10>) d ))
    ==[binary_141_inst] (c_132 type_cast_140_wire) (ret_success)
  }
  // end data-path
  // 	$call shift_and_add_multiplier (a b ) (d )
  // file ConcatBitsel.aa, line 48
  call_stmt_136_call <=> (call_stmt_136/crr call_stmt_136/ccr) (call_stmt_136/cra call_stmt_136/cca)
  // 	ret_success := (c == ( $cast ($uint<10>) d ))
  // file ConcatBitsel.aa, line 49
  // ( $cast ($uint<10>) d )
  type_cast_140_inst <=> (assign_stmt_142/binary_141/binary_141_inputs/type_cast_140/req) (assign_stmt_142/binary_141/binary_141_inputs/type_cast_140/ack)
  // (c == ( $cast ($uint<10>) d ))
  binary_141_inst <=> (assign_stmt_142/binary_141/rr assign_stmt_142/binary_141/cr) (assign_stmt_142/binary_141/ra assign_stmt_142/binary_141/ca)
}
