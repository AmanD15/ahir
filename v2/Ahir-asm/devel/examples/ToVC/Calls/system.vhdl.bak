library ieee;
use ieee.std_logic_1164.all;
package vc_system_package is -- 
  -- 
end package vc_system_package;
library ieee;
use ieee.std_logic_1164.all;
library ahir;
use ahir.memory_subsystem_package.all;
use ahir.types.all;
use ahir.subprograms.all;
use ahir.components.all;
use ahir.basecomponents.all;
use ahir.operatorpackage.all;
library work;
use work.vc_system_package.all;
entity main is -- 
  port ( -- 
    a : in  std_logic_vector(9 downto 0);
    b : in  std_logic_vector(9 downto 0);
    c : out  std_logic_vector(9 downto 0);
    clk : in std_logic;
    reset : in std_logic;
    start : in std_logic;
    fin   : out std_logic;
    sum_mod_call_reqs : out  std_logic_vector(1 downto 0);
    sum_mod_call_acks : in   std_logic_vector(1 downto 0);
    sum_mod_call_data : out  std_logic_vector(39 downto 0);
    sum_mod_call_tag  :  out  std_logic_vector(1 downto 0);
    sum_mod_return_reqs : out  std_logic_vector(1 downto 0);
    sum_mod_return_acks : in   std_logic_vector(1 downto 0);
    sum_mod_return_data : in   std_logic_vector(19 downto 0);
    sum_mod_return_tag :  in   std_logic_vector(1 downto 0);
    tag_in: in std_logic_vector(0 downto 0);
    tag_out: out std_logic_vector(0 downto 0)-- 
  );
  -- 
end entity main;
architecture Default of main is -- 
  -- always true...
  signal always_true_symbol: Boolean;
  -- links between control-path and data-path
  signal parallel_block_stmt_15Xcall_stmt_19Xcrr_cp_to_dp : boolean;
  signal parallel_block_stmt_15Xcall_stmt_19Xcra_dp_to_cp : boolean;
  signal parallel_block_stmt_15Xcall_stmt_19Xccr_cp_to_dp : boolean;
  signal parallel_block_stmt_15Xcall_stmt_19Xcca_dp_to_cp : boolean;
  signal parallel_block_stmt_15Xcall_stmt_23Xcrr_cp_to_dp : boolean;
  signal parallel_block_stmt_15Xcall_stmt_23Xcra_dp_to_cp : boolean;
  signal parallel_block_stmt_15Xcall_stmt_23Xccr_cp_to_dp : boolean;
  signal parallel_block_stmt_15Xcall_stmt_23Xcca_dp_to_cp : boolean;
  signal call_stmt_28Xcrr_cp_to_dp : boolean;
  signal call_stmt_28Xcra_dp_to_cp : boolean;
  signal call_stmt_28Xccr_cp_to_dp : boolean;
  signal call_stmt_28Xcca_dp_to_cp : boolean;
  -- 
begin --  
  -- tag register
  process(clk) 
  begin -- 
    if clk'event and clk = '1' then -- 
      if start='1' then -- 
        tag_out <= tag_in; -- 
      end if; -- 
    end if; -- 
  end process;
  -- the control path
  always_true_symbol <= true; 
  cp_16: Block -- control-path 
    signal cp_16_start: Boolean;
    signal cp_17_symbol: Boolean;
    signal cp_18_symbol: Boolean;
    signal cp_19_symbol : Boolean;
    signal cp_48_symbol : Boolean;
    -- 
  begin -- 
    cp_16_start <=  true when start = '1' else false; -- control passed to control-path.
    cp_17_symbol  <= cp_16_start; -- transition $entry
    cp_19: Block -- parallel_block_stmt_15 
      signal cp_19_start: Boolean;
      signal cp_20_symbol: Boolean;
      signal cp_21_symbol: Boolean;
      signal cp_22_symbol : Boolean;
      signal cp_35_symbol : Boolean;
      -- 
    begin -- 
      cp_19_start <= cp_17_symbol; -- control passed to block
      cp_20_symbol  <= cp_19_start; -- transition parallel_block_stmt_15/$entry
      cp_22: Block -- parallel_block_stmt_15/call_stmt_19 
        signal cp_22_start: Boolean;
        signal cp_23_symbol: Boolean;
        signal cp_24_symbol: Boolean;
        signal cp_25_symbol : Boolean;
        signal cp_28_symbol : Boolean;
        signal cp_29_symbol : Boolean;
        signal cp_30_symbol : Boolean;
        signal cp_31_symbol : Boolean;
        signal cp_32_symbol : Boolean;
        -- 
      begin -- 
        cp_22_start <= cp_20_symbol; -- control passed to block
        cp_23_symbol  <= cp_22_start; -- transition parallel_block_stmt_15/call_stmt_19/$entry
        cp_25: Block -- parallel_block_stmt_15/call_stmt_19/call_stmt_19_in_args_ 
          signal cp_25_start: Boolean;
          signal cp_26_symbol: Boolean;
          signal cp_27_symbol: Boolean;
          -- 
        begin -- 
          cp_25_start <= cp_23_symbol; -- control passed to block
          cp_26_symbol  <= cp_25_start; -- transition parallel_block_stmt_15/call_stmt_19/call_stmt_19_in_args_/$entry
          cp_27_symbol <= cp_26_symbol; -- transition parallel_block_stmt_15/call_stmt_19/call_stmt_19_in_args_/$exit
          cp_25_symbol <= cp_27_symbol; -- control passed from block 
          -- 
        end Block; -- parallel_block_stmt_15/call_stmt_19/call_stmt_19_in_args_
        cp_28_symbol <= cp_25_symbol; -- transition parallel_block_stmt_15/call_stmt_19/crr
        parallel_block_stmt_15Xcall_stmt_19Xcrr_cp_to_dp <= cp_28_symbol; -- link to DP
        cp_29_symbol <= parallel_block_stmt_15Xcall_stmt_19Xcra_dp_to_cp; -- transition parallel_block_stmt_15/call_stmt_19/cra
        cp_30_symbol <= cp_29_symbol; -- transition parallel_block_stmt_15/call_stmt_19/ccr
        parallel_block_stmt_15Xcall_stmt_19Xccr_cp_to_dp <= cp_30_symbol; -- link to DP
        cp_31_symbol <= parallel_block_stmt_15Xcall_stmt_19Xcca_dp_to_cp; -- transition parallel_block_stmt_15/call_stmt_19/cca
        cp_32: Block -- parallel_block_stmt_15/call_stmt_19/call_stmt_19_out_args_ 
          signal cp_32_start: Boolean;
          signal cp_33_symbol: Boolean;
          signal cp_34_symbol: Boolean;
          -- 
        begin -- 
          cp_32_start <= cp_31_symbol; -- control passed to block
          cp_33_symbol  <= cp_32_start; -- transition parallel_block_stmt_15/call_stmt_19/call_stmt_19_out_args_/$entry
          cp_34_symbol <= cp_33_symbol; -- transition parallel_block_stmt_15/call_stmt_19/call_stmt_19_out_args_/$exit
          cp_32_symbol <= cp_34_symbol; -- control passed from block 
          -- 
        end Block; -- parallel_block_stmt_15/call_stmt_19/call_stmt_19_out_args_
        cp_24_symbol <= cp_32_symbol; -- transition parallel_block_stmt_15/call_stmt_19/$exit
        cp_22_symbol <= cp_24_symbol; -- control passed from block 
        -- 
      end Block; -- parallel_block_stmt_15/call_stmt_19
      cp_35: Block -- parallel_block_stmt_15/call_stmt_23 
        signal cp_35_start: Boolean;
        signal cp_36_symbol: Boolean;
        signal cp_37_symbol: Boolean;
        signal cp_38_symbol : Boolean;
        signal cp_41_symbol : Boolean;
        signal cp_42_symbol : Boolean;
        signal cp_43_symbol : Boolean;
        signal cp_44_symbol : Boolean;
        signal cp_45_symbol : Boolean;
        -- 
      begin -- 
        cp_35_start <= cp_20_symbol; -- control passed to block
        cp_36_symbol  <= cp_35_start; -- transition parallel_block_stmt_15/call_stmt_23/$entry
        cp_38: Block -- parallel_block_stmt_15/call_stmt_23/call_stmt_23_in_args_ 
          signal cp_38_start: Boolean;
          signal cp_39_symbol: Boolean;
          signal cp_40_symbol: Boolean;
          -- 
        begin -- 
          cp_38_start <= cp_36_symbol; -- control passed to block
          cp_39_symbol  <= cp_38_start; -- transition parallel_block_stmt_15/call_stmt_23/call_stmt_23_in_args_/$entry
          cp_40_symbol <= cp_39_symbol; -- transition parallel_block_stmt_15/call_stmt_23/call_stmt_23_in_args_/$exit
          cp_38_symbol <= cp_40_symbol; -- control passed from block 
          -- 
        end Block; -- parallel_block_stmt_15/call_stmt_23/call_stmt_23_in_args_
        cp_41_symbol <= cp_38_symbol; -- transition parallel_block_stmt_15/call_stmt_23/crr
        parallel_block_stmt_15Xcall_stmt_23Xcrr_cp_to_dp <= cp_41_symbol; -- link to DP
        cp_42_symbol <= parallel_block_stmt_15Xcall_stmt_23Xcra_dp_to_cp; -- transition parallel_block_stmt_15/call_stmt_23/cra
        cp_43_symbol <= cp_42_symbol; -- transition parallel_block_stmt_15/call_stmt_23/ccr
        parallel_block_stmt_15Xcall_stmt_23Xccr_cp_to_dp <= cp_43_symbol; -- link to DP
        cp_44_symbol <= parallel_block_stmt_15Xcall_stmt_23Xcca_dp_to_cp; -- transition parallel_block_stmt_15/call_stmt_23/cca
        cp_45: Block -- parallel_block_stmt_15/call_stmt_23/call_stmt_23_out_args_ 
          signal cp_45_start: Boolean;
          signal cp_46_symbol: Boolean;
          signal cp_47_symbol: Boolean;
          -- 
        begin -- 
          cp_45_start <= cp_44_symbol; -- control passed to block
          cp_46_symbol  <= cp_45_start; -- transition parallel_block_stmt_15/call_stmt_23/call_stmt_23_out_args_/$entry
          cp_47_symbol <= cp_46_symbol; -- transition parallel_block_stmt_15/call_stmt_23/call_stmt_23_out_args_/$exit
          cp_45_symbol <= cp_47_symbol; -- control passed from block 
          -- 
        end Block; -- parallel_block_stmt_15/call_stmt_23/call_stmt_23_out_args_
        cp_37_symbol <= cp_45_symbol; -- transition parallel_block_stmt_15/call_stmt_23/$exit
        cp_35_symbol <= cp_37_symbol; -- control passed from block 
        -- 
      end Block; -- parallel_block_stmt_15/call_stmt_23
      cp_21_block : Block -- non-trivial join transition parallel_block_stmt_15/$exit 
        signal cp_21_predecessors: BooleanArray(1 downto 0);
        signal cp_21_p0_pred: BooleanArray(0 downto 0);
        signal cp_21_p0_succ: BooleanArray(0 downto 0);
        signal cp_21_p1_pred: BooleanArray(0 downto 0);
        signal cp_21_p1_succ: BooleanArray(0 downto 0);
        -- 
      begin -- 
        cp_21_0_place: Place -- 
          generic map(marking => false)
          port map( -- 
            cp_21_p0_pred, cp_21_p0_succ, cp_21_predecessors(0), clk, reset-- 
          ); -- 
        cp_21_p0_succ(0) <=  cp_21_symbol;
        cp_21_p0_pred(0) <=  cp_22_symbol;
        cp_21_1_place: Place -- 
          generic map(marking => false)
          port map( -- 
            cp_21_p1_pred, cp_21_p1_succ, cp_21_predecessors(1), clk, reset-- 
          ); -- 
        cp_21_p1_succ(0) <=  cp_21_symbol;
        cp_21_p1_pred(0) <=  cp_35_symbol;
        cp_21_symbol <= OrReduce(cp_21_predecessors); 
        -- 
      end Block; -- non-trivial join transition parallel_block_stmt_15/$exit
      cp_19_symbol <= cp_21_symbol; -- control passed from block 
      -- 
    end Block; -- parallel_block_stmt_15
    cp_48: Block -- call_stmt_28 
      signal cp_48_start: Boolean;
      signal cp_49_symbol: Boolean;
      signal cp_50_symbol: Boolean;
      signal cp_51_symbol : Boolean;
      signal cp_54_symbol : Boolean;
      signal cp_55_symbol : Boolean;
      signal cp_56_symbol : Boolean;
      signal cp_57_symbol : Boolean;
      signal cp_58_symbol : Boolean;
      -- 
    begin -- 
      cp_48_start <= cp_19_symbol; -- control passed to block
      cp_49_symbol  <= cp_48_start; -- transition call_stmt_28/$entry
      cp_51: Block -- call_stmt_28/call_stmt_28_in_args_ 
        signal cp_51_start: Boolean;
        signal cp_52_symbol: Boolean;
        signal cp_53_symbol: Boolean;
        -- 
      begin -- 
        cp_51_start <= cp_49_symbol; -- control passed to block
        cp_52_symbol  <= cp_51_start; -- transition call_stmt_28/call_stmt_28_in_args_/$entry
        cp_53_symbol <= cp_52_symbol; -- transition call_stmt_28/call_stmt_28_in_args_/$exit
        cp_51_symbol <= cp_53_symbol; -- control passed from block 
        -- 
      end Block; -- call_stmt_28/call_stmt_28_in_args_
      cp_54_symbol <= cp_51_symbol; -- transition call_stmt_28/crr
      call_stmt_28Xcrr_cp_to_dp <= cp_54_symbol; -- link to DP
      cp_55_symbol <= call_stmt_28Xcra_dp_to_cp; -- transition call_stmt_28/cra
      cp_56_symbol <= cp_55_symbol; -- transition call_stmt_28/ccr
      call_stmt_28Xccr_cp_to_dp <= cp_56_symbol; -- link to DP
      cp_57_symbol <= call_stmt_28Xcca_dp_to_cp; -- transition call_stmt_28/cca
      cp_58: Block -- call_stmt_28/call_stmt_28_out_args_ 
        signal cp_58_start: Boolean;
        signal cp_59_symbol: Boolean;
        signal cp_60_symbol: Boolean;
        -- 
      begin -- 
        cp_58_start <= cp_57_symbol; -- control passed to block
        cp_59_symbol  <= cp_58_start; -- transition call_stmt_28/call_stmt_28_out_args_/$entry
        cp_60_symbol <= cp_59_symbol; -- transition call_stmt_28/call_stmt_28_out_args_/$exit
        cp_58_symbol <= cp_60_symbol; -- control passed from block 
        -- 
      end Block; -- call_stmt_28/call_stmt_28_out_args_
      cp_50_symbol <= cp_58_symbol; -- transition call_stmt_28/$exit
      cp_48_symbol <= cp_50_symbol; -- control passed from block 
      -- 
    end Block; -- call_stmt_28
    cp_18_symbol <= cp_48_symbol; -- transition $exit
    fin  <=  '1' when cp_18_symbol else '0'; -- fin symbol when control-path exits
    -- 
  end Block; -- control-path
  -- the data path
  data_path: Block -- 
    signal s_19 : std_logic_vector(9 downto 0);
    signal t_23 : std_logic_vector(9 downto 0);
    -- 
  begin -- 
    -- shared call operator group (0) : call_stmt_19_call call_stmt_28_call 
    CallGroup0: Block -- 
      signal data_in: std_logic_vector(39 downto 0);
      signal data_out: std_logic_vector(19 downto 0);
      signal reqR, ackR, reqL, ackL : BooleanArray( 1 downto 0);
      -- 
    begin -- 
      reqL(1) <= parallel_block_stmt_15Xcall_stmt_19Xcrr_cp_to_dp;
      reqL(0) <= call_stmt_28Xcrr_cp_to_dp;
      parallel_block_stmt_15Xcall_stmt_19Xcra_dp_to_cp <= ackL(1);
      call_stmt_28Xcra_dp_to_cp <= ackL(0);
      reqR(1) <= parallel_block_stmt_15Xcall_stmt_19Xccr_cp_to_dp;
      reqR(0) <= call_stmt_28Xccr_cp_to_dp;
      parallel_block_stmt_15Xcall_stmt_19Xcca_dp_to_cp <= ackR(1);
      call_stmt_28Xcca_dp_to_cp <= ackR(0);
      data_in <= a & a & s_19 & t_23;
      s_19 <= data_out(19 downto 10);
      c <= data_out(9 downto 0);
      CallReq: InputMuxBase -- 
        generic map (iwidth => 40, owidth => 20, twidth => 1, nreqs => 2,  no_arbitration => true)
        port map ( -- 
          reqL => reqL , 
          ackL => ackL , 
          dataL => data_in, 
          reqR => sum_mod_call_reqs(1),
          ackR => sum_mod_call_acks(1),
          dataR => sum_mod_call_data(39 downto 20),
          tagR => sum_mod_call_tag(1 downto 1),
          clk => clk, reset => reset -- 
        ); -- 
      CallComplete: OutputDemuxBase -- 
        generic map (iwidth => 10, owidth => 20, twidth => 1, nreqs => 2,  no_arbitration => true)
        port map ( -- 
          reqR => reqR , 
          ackR => ackR , 
          dataR => data_out, 
          reqL => sum_mod_return_acks(1), -- cross-over
          ackL => sum_mod_return_reqs(1), -- cross-over
          dataL => sum_mod_return_data(19 downto 10),
          tagL => sum_mod_return_tag(1 downto 1),
          clk => clk,
          reset => reset -- 
        ); -- 
      -- 
    end Block; -- call group 0
    -- shared call operator group (1) : call_stmt_23_call 
    CallGroup1: Block -- 
      signal data_in: std_logic_vector(19 downto 0);
      signal data_out: std_logic_vector(9 downto 0);
      signal reqR, ackR, reqL, ackL : BooleanArray( 0 downto 0);
      -- 
    begin -- 
      reqL(0) <= parallel_block_stmt_15Xcall_stmt_23Xcrr_cp_to_dp;
      parallel_block_stmt_15Xcall_stmt_23Xcra_dp_to_cp <= ackL(0);
      reqR(0) <= parallel_block_stmt_15Xcall_stmt_23Xccr_cp_to_dp;
      parallel_block_stmt_15Xcall_stmt_23Xcca_dp_to_cp <= ackR(0);
      data_in <= b & b;
      t_23 <= data_out(9 downto 0);
      CallReq: InputMuxBase -- 
        generic map (iwidth => 20, owidth => 20, twidth => 1, nreqs => 1,  no_arbitration => true)
        port map ( -- 
          reqL => reqL , 
          ackL => ackL , 
          dataL => data_in, 
          reqR => sum_mod_call_reqs(0),
          ackR => sum_mod_call_acks(0),
          dataR => sum_mod_call_data(19 downto 0),
          tagR => sum_mod_call_tag(0 downto 0),
          clk => clk, reset => reset -- 
        ); -- 
      CallComplete: OutputDemuxBase -- 
        generic map (iwidth => 10, owidth => 10, twidth => 1, nreqs => 1,  no_arbitration => true)
        port map ( -- 
          reqR => reqR , 
          ackR => ackR , 
          dataR => data_out, 
          reqL => sum_mod_return_acks(0), -- cross-over
          ackL => sum_mod_return_reqs(0), -- cross-over
          dataL => sum_mod_return_data(9 downto 0),
          tagL => sum_mod_return_tag(0 downto 0),
          clk => clk,
          reset => reset -- 
        ); -- 
      -- 
    end Block; -- call group 1
    -- 
  end Block; -- data_path
  -- 
end Default;
library ieee;
use ieee.std_logic_1164.all;
library ahir;
use ahir.memory_subsystem_package.all;
use ahir.types.all;
use ahir.subprograms.all;
use ahir.components.all;
use ahir.basecomponents.all;
use ahir.operatorpackage.all;
library work;
use work.vc_system_package.all;
entity sum_mod is -- 
  port ( -- 
    a : in  std_logic_vector(9 downto 0);
    b : in  std_logic_vector(9 downto 0);
    c : out  std_logic_vector(9 downto 0);
    clk : in std_logic;
    reset : in std_logic;
    start : in std_logic;
    fin   : out std_logic;
    tag_in: in std_logic_vector(0 downto 0);
    tag_out: out std_logic_vector(0 downto 0)-- 
  );
  -- 
end entity sum_mod;
architecture Default of sum_mod is -- 
  -- always true...
  signal always_true_symbol: Boolean;
  -- links between control-path and data-path
  signal assign_stmt_9Xbinary_8Xrr_cp_to_dp : boolean;
  signal assign_stmt_9Xbinary_8Xra_dp_to_cp : boolean;
  signal assign_stmt_9Xbinary_8Xcr_cp_to_dp : boolean;
  signal assign_stmt_9Xbinary_8Xca_dp_to_cp : boolean;
  -- 
begin --  
  -- tag register
  process(clk) 
  begin -- 
    if clk'event and clk = '1' then -- 
      if start='1' then -- 
        tag_out <= tag_in; -- 
      end if; -- 
    end if; -- 
  end process;
  -- the control path
  always_true_symbol <= true; 
  cp_0: Block -- control-path 
    signal cp_0_start: Boolean;
    signal cp_1_symbol: Boolean;
    signal cp_2_symbol: Boolean;
    signal cp_3_symbol : Boolean;
    -- 
  begin -- 
    cp_0_start <=  true when start = '1' else false; -- control passed to control-path.
    cp_1_symbol  <= cp_0_start; -- transition $entry
    cp_3: Block -- assign_stmt_9 
      signal cp_3_start: Boolean;
      signal cp_4_symbol: Boolean;
      signal cp_5_symbol: Boolean;
      signal cp_6_symbol : Boolean;
      -- 
    begin -- 
      cp_3_start <= cp_1_symbol; -- control passed to block
      cp_4_symbol  <= cp_3_start; -- transition assign_stmt_9/$entry
      cp_6: Block -- assign_stmt_9/binary_8 
        signal cp_6_start: Boolean;
        signal cp_7_symbol: Boolean;
        signal cp_8_symbol: Boolean;
        signal cp_9_symbol : Boolean;
        signal cp_12_symbol : Boolean;
        signal cp_13_symbol : Boolean;
        signal cp_14_symbol : Boolean;
        signal cp_15_symbol : Boolean;
        -- 
      begin -- 
        cp_6_start <= cp_4_symbol; -- control passed to block
        cp_7_symbol  <= cp_6_start; -- transition assign_stmt_9/binary_8/$entry
        cp_9: Block -- assign_stmt_9/binary_8/binary_8_inputs 
          signal cp_9_start: Boolean;
          signal cp_10_symbol: Boolean;
          signal cp_11_symbol: Boolean;
          -- 
        begin -- 
          cp_9_start <= cp_7_symbol; -- control passed to block
          cp_10_symbol  <= cp_9_start; -- transition assign_stmt_9/binary_8/binary_8_inputs/$entry
          cp_11_symbol <= cp_10_symbol; -- transition assign_stmt_9/binary_8/binary_8_inputs/$exit
          cp_9_symbol <= cp_11_symbol; -- control passed from block 
          -- 
        end Block; -- assign_stmt_9/binary_8/binary_8_inputs
        cp_12_symbol <= cp_9_symbol; -- transition assign_stmt_9/binary_8/rr
        assign_stmt_9Xbinary_8Xrr_cp_to_dp <= cp_12_symbol; -- link to DP
        cp_13_symbol <= assign_stmt_9Xbinary_8Xra_dp_to_cp; -- transition assign_stmt_9/binary_8/ra
        cp_14_symbol <= cp_13_symbol; -- transition assign_stmt_9/binary_8/cr
        assign_stmt_9Xbinary_8Xcr_cp_to_dp <= cp_14_symbol; -- link to DP
        cp_15_symbol <= assign_stmt_9Xbinary_8Xca_dp_to_cp; -- transition assign_stmt_9/binary_8/ca
        cp_8_symbol <= cp_15_symbol; -- transition assign_stmt_9/binary_8/$exit
        cp_6_symbol <= cp_8_symbol; -- control passed from block 
        -- 
      end Block; -- assign_stmt_9/binary_8
      cp_5_symbol <= cp_6_symbol; -- transition assign_stmt_9/$exit
      cp_3_symbol <= cp_5_symbol; -- control passed from block 
      -- 
    end Block; -- assign_stmt_9
    cp_2_symbol <= cp_3_symbol; -- transition $exit
    fin  <=  '1' when cp_2_symbol else '0'; -- fin symbol when control-path exits
    -- 
  end Block; -- control-path
  -- the data path
  data_path: Block -- 
    -- 
  begin -- 
    -- shared split operator group (0) : binary_8_inst 
    SplitOperatorGroup0: Block -- 
      signal data_in: std_logic_vector(19 downto 0);
      signal data_out: std_logic_vector(9 downto 0);
      signal reqR, ackR, reqL, ackL : BooleanArray( 0 downto 0);
      -- 
    begin -- 
      reqL(0) <= assign_stmt_9Xbinary_8Xrr_cp_to_dp;
      assign_stmt_9Xbinary_8Xra_dp_to_cp <= ackL(0);
      reqR(0) <= assign_stmt_9Xbinary_8Xcr_cp_to_dp;
      assign_stmt_9Xbinary_8Xca_dp_to_cp <= ackR(0);
      data_in <= a & b;
      c <= data_out(9 downto 0);
      SplitOperator: SplitOperatorShared -- 
        generic map ( -- 
          operator_id => "ApIntAdd",
          input1_is_int => true, 
          input1_characteristic_width => 0, 
          input1_mantissa_width    => 0, 
          iwidth_1  => 10,
          input2_is_int => true, 
          input2_characteristic_width => 0, 
          input2_mantissa_width => 0, 
          iwidth_2      => 10, 
          num_inputs    => 2,
          output_is_int => true,
          output_characteristic_width  => 0, 
          output_mantissa_width => 0, 
          owidth => 10,
          constant_operand => "0",
          use_constant  => false,
          zero_delay => false, 
          no_arbitration => true, 
          num_reqs => 1--
        ) -- 
      port map ( reqL => reqL , ackL => ackL, reqR => reqR, ackR => ackR, dataL => data_in, dataR => data_out, clk => clk, reset => reset);
      -- 
    end Block; -- split operator group 0
    -- 
  end Block; -- data_path
  -- 
end Default;
library ieee;
use ieee.std_logic_1164.all;
library ahir;
use ahir.memory_subsystem_package.all;
use ahir.types.all;
use ahir.subprograms.all;
use ahir.components.all;
use ahir.basecomponents.all;
use ahir.operatorpackage.all;
library work;
use work.vc_system_package.all;
entity test_system is  -- system 
  port (-- 
    main_a : in  std_logic_vector(9 downto 0);
    main_b : in  std_logic_vector(9 downto 0);
    main_c : out  std_logic_vector(9 downto 0);
    main_tag_in: in std_logic_vector(0 downto 0);
    main_tag_out: out std_logic_vector(0 downto 0);
    main_start : in std_logic;
    main_fin   : out std_logic;
    clk : in std_logic;
    reset : in std_logic); -- 
  -- 
end entity; 
architecture Default of test_system is -- system-architecture 
  -- declarations related to module main
  component main is -- 
    port ( -- 
      a : in  std_logic_vector(9 downto 0);
      b : in  std_logic_vector(9 downto 0);
      c : out  std_logic_vector(9 downto 0);
      clk : in std_logic;
      reset : in std_logic;
      start : in std_logic;
      fin   : out std_logic;
      sum_mod_call_reqs : out  std_logic_vector(1 downto 0);
      sum_mod_call_acks : in   std_logic_vector(1 downto 0);
      sum_mod_call_data : out  std_logic_vector(39 downto 0);
      sum_mod_call_tag  :  out  std_logic_vector(1 downto 0);
      sum_mod_return_reqs : out  std_logic_vector(1 downto 0);
      sum_mod_return_acks : in   std_logic_vector(1 downto 0);
      sum_mod_return_data : in   std_logic_vector(19 downto 0);
      sum_mod_return_tag :  in   std_logic_vector(1 downto 0);
      tag_in: in std_logic_vector(0 downto 0);
      tag_out: out std_logic_vector(0 downto 0)-- 
    );
    -- 
  end component;
  -- declarations related to module sum_mod
  component sum_mod is -- 
    port ( -- 
      a : in  std_logic_vector(9 downto 0);
      b : in  std_logic_vector(9 downto 0);
      c : out  std_logic_vector(9 downto 0);
      clk : in std_logic;
      reset : in std_logic;
      start : in std_logic;
      fin   : out std_logic;
      tag_in: in std_logic_vector(0 downto 0);
      tag_out: out std_logic_vector(0 downto 0)-- 
    );
    -- 
  end component;
  -- argument signals for module sum_mod
  signal sum_mod_a :  std_logic_vector(9 downto 0);
  signal sum_mod_b :  std_logic_vector(9 downto 0);
  signal sum_mod_c :  std_logic_vector(9 downto 0);
  signal sum_mod_in_args    : std_logic_vector(19 downto 0);
  signal sum_mod_out_args   : std_logic_vector(9 downto 0);
  signal sum_mod_tag_in    : std_logic_vector(0 downto 0);
  signal sum_mod_tag_out   : std_logic_vector(0 downto 0);
  signal sum_mod_start : std_logic;
  signal sum_mod_fin   : std_logic;
  -- caller side aggregated signals for module sum_mod
  signal sum_mod_call_reqs: std_logic_vector(1 downto 0);
  signal sum_mod_call_acks: std_logic_vector(1 downto 0);
  signal sum_mod_return_reqs: std_logic_vector(1 downto 0);
  signal sum_mod_return_acks: std_logic_vector(1 downto 0);
  signal sum_mod_call_data: std_logic_vector(39 downto 0);
  signal sum_mod_call_tag: std_logic_vector(1 downto 0);
  signal sum_mod_return_data: std_logic_vector(19 downto 0);
  signal sum_mod_return_tag: std_logic_vector(1 downto 0);
  -- 
begin -- 
  -- module main
  main_instance:main-- 
    port map(-- 
      a => main_a,
      b => main_b,
      c => main_c,
      start => main_start,
      fin => main_fin,
      clk => clk,
      reset => reset,
      sum_mod_call_reqs => sum_mod_call_reqs(1 downto 0),
      sum_mod_call_acks => sum_mod_call_acks(1 downto 0),
      sum_mod_call_data => sum_mod_call_data(39 downto 0),
      sum_mod_call_tag => sum_mod_call_tag(1 downto 0),
      sum_mod_return_reqs => sum_mod_return_reqs(1 downto 0),
      sum_mod_return_acks => sum_mod_return_acks(1 downto 0),
      sum_mod_return_data => sum_mod_return_data(19 downto 0),
      sum_mod_return_tag => sum_mod_return_tag(1 downto 0),
      tag_in => main_tag_in,
      tag_out => main_tag_out-- 
    ); -- 
  -- module sum_mod
  sum_mod_a <= sum_mod_in_args(19 downto 10);
  sum_mod_b <= sum_mod_in_args(9 downto 0);
  sum_mod_out_args <= sum_mod_c ;
  -- call arbiter for module sum_mod
  sum_mod_arbiter: CallArbiterUnitary -- 
    generic map( --
      num_reqs => 2,
      call_data_width => 20,
      return_data_width => 10,
      callee_tag_length => 1,
      caller_tag_length => 1--
    )
    port map(-- 
      call_reqs => sum_mod_call_reqs,
      call_acks => sum_mod_call_acks,
      return_reqs => sum_mod_return_reqs,
      return_acks => sum_mod_return_acks,
      call_data  => sum_mod_call_data,
      call_tag  => sum_mod_call_tag,
      return_tag  => sum_mod_return_tag,
      call_in_tag => sum_mod_tag_in,
      call_out_tag => sum_mod_tag_out,
      return_data =>sum_mod_return_data,
      call_start => sum_mod_start,
      call_fin => sum_mod_fin,
      call_in_args => sum_mod_in_args,
      call_out_args => sum_mod_out_args,
      clk => clk, 
      reset => reset --
    ); --
  sum_mod_instance:sum_mod-- 
    port map(-- 
      a => sum_mod_a,
      b => sum_mod_b,
      c => sum_mod_c,
      start => sum_mod_start,
      fin => sum_mod_fin,
      clk => clk,
      reset => reset,
      tag_in => sum_mod_tag_in,
      tag_out => sum_mod_tag_out-- 
    ); -- 
  -- 
end Default;
library ieee;
use ieee.std_logic_1164.all;
library ahir;
use ahir.memory_subsystem_package.all;
use ahir.types.all;
use ahir.subprograms.all;
use ahir.components.all;
use ahir.basecomponents.all;
use ahir.operatorpackage.all;
library work;
use work.vc_system_package.all;
entity test_system_Test_Bench is -- 
  -- 
end entity;
architecture Default of test_system_Test_Bench is -- 
  component test_system is -- 
    port (-- 
      main_a : in  std_logic_vector(9 downto 0);
      main_b : in  std_logic_vector(9 downto 0);
      main_c : out  std_logic_vector(9 downto 0);
      main_tag_in: in std_logic_vector(0 downto 0);
      main_tag_out: out std_logic_vector(0 downto 0);
      main_start : in std_logic;
      main_fin   : out std_logic;
      clk : in std_logic;
      reset : in std_logic); -- 
    -- 
  end component;
  signal clk: std_logic := '0';
  signal reset: std_logic := '1';
  signal main_a :  std_logic_vector(9 downto 0);
  signal main_b :  std_logic_vector(9 downto 0);
  signal main_c :   std_logic_vector(9 downto 0);
  signal main_tag_in: std_logic_vector(0 downto 0);
  signal main_tag_out: std_logic_vector(0 downto 0);
  signal main_start : std_logic := '0';
  signal main_fin   : std_logic := '0';
  -- 
begin --
  test_system_instance: test_system -- 
    port map ( -- 
      main_a => main_a,
      main_b => main_b,
      main_c => main_c,
      main_tag_in => main_tag_in,
      main_tag_out => main_tag_out,
      main_start => main_start,
      main_fin  => main_fin ,
      clk => clk,
      reset => reset); -- 
  -- 
end Default;
