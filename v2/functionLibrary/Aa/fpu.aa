$constant ADDOP: $uint<8> := 0
$constant SUBOP: $uint<8> := 1
$constant MULOP: $uint<8> := 2

$pipeline $fullrate $module [fpmul32] 
$in (L : $float<8,23> R : $float<8,23> )
$out (ret_val_x_x : $float<8,23>)
$is 
{
    ret_val_x_x := (L * R)
}

$pipeline $fullrate $module [fpadd32] 
$in (L : $float<8,23> R : $float<8,23> )
$out (ret_val_x_x : $float<8,23>)
$is 
{
    ret_val_x_x := (L + R)
}

$pipeline $fullrate $module [fpsub32] 
$in (L : $float<8,23> R : $float<8,23> )
$out (ret_val_x_x : $float<8,23>)
$is 
{
    ret_val_x_x := (L - R)
}

$pipeline $fullrate $module [fpu32] 
$in (L : $float<8,23> R : $float<8,23> OP_ID : $uint<8> )
$out (ret_val_x_x : $float<8,23>)
$is 
{
	is_add := (OP_ID == ADDOP)
	is_sub := (OP_ID == SUBOP)
	is_mul := (OP_ID == MULOP)
    	$guard (is_add) oadd := (L + R)
    	$guard (is_sub) osub := (L - R)
        $guard (is_mul) omul := (L * R)
	ret_val_x_x := ($mux is_add oadd ($mux is_sub osub ($mux is_mul omul 0)))
}

// double precision..

$pipeline $fullrate $module [fpmul64] 
$in (L : $float<11,52> R : $float<11,52> )
$out (ret_val_x_x : $float<11,52>)
$is 
{
    ret_val_x_x := (L * R)
}

$pipeline $fullrate $module [fpadd64] 
$in (L : $float<11,52> R : $float<11,52> )
$out (ret_val_x_x : $float<11,52>)
$is 
{
    ret_val_x_x := (L + R)
}

$pipeline $fullrate $module [fpsub64] 
$in (L : $float<11,52> R : $float<11,52> )
$out (ret_val_x_x : $float<11,52>)
$is 
{
    ret_val_x_x := (L - R)
}

$pipeline $fullrate $module [fpu64] 
$in (L : $float<11,52> R : $float<11,52> OP_ID : $uint<8> )
$out (ret_val_x_x : $float<11,52>)
$is 
{
	is_add := (OP_ID == ADDOP)
	is_sub := (OP_ID == SUBOP)
	is_mul := (OP_ID == MULOP)
    	$guard (is_add) oadd := (L + R)
    	$guard (is_sub) osub := (L - R)
        $guard (is_mul) omul := (L * R)
	ret_val_x_x := ($mux is_add oadd ($mux is_sub osub ($mux is_mul omul 0)))
}
