$pipe out_data: $uint<16> $depth 4
$pipeline $depth 2  $fullrate  $operator $module [incr] 
	$in (a: $uint<16>) $out (b: $uint<16> c: $uint<16>) $is
{
	b := a  $buffering 2 
	c := 1  
}

$module [ifetch_main_daemon] $in () $out () $is
{
	$branchblock[Main] {

		$dopipeline $depth 16 $buffering 2  $fullrate

		$merge $entry $loopback 
			$phi pc  :=  ($bitcast ($uint<16>) 0)  $on $entry next_pc $on $loopback
		$endmerge
		
		$volatile always_true := ((pc != 0) | (pc == 0))

		// this will induce a cycle.
		// Aa compiler will buffer this by
		// 2 to prevent the cycle.
		$guard (always_true) $call incr (pc) (ppc c1)

		$volatile next_pc := (ppc + c1)
		out_data  := next_pc
		$while 1
	}
}


