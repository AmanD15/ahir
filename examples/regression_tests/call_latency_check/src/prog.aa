$pipe in_data  : $uint<32> $depth 2
$pipe out_data : $uint<32> $depth 2

$pipe spl_in_data  : $uint<32> $depth 2
$pipe spl_out_data : $uint<32> $depth 2

$pipeline $depth 15 $buffering 2 $fullrate $module  [echo4] $in (t a b c d: $uint<32>) $out (ct p q r s: $uint<32>) $is
{
	p := a  $buffering 2
	q := b  $buffering 2
	r := c  $buffering 2
	s := d  $buffering 2
	ct := t $buffering 2

	$attribute delay 4
	$attribute input_buffering  0
	$attribute output_buffering 0
}


$pipeline $depth 5 $buffering 2 $fullrate
	$module  [echo] $in (a: $uint<32>) $out (b: $uint<32>) $is
{
	b := a $buffering 2
	$attribute delay 4
	$attribute input_buffering  0
	$attribute output_buffering 0
}


$module [call_dependency_check_daemon] $in() $out () $is
{


	$branchblock[lOoP] {
		$dopipeline $depth 15 $buffering 4 
		$fullrate

		$merge $entry $loopback 
			$phi T := ($bitcast ($uint<32>) 0) $on $entry next_T $on $loopback
		$endmerge

		X0 := in_data
		X1 := in_data
		X2 := in_data
		X3 := in_data

		$volatile next_T := (T + 1)

		$call echo4 (T X0 X1 X2 X3) (cT X00 X11 X22 X33)

		out_data := X00
		out_data := X11
		out_data := X22
		out_data := X33

		$while 1
	}
}

$storage p q: $uint<32>

$module [setp] $in (X: $uint<32>) $out () $is {
	p := X
	$attribute input_buffering  0
	$attribute output_buffering 0
}
$module [copyp] $in () $out () $is {
	q := p 
	$attribute input_buffering  0
	$attribute output_buffering 0
}
$module [getq] $in () $out (X: $uint<32>) $is {
	X := q
	$attribute input_buffering  0
	$attribute output_buffering 0
}


$module [special_call_check_daemon] $in() $out () $is
{


	$branchblock[lOoP] {

		$merge $entry loopback $endmerge

		X0 := spl_in_data
		X1 := spl_in_data

		$call setp (X0) () $mark A
		$call copyp () () $mark B $synch (A)
		$call getq () (X00) $synch (B)

		$call setp (X1) () $mark C
		$call copyp () () $mark D $synch (C)
		$call getq () (X11) $synch (D)

		spl_out_data := X00
		spl_out_data := X11

		$place [loopback]
	}
}
